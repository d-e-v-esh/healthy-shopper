package healthyshopper

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"healthyshopper/ent"
)

// Price is the resolver for the price field.
func (r *productItemResolver) Price(ctx context.Context, obj *ent.ProductItem) (float64, error) {
	panic(fmt.Errorf("not implemented: Price - price"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*ent.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// ProductItems is the resolver for the productItems field.
func (r *queryResolver) ProductItems(ctx context.Context) ([]*ent.ProductItem, error) {
	panic(fmt.Errorf("not implemented: ProductItems - productItems"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.client.User.Query().All(ctx)
}

// UserAddresses is the resolver for the userAddresses field.
func (r *queryResolver) UserAddresses(ctx context.Context) ([]*ent.UserAddress, error) {
	panic(fmt.Errorf("not implemented: UserAddresses - userAddresses"))
}

// Price is the resolver for the price field.
func (r *createProductItemInputResolver) Price(ctx context.Context, obj *ent.CreateProductItemInput, data float64) error {
	panic(fmt.Errorf("not implemented: Price - price"))
}

// ProductItem returns ProductItemResolver implementation.
func (r *Resolver) ProductItem() ProductItemResolver { return &productItemResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// CreateProductItemInput returns CreateProductItemInputResolver implementation.
func (r *Resolver) CreateProductItemInput() CreateProductItemInputResolver {
	return &createProductItemInputResolver{r}
}

type productItemResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type createProductItemInputResolver struct{ *Resolver }
