directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Address implements Node {
  id: ID!
  phoneNumber: String!
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String!
  country: String!
  postalCode: String!
  userAddress: [UserAddress!]
}
"""
CreateProductInput is used for create Product object.
Input was generated by ent.
"""
input CreateProductInput {
  name: String!
  description: String!
  productImage: String!
  productCategoryID: Int
  createdAt: Time
  updatedAt: Time
  productItemID: ID
  promotionID: ID
  ingredientsTableID: ID
  nutritionalInformationID: ID
}
"""
CreateProductItemInput is used for create ProductItem object.
Input was generated by ent.
"""
input CreateProductItemInput {
  stockKeepingUnit: String!
  quantityInStock: Int!
  productImage: String!
  price: Float!
  createdAt: Time
  updatedAt: Time
  productID: ID!
}
"""
CreateUserAddressInput is used for create UserAddress object.
Input was generated by ent.
"""
input CreateUserAddressInput {
  isDefault: Boolean
  userID: ID!
  addressID: ID!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  username: String!
  emailAddress: String!
  password: String!
  firstName: String!
  lastName: String!
  createdAt: Time
  updatedAt: Time
  userAddresIDs: [ID!]
  userReviewIDs: [ID!]
  shoppingCartIDs: [ID!]
  shopOrderIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type IngredientsTable implements Node {
  id: ID!
  name: String!
  description: String!
  product: [Product!]!
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "healthyshopper/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type NutritionalInformation implements Node {
  id: ID!
  nutritionalInformationTableID: ID!
  nValue: Float!
  nMeasurementUnit: String!
  product: [Product!]!
  nutritionalInformationTable: NutritionalInformationTable!
}
type NutritionalInformationTable implements Node {
  id: ID!
  parameter: String!
  value: Float!
  measurementUnit: String!
  nutritionalInformation: [NutritionalInformation!]
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
type OrderLine implements Node {
  id: ID!
  productItemID: Int!
  shopOrderID: Int!
  quantity: Int!
  price: Float!
}
type OrderStatus implements Node {
  id: ID!
  status: String!
  shopOrder: [ShopOrder!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Product implements Node {
  id: ID!
  name: String!
  description: String!
  productImage: String!
  ingredientsTableID: ID
  productCategoryID: Int
  nutritionalInformationID: ID
  promotionID: ID
  createdAt: Time!
  updatedAt: Time
  productItem: ProductItem
  promotion: Promotion
  ingredientsTable: IngredientsTable
  nutritionalInformation: NutritionalInformation
}
type ProductItem implements Node {
  id: ID!
  productID: ID!
  stockKeepingUnit: String!
  quantityInStock: Int!
  productImage: String!
  price: Float!
  createdAt: Time!
  updatedAt: Time
  product: Product!
}
type Promotion implements Node {
  id: ID!
  name: String!
  description: String!
  discountPercentage: Int!
  startDate: Time!
  endDate: Time!
  product: [Product!]!
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  products: [Product!]!
  productItems: [ProductItem!]!
  users: [User!]!
  userAddresses: [UserAddress!]!
}
type ShippingAddress implements Node {
  id: ID!
  phoneNumber: String!
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String!
  country: String!
  postalCode: String!
  shopOrder: [ShopOrder!]
}
type ShippingMethod implements Node {
  id: ID!
  shippingMethod: String!
  shippingCost: Float!
  shopOrder: [ShopOrder!]
}
type ShopOrder implements Node {
  id: ID!
  orderDateAndTime: Time!
  paymentMethod: String!
  totalPrice: Float!
  userID: ID!
  shippingAddressID: ID!
  shippingMethodID: ID!
  orderStatusID: ID!
  user: User!
  shippingMethod: ShippingMethod!
  orderStatus: OrderStatus!
  shippingAddress: ShippingAddress!
}
type ShoppingCart implements Node {
  id: ID!
  userID: ID!
  user: User!
  shoppingCartItem: ShoppingCartItem
}
type ShoppingCartItem implements Node {
  id: ID!
  shoppingCartID: ID!
  productItemID: Int!
  quantity: Int!
  shoppingCart: ShoppingCart!
}
"""The builtin Time type"""
scalar Time
type User implements Node {
  id: ID!
  username: String!
  emailAddress: String!
  password: String!
  firstName: String!
  lastName: String!
  createdAt: Time!
  updatedAt: Time!
  userAddress: [UserAddress!]
  userReview: [UserReview!]
  shoppingCart: [ShoppingCart!]
  shopOrder: [ShopOrder!]
}
type UserAddress implements Node {
  id: ID!
  userID: ID!
  addressID: ID!
  isDefault: Boolean!
  user: User!
  address: Address!
}
type UserReview implements Node {
  id: ID!
  userID: ID!
  orderedProductID: Int!
  rating: Int!
  review: String!
  createdAt: Time!
  updatedAt: Time!
  user: User!
}
