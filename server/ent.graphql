directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Address implements Node {
  id: ID!
  addressID: Int!
  phoneNumber: String!
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String!
  country: String!
  postalCode: String!
  userAddress: [UserAddress!]
}
"""
CreateProductInput is used for create Product object.
Input was generated by ent.
"""
input CreateProductInput {
  productID: Int!
  name: String!
  description: String!
  productImage: String!
  productCategoryID: Int!
  ingredientsListID: Int!
  nutritionalInformationID: Int!
  promotionID: Int!
  createdAt: Time
  updatedAt: Time
}
"""
CreateUserAddressInput is used for create UserAddress object.
Input was generated by ent.
"""
input CreateUserAddressInput {
  isDefault: Boolean
  userID: ID!
  addressID: ID!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  userID: Int!
  username: String!
  emailAddress: String!
  password: String!
  firstName: String!
  lastName: String!
  createdAt: Time
  updatedAt: Time
  userAddresIDs: [ID!]
  userReviewIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "healthyshopper/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Product implements Node {
  id: ID!
  productID: Int!
  name: String!
  description: String!
  productImage: String!
  productCategoryID: Int!
  ingredientsListID: Int!
  nutritionalInformationID: Int!
  promotionID: Int!
  createdAt: Time!
  updatedAt: Time
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  products: [Product!]!
  users: [User!]!
  userAddresses: [UserAddress!]!
}
"""The builtin Time type"""
scalar Time
type User implements Node {
  id: ID!
  userID: Int!
  username: String!
  emailAddress: String!
  password: String!
  firstName: String!
  lastName: String!
  createdAt: Time!
  updatedAt: Time!
  userAddress: [UserAddress!]
  userReview: [UserReview!]
}
type UserAddress implements Node {
  id: ID!
  userID: ID!
  addressID: ID!
  isDefault: Boolean!
  user: User!
  address: Address!
}
type UserReview implements Node {
  id: ID!
  userReviewID: Int!
  userID: ID!
  orderedProductID: Int!
  rating: Int!
  review: String!
  createdAt: Time!
  updatedAt: Time!
  user: User!
}
