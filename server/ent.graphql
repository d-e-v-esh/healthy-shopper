directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Address implements Node {
  id: ID!
  phoneNumber: String!
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String!
  country: String!
  postalCode: String!
  userAddress: [UserAddress!]
}
"""
CreateAddressInput is used for create Address object.
Input was generated by ent.
"""
input CreateAddressInput {
  phoneNumber: String!
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String!
  country: String!
  postalCode: String!
  userAddresIDs: [ID!]
}
"""
CreateIngredientsTableInput is used for create IngredientsTable object.
Input was generated by ent.
"""
input CreateIngredientsTableInput {
  name: String!
  description: String!
  productIDs: [ID!]!
}
"""
CreateNutritionalInformationInput is used for create NutritionalInformation object.
Input was generated by ent.
"""
input CreateNutritionalInformationInput {
  nValue: Float!
  nMeasurementUnit: String!
  productIDs: [ID!]!
  nutritionalInformationTableID: ID!
}
"""
CreateNutritionalInformationTableInput is used for create NutritionalInformationTable object.
Input was generated by ent.
"""
input CreateNutritionalInformationTableInput {
  parameter: String!
  value: Float!
  measurementUnit: String!
  nutritionalInformationIDs: [ID!]
}
"""
CreateOrderLineInput is used for create OrderLine object.
Input was generated by ent.
"""
input CreateOrderLineInput {
  shopOrderID: Int!
  quantity: Int!
  price: Float!
  productItemID: ID!
  userReviewIDs: [ID!]
}
"""
CreateOrderStatusInput is used for create OrderStatus object.
Input was generated by ent.
"""
input CreateOrderStatusInput {
  status: String!
  shopOrderIDs: [ID!]
}
"""
CreateProductInput is used for create Product object.
Input was generated by ent.
"""
input CreateProductInput {
  name: String!
  description: String!
  productImage: String!
  productCategoryID: Int
  createdAt: Time
  updatedAt: Time
  productItemID: ID
  promotionID: ID
  ingredientsTableID: ID
  nutritionalInformationID: ID
}
"""
CreateProductItemInput is used for create ProductItem object.
Input was generated by ent.
"""
input CreateProductItemInput {
  stockKeepingUnit: String!
  quantityInStock: Int!
  productImage: String!
  price: Float!
  createdAt: Time
  updatedAt: Time
  productID: ID!
  orderLineIDs: [ID!]
  shoppingCartItemIDs: [ID!]
}
"""
CreatePromotionInput is used for create Promotion object.
Input was generated by ent.
"""
input CreatePromotionInput {
  name: String!
  description: String!
  discountPercentage: Int!
  startDate: Time!
  endDate: Time!
  productIDs: [ID!]!
}
"""
CreateShippingAddressInput is used for create ShippingAddress object.
Input was generated by ent.
"""
input CreateShippingAddressInput {
  phoneNumber: String!
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String!
  country: String!
  postalCode: String!
  shopOrderIDs: [ID!]
}
"""
CreateShippingMethodInput is used for create ShippingMethod object.
Input was generated by ent.
"""
input CreateShippingMethodInput {
  shippingMethod: String!
  shippingCost: Float!
  shopOrderIDs: [ID!]
}
"""
CreateShopOrderInput is used for create ShopOrder object.
Input was generated by ent.
"""
input CreateShopOrderInput {
  orderDateAndTime: Time
  paymentMethod: String!
  totalPrice: Float!
  userID: ID!
  shippingMethodID: ID!
  orderStatusID: ID!
  shippingAddressID: ID!
}
"""
CreateShoppingCartInput is used for create ShoppingCart object.
Input was generated by ent.
"""
input CreateShoppingCartInput {
  userID: ID!
  shoppingCartItemID: ID
}
"""
CreateShoppingCartItemInput is used for create ShoppingCartItem object.
Input was generated by ent.
"""
input CreateShoppingCartItemInput {
  quantity: Int!
  shoppingCartID: ID!
  productItemID: ID!
}
"""
CreateUserAddressInput is used for create UserAddress object.
Input was generated by ent.
"""
input CreateUserAddressInput {
  isDefault: Boolean
  userID: ID!
  addressID: ID!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  username: String!
  emailAddress: String!
  password: String!
  firstName: String!
  lastName: String!
  createdAt: Time
  updatedAt: Time
  userAddresIDs: [ID!]
  userReviewIDs: [ID!]
  shoppingCartIDs: [ID!]
  shopOrderIDs: [ID!]
}
"""
CreateUserReviewInput is used for create UserReview object.
Input was generated by ent.
"""
input CreateUserReviewInput {
  rating: Int!
  review: String!
  createdAt: Time
  updatedAt: Time
  userID: ID!
  orderedProductID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type IngredientsTable implements Node {
  id: ID!
  name: String!
  description: String!
  product: [Product!]!
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "healthyshopper/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type NutritionalInformation implements Node {
  id: ID!
  nutritionalInformationTableID: ID!
  nValue: Float!
  nMeasurementUnit: String!
  product: [Product!]!
  nutritionalInformationTable: NutritionalInformationTable!
}
type NutritionalInformationTable implements Node {
  id: ID!
  parameter: String!
  value: Float!
  measurementUnit: String!
  nutritionalInformation: [NutritionalInformation!]
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
type OrderLine implements Node {
  id: ID!
  productItemID: ID!
  shopOrderID: Int!
  quantity: Int!
  price: Float!
  productItem: ProductItem!
  userReview: [UserReview!]
}
type OrderStatus implements Node {
  id: ID!
  status: String!
  shopOrder: [ShopOrder!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Product implements Node {
  id: ID!
  name: String!
  description: String!
  productImage: String!
  ingredientsTableID: ID
  productCategoryID: Int
  nutritionalInformationID: ID
  promotionID: ID
  createdAt: Time!
  updatedAt: Time!
  productItem: ProductItem
  promotion: Promotion
  ingredientsTable: IngredientsTable
  nutritionalInformation: NutritionalInformation
}
type ProductItem implements Node {
  id: ID!
  productID: ID!
  stockKeepingUnit: String!
  quantityInStock: Int!
  productImage: String!
  price: Float!
  createdAt: Time!
  updatedAt: Time!
  product: Product!
  orderLine: [OrderLine!]
  shoppingCartItem: [ShoppingCartItem!]
}
type Promotion implements Node {
  id: ID!
  name: String!
  description: String!
  discountPercentage: Int!
  startDate: Time!
  endDate: Time!
  product: [Product!]!
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  addresses: [Address!]!
  ingredientsTables: [IngredientsTable!]!
  nutritionalInformations: [NutritionalInformation!]!
  nutritionalInformationTables: [NutritionalInformationTable!]!
  orderLines: [OrderLine!]!
  orderStatusSlice: [OrderStatus!]!
  products: [Product!]!
  productItems: [ProductItem!]!
  promotions: [Promotion!]!
  shippingAddresses: [ShippingAddress!]!
  shippingMethods: [ShippingMethod!]!
  shopOrders: [ShopOrder!]!
  shoppingCarts: [ShoppingCart!]!
  shoppingCartItems: [ShoppingCartItem!]!
  users: [User!]!
  userAddresses: [UserAddress!]!
  userReviews: [UserReview!]!
}
type ShippingAddress implements Node {
  id: ID!
  phoneNumber: String!
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String!
  country: String!
  postalCode: String!
  shopOrder: [ShopOrder!]
}
type ShippingMethod implements Node {
  id: ID!
  shippingMethod: String!
  shippingCost: Float!
  shopOrder: [ShopOrder!]
}
type ShopOrder implements Node {
  id: ID!
  orderDateAndTime: Time!
  paymentMethod: String!
  totalPrice: Float!
  userID: ID!
  shippingAddressID: ID!
  shippingMethodID: ID!
  orderStatusID: ID!
  user: User!
  shippingMethod: ShippingMethod!
  orderStatus: OrderStatus!
  shippingAddress: ShippingAddress!
}
type ShoppingCart implements Node {
  id: ID!
  userID: ID!
  user: User!
  shoppingCartItem: ShoppingCartItem
}
type ShoppingCartItem implements Node {
  id: ID!
  shoppingCartID: ID!
  productItemID: ID!
  quantity: Int!
  shoppingCart: ShoppingCart!
  productItem: ProductItem!
}
"""The builtin Time type"""
scalar Time
"""
UpdateAddressInput is used for update Address object.
Input was generated by ent.
"""
input UpdateAddressInput {
  phoneNumber: String
  addressLine1: String
  addressLine2: String
  clearAddressLine2: Boolean
  city: String
  state: String
  country: String
  postalCode: String
  addUserAddresIDs: [ID!]
  removeUserAddresIDs: [ID!]
  clearUserAddress: Boolean
}
"""
UpdateIngredientsTableInput is used for update IngredientsTable object.
Input was generated by ent.
"""
input UpdateIngredientsTableInput {
  name: String
  description: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
}
"""
UpdateNutritionalInformationInput is used for update NutritionalInformation object.
Input was generated by ent.
"""
input UpdateNutritionalInformationInput {
  nValue: Float
  nMeasurementUnit: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  nutritionalInformationTableID: ID
}
"""
UpdateNutritionalInformationTableInput is used for update NutritionalInformationTable object.
Input was generated by ent.
"""
input UpdateNutritionalInformationTableInput {
  parameter: String
  value: Float
  measurementUnit: String
  addNutritionalInformationIDs: [ID!]
  removeNutritionalInformationIDs: [ID!]
  clearNutritionalInformation: Boolean
}
"""
UpdateOrderLineInput is used for update OrderLine object.
Input was generated by ent.
"""
input UpdateOrderLineInput {
  shopOrderID: Int
  quantity: Int
  price: Float
  productItemID: ID
  addUserReviewIDs: [ID!]
  removeUserReviewIDs: [ID!]
  clearUserReview: Boolean
}
"""
UpdateOrderStatusInput is used for update OrderStatus object.
Input was generated by ent.
"""
input UpdateOrderStatusInput {
  status: String
  addShopOrderIDs: [ID!]
  removeShopOrderIDs: [ID!]
  clearShopOrder: Boolean
}
"""
UpdateProductInput is used for update Product object.
Input was generated by ent.
"""
input UpdateProductInput {
  name: String
  description: String
  productImage: String
  productCategoryID: Int
  clearProductCategoryID: Boolean
  createdAt: Time
  updatedAt: Time
  productItemID: ID
  clearProductItem: Boolean
  promotionID: ID
  clearPromotion: Boolean
  ingredientsTableID: ID
  clearIngredientsTable: Boolean
  nutritionalInformationID: ID
  clearNutritionalInformation: Boolean
}
"""
UpdateProductItemInput is used for update ProductItem object.
Input was generated by ent.
"""
input UpdateProductItemInput {
  stockKeepingUnit: String
  quantityInStock: Int
  productImage: String
  price: Float
  createdAt: Time
  updatedAt: Time
  productID: ID
  addOrderLineIDs: [ID!]
  removeOrderLineIDs: [ID!]
  clearOrderLine: Boolean
  addShoppingCartItemIDs: [ID!]
  removeShoppingCartItemIDs: [ID!]
  clearShoppingCartItem: Boolean
}
"""
UpdatePromotionInput is used for update Promotion object.
Input was generated by ent.
"""
input UpdatePromotionInput {
  name: String
  description: String
  discountPercentage: Int
  startDate: Time
  endDate: Time
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
}
"""
UpdateShippingAddressInput is used for update ShippingAddress object.
Input was generated by ent.
"""
input UpdateShippingAddressInput {
  phoneNumber: String
  addressLine1: String
  addressLine2: String
  clearAddressLine2: Boolean
  city: String
  state: String
  country: String
  postalCode: String
  addShopOrderIDs: [ID!]
  removeShopOrderIDs: [ID!]
  clearShopOrder: Boolean
}
"""
UpdateShippingMethodInput is used for update ShippingMethod object.
Input was generated by ent.
"""
input UpdateShippingMethodInput {
  shippingMethod: String
  shippingCost: Float
  addShopOrderIDs: [ID!]
  removeShopOrderIDs: [ID!]
  clearShopOrder: Boolean
}
"""
UpdateShopOrderInput is used for update ShopOrder object.
Input was generated by ent.
"""
input UpdateShopOrderInput {
  orderDateAndTime: Time
  paymentMethod: String
  totalPrice: Float
  userID: ID
  shippingMethodID: ID
  orderStatusID: ID
  shippingAddressID: ID
}
"""
UpdateShoppingCartInput is used for update ShoppingCart object.
Input was generated by ent.
"""
input UpdateShoppingCartInput {
  userID: ID
  shoppingCartItemID: ID
  clearShoppingCartItem: Boolean
}
"""
UpdateShoppingCartItemInput is used for update ShoppingCartItem object.
Input was generated by ent.
"""
input UpdateShoppingCartItemInput {
  quantity: Int
  shoppingCartID: ID
  productItemID: ID
}
"""
UpdateUserAddressInput is used for update UserAddress object.
Input was generated by ent.
"""
input UpdateUserAddressInput {
  isDefault: Boolean
  userID: ID
  addressID: ID
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  username: String
  emailAddress: String
  password: String
  firstName: String
  lastName: String
  createdAt: Time
  updatedAt: Time
  addUserAddresIDs: [ID!]
  removeUserAddresIDs: [ID!]
  clearUserAddress: Boolean
  addUserReviewIDs: [ID!]
  removeUserReviewIDs: [ID!]
  clearUserReview: Boolean
  addShoppingCartIDs: [ID!]
  removeShoppingCartIDs: [ID!]
  clearShoppingCart: Boolean
  addShopOrderIDs: [ID!]
  removeShopOrderIDs: [ID!]
  clearShopOrder: Boolean
}
"""
UpdateUserReviewInput is used for update UserReview object.
Input was generated by ent.
"""
input UpdateUserReviewInput {
  rating: Int
  review: String
  createdAt: Time
  updatedAt: Time
  userID: ID
  orderedProductID: ID
}
type User implements Node {
  id: ID!
  username: String!
  emailAddress: String!
  password: String!
  firstName: String!
  lastName: String!
  createdAt: Time!
  updatedAt: Time!
  userAddress: [UserAddress!]
  userReview: [UserReview!]
  shoppingCart: [ShoppingCart!]
  shopOrder: [ShopOrder!]
}
type UserAddress implements Node {
  id: ID!
  userID: ID!
  addressID: ID!
  isDefault: Boolean!
  user: User!
  address: Address!
}
type UserReview implements Node {
  id: ID!
  userID: ID!
  orderedProductID: ID!
  rating: Int!
  review: String!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  orderedProduct: OrderLine!
}
