// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthyshopper/ent/promotion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Promotion is the model entity for the Promotion schema.
type Promotion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DiscountPercentage holds the value of the "discount_percentage" field.
	DiscountPercentage int `json:"discount_percentage,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionQuery when eager-loading is set.
	Edges        PromotionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionEdges holds the relations/edges for other nodes in the graph.
type PromotionEdges struct {
	// Product holds the value of the product edge.
	Product []*Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedProduct map[string][]*Product
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionEdges) ProductOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Promotion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotion.FieldID, promotion.FieldDiscountPercentage:
			values[i] = new(sql.NullInt64)
		case promotion.FieldName, promotion.FieldDescription:
			values[i] = new(sql.NullString)
		case promotion.FieldStartDate, promotion.FieldEndDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Promotion fields.
func (pr *Promotion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case promotion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case promotion.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case promotion.FieldDiscountPercentage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_percentage", values[i])
			} else if value.Valid {
				pr.DiscountPercentage = int(value.Int64)
			}
		case promotion.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				pr.StartDate = value.Time
			}
		case promotion.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				pr.EndDate = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Promotion.
// This includes values selected through modifiers, order, etc.
func (pr *Promotion) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the Promotion entity.
func (pr *Promotion) QueryProduct() *ProductQuery {
	return NewPromotionClient(pr.config).QueryProduct(pr)
}

// Update returns a builder for updating this Promotion.
// Note that you need to call Promotion.Unwrap() before calling this method if this Promotion
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Promotion) Update() *PromotionUpdateOne {
	return NewPromotionClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Promotion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Promotion) Unwrap() *Promotion {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Promotion is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Promotion) String() string {
	var builder strings.Builder
	builder.WriteString("Promotion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("discount_percentage=")
	builder.WriteString(fmt.Sprintf("%v", pr.DiscountPercentage))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(pr.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(pr.EndDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedProduct returns the Product named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Promotion) NamedProduct(name string) ([]*Product, error) {
	if pr.Edges.namedProduct == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedProduct[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Promotion) appendNamedProduct(name string, edges ...*Product) {
	if pr.Edges.namedProduct == nil {
		pr.Edges.namedProduct = make(map[string][]*Product)
	}
	if len(edges) == 0 {
		pr.Edges.namedProduct[name] = []*Product{}
	} else {
		pr.Edges.namedProduct[name] = append(pr.Edges.namedProduct[name], edges...)
	}
}

// Promotions is a parsable slice of Promotion.
type Promotions []*Promotion
