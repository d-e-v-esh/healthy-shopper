// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"healthyshopper/ent/nutritionalinformationtable"
	"healthyshopper/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NutritionalInformationTableDelete is the builder for deleting a NutritionalInformationTable entity.
type NutritionalInformationTableDelete struct {
	config
	hooks    []Hook
	mutation *NutritionalInformationTableMutation
}

// Where appends a list predicates to the NutritionalInformationTableDelete builder.
func (nitd *NutritionalInformationTableDelete) Where(ps ...predicate.NutritionalInformationTable) *NutritionalInformationTableDelete {
	nitd.mutation.Where(ps...)
	return nitd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nitd *NutritionalInformationTableDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nitd.sqlExec, nitd.mutation, nitd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nitd *NutritionalInformationTableDelete) ExecX(ctx context.Context) int {
	n, err := nitd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nitd *NutritionalInformationTableDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(nutritionalinformationtable.Table, sqlgraph.NewFieldSpec(nutritionalinformationtable.FieldID, field.TypeInt))
	if ps := nitd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nitd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nitd.mutation.done = true
	return affected, err
}

// NutritionalInformationTableDeleteOne is the builder for deleting a single NutritionalInformationTable entity.
type NutritionalInformationTableDeleteOne struct {
	nitd *NutritionalInformationTableDelete
}

// Where appends a list predicates to the NutritionalInformationTableDelete builder.
func (nitdo *NutritionalInformationTableDeleteOne) Where(ps ...predicate.NutritionalInformationTable) *NutritionalInformationTableDeleteOne {
	nitdo.nitd.mutation.Where(ps...)
	return nitdo
}

// Exec executes the deletion query.
func (nitdo *NutritionalInformationTableDeleteOne) Exec(ctx context.Context) error {
	n, err := nitdo.nitd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{nutritionalinformationtable.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nitdo *NutritionalInformationTableDeleteOne) ExecX(ctx context.Context) {
	if err := nitdo.Exec(ctx); err != nil {
		panic(err)
	}
}
