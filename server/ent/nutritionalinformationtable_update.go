// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/nutritionalinformation"
	"healthyshopper/ent/nutritionalinformationtable"
	"healthyshopper/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NutritionalInformationTableUpdate is the builder for updating NutritionalInformationTable entities.
type NutritionalInformationTableUpdate struct {
	config
	hooks    []Hook
	mutation *NutritionalInformationTableMutation
}

// Where appends a list predicates to the NutritionalInformationTableUpdate builder.
func (nitu *NutritionalInformationTableUpdate) Where(ps ...predicate.NutritionalInformationTable) *NutritionalInformationTableUpdate {
	nitu.mutation.Where(ps...)
	return nitu
}

// SetParameter sets the "parameter" field.
func (nitu *NutritionalInformationTableUpdate) SetParameter(s string) *NutritionalInformationTableUpdate {
	nitu.mutation.SetParameter(s)
	return nitu
}

// SetValue sets the "value" field.
func (nitu *NutritionalInformationTableUpdate) SetValue(f float64) *NutritionalInformationTableUpdate {
	nitu.mutation.ResetValue()
	nitu.mutation.SetValue(f)
	return nitu
}

// AddValue adds f to the "value" field.
func (nitu *NutritionalInformationTableUpdate) AddValue(f float64) *NutritionalInformationTableUpdate {
	nitu.mutation.AddValue(f)
	return nitu
}

// SetMeasurementUnit sets the "measurement_unit" field.
func (nitu *NutritionalInformationTableUpdate) SetMeasurementUnit(s string) *NutritionalInformationTableUpdate {
	nitu.mutation.SetMeasurementUnit(s)
	return nitu
}

// AddNutritionalInformationIDs adds the "nutritional_information" edge to the NutritionalInformation entity by IDs.
func (nitu *NutritionalInformationTableUpdate) AddNutritionalInformationIDs(ids ...int) *NutritionalInformationTableUpdate {
	nitu.mutation.AddNutritionalInformationIDs(ids...)
	return nitu
}

// AddNutritionalInformation adds the "nutritional_information" edges to the NutritionalInformation entity.
func (nitu *NutritionalInformationTableUpdate) AddNutritionalInformation(n ...*NutritionalInformation) *NutritionalInformationTableUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nitu.AddNutritionalInformationIDs(ids...)
}

// Mutation returns the NutritionalInformationTableMutation object of the builder.
func (nitu *NutritionalInformationTableUpdate) Mutation() *NutritionalInformationTableMutation {
	return nitu.mutation
}

// ClearNutritionalInformation clears all "nutritional_information" edges to the NutritionalInformation entity.
func (nitu *NutritionalInformationTableUpdate) ClearNutritionalInformation() *NutritionalInformationTableUpdate {
	nitu.mutation.ClearNutritionalInformation()
	return nitu
}

// RemoveNutritionalInformationIDs removes the "nutritional_information" edge to NutritionalInformation entities by IDs.
func (nitu *NutritionalInformationTableUpdate) RemoveNutritionalInformationIDs(ids ...int) *NutritionalInformationTableUpdate {
	nitu.mutation.RemoveNutritionalInformationIDs(ids...)
	return nitu
}

// RemoveNutritionalInformation removes "nutritional_information" edges to NutritionalInformation entities.
func (nitu *NutritionalInformationTableUpdate) RemoveNutritionalInformation(n ...*NutritionalInformation) *NutritionalInformationTableUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nitu.RemoveNutritionalInformationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nitu *NutritionalInformationTableUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nitu.sqlSave, nitu.mutation, nitu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nitu *NutritionalInformationTableUpdate) SaveX(ctx context.Context) int {
	affected, err := nitu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nitu *NutritionalInformationTableUpdate) Exec(ctx context.Context) error {
	_, err := nitu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nitu *NutritionalInformationTableUpdate) ExecX(ctx context.Context) {
	if err := nitu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nitu *NutritionalInformationTableUpdate) check() error {
	if v, ok := nitu.mutation.Parameter(); ok {
		if err := nutritionalinformationtable.ParameterValidator(v); err != nil {
			return &ValidationError{Name: "parameter", err: fmt.Errorf(`ent: validator failed for field "NutritionalInformationTable.parameter": %w`, err)}
		}
	}
	if v, ok := nitu.mutation.Value(); ok {
		if err := nutritionalinformationtable.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "NutritionalInformationTable.value": %w`, err)}
		}
	}
	if v, ok := nitu.mutation.MeasurementUnit(); ok {
		if err := nutritionalinformationtable.MeasurementUnitValidator(v); err != nil {
			return &ValidationError{Name: "measurement_unit", err: fmt.Errorf(`ent: validator failed for field "NutritionalInformationTable.measurement_unit": %w`, err)}
		}
	}
	return nil
}

func (nitu *NutritionalInformationTableUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nitu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(nutritionalinformationtable.Table, nutritionalinformationtable.Columns, sqlgraph.NewFieldSpec(nutritionalinformationtable.FieldID, field.TypeInt))
	if ps := nitu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nitu.mutation.Parameter(); ok {
		_spec.SetField(nutritionalinformationtable.FieldParameter, field.TypeString, value)
	}
	if value, ok := nitu.mutation.Value(); ok {
		_spec.SetField(nutritionalinformationtable.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := nitu.mutation.AddedValue(); ok {
		_spec.AddField(nutritionalinformationtable.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := nitu.mutation.MeasurementUnit(); ok {
		_spec.SetField(nutritionalinformationtable.FieldMeasurementUnit, field.TypeString, value)
	}
	if nitu.mutation.NutritionalInformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nutritionalinformationtable.NutritionalInformationTable,
			Columns: []string{nutritionalinformationtable.NutritionalInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutritionalinformation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nitu.mutation.RemovedNutritionalInformationIDs(); len(nodes) > 0 && !nitu.mutation.NutritionalInformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nutritionalinformationtable.NutritionalInformationTable,
			Columns: []string{nutritionalinformationtable.NutritionalInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutritionalinformation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nitu.mutation.NutritionalInformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nutritionalinformationtable.NutritionalInformationTable,
			Columns: []string{nutritionalinformationtable.NutritionalInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutritionalinformation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nitu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nutritionalinformationtable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nitu.mutation.done = true
	return n, nil
}

// NutritionalInformationTableUpdateOne is the builder for updating a single NutritionalInformationTable entity.
type NutritionalInformationTableUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NutritionalInformationTableMutation
}

// SetParameter sets the "parameter" field.
func (nituo *NutritionalInformationTableUpdateOne) SetParameter(s string) *NutritionalInformationTableUpdateOne {
	nituo.mutation.SetParameter(s)
	return nituo
}

// SetValue sets the "value" field.
func (nituo *NutritionalInformationTableUpdateOne) SetValue(f float64) *NutritionalInformationTableUpdateOne {
	nituo.mutation.ResetValue()
	nituo.mutation.SetValue(f)
	return nituo
}

// AddValue adds f to the "value" field.
func (nituo *NutritionalInformationTableUpdateOne) AddValue(f float64) *NutritionalInformationTableUpdateOne {
	nituo.mutation.AddValue(f)
	return nituo
}

// SetMeasurementUnit sets the "measurement_unit" field.
func (nituo *NutritionalInformationTableUpdateOne) SetMeasurementUnit(s string) *NutritionalInformationTableUpdateOne {
	nituo.mutation.SetMeasurementUnit(s)
	return nituo
}

// AddNutritionalInformationIDs adds the "nutritional_information" edge to the NutritionalInformation entity by IDs.
func (nituo *NutritionalInformationTableUpdateOne) AddNutritionalInformationIDs(ids ...int) *NutritionalInformationTableUpdateOne {
	nituo.mutation.AddNutritionalInformationIDs(ids...)
	return nituo
}

// AddNutritionalInformation adds the "nutritional_information" edges to the NutritionalInformation entity.
func (nituo *NutritionalInformationTableUpdateOne) AddNutritionalInformation(n ...*NutritionalInformation) *NutritionalInformationTableUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nituo.AddNutritionalInformationIDs(ids...)
}

// Mutation returns the NutritionalInformationTableMutation object of the builder.
func (nituo *NutritionalInformationTableUpdateOne) Mutation() *NutritionalInformationTableMutation {
	return nituo.mutation
}

// ClearNutritionalInformation clears all "nutritional_information" edges to the NutritionalInformation entity.
func (nituo *NutritionalInformationTableUpdateOne) ClearNutritionalInformation() *NutritionalInformationTableUpdateOne {
	nituo.mutation.ClearNutritionalInformation()
	return nituo
}

// RemoveNutritionalInformationIDs removes the "nutritional_information" edge to NutritionalInformation entities by IDs.
func (nituo *NutritionalInformationTableUpdateOne) RemoveNutritionalInformationIDs(ids ...int) *NutritionalInformationTableUpdateOne {
	nituo.mutation.RemoveNutritionalInformationIDs(ids...)
	return nituo
}

// RemoveNutritionalInformation removes "nutritional_information" edges to NutritionalInformation entities.
func (nituo *NutritionalInformationTableUpdateOne) RemoveNutritionalInformation(n ...*NutritionalInformation) *NutritionalInformationTableUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nituo.RemoveNutritionalInformationIDs(ids...)
}

// Where appends a list predicates to the NutritionalInformationTableUpdate builder.
func (nituo *NutritionalInformationTableUpdateOne) Where(ps ...predicate.NutritionalInformationTable) *NutritionalInformationTableUpdateOne {
	nituo.mutation.Where(ps...)
	return nituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nituo *NutritionalInformationTableUpdateOne) Select(field string, fields ...string) *NutritionalInformationTableUpdateOne {
	nituo.fields = append([]string{field}, fields...)
	return nituo
}

// Save executes the query and returns the updated NutritionalInformationTable entity.
func (nituo *NutritionalInformationTableUpdateOne) Save(ctx context.Context) (*NutritionalInformationTable, error) {
	return withHooks(ctx, nituo.sqlSave, nituo.mutation, nituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nituo *NutritionalInformationTableUpdateOne) SaveX(ctx context.Context) *NutritionalInformationTable {
	node, err := nituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nituo *NutritionalInformationTableUpdateOne) Exec(ctx context.Context) error {
	_, err := nituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nituo *NutritionalInformationTableUpdateOne) ExecX(ctx context.Context) {
	if err := nituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nituo *NutritionalInformationTableUpdateOne) check() error {
	if v, ok := nituo.mutation.Parameter(); ok {
		if err := nutritionalinformationtable.ParameterValidator(v); err != nil {
			return &ValidationError{Name: "parameter", err: fmt.Errorf(`ent: validator failed for field "NutritionalInformationTable.parameter": %w`, err)}
		}
	}
	if v, ok := nituo.mutation.Value(); ok {
		if err := nutritionalinformationtable.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "NutritionalInformationTable.value": %w`, err)}
		}
	}
	if v, ok := nituo.mutation.MeasurementUnit(); ok {
		if err := nutritionalinformationtable.MeasurementUnitValidator(v); err != nil {
			return &ValidationError{Name: "measurement_unit", err: fmt.Errorf(`ent: validator failed for field "NutritionalInformationTable.measurement_unit": %w`, err)}
		}
	}
	return nil
}

func (nituo *NutritionalInformationTableUpdateOne) sqlSave(ctx context.Context) (_node *NutritionalInformationTable, err error) {
	if err := nituo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(nutritionalinformationtable.Table, nutritionalinformationtable.Columns, sqlgraph.NewFieldSpec(nutritionalinformationtable.FieldID, field.TypeInt))
	id, ok := nituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NutritionalInformationTable.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nutritionalinformationtable.FieldID)
		for _, f := range fields {
			if !nutritionalinformationtable.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nutritionalinformationtable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nituo.mutation.Parameter(); ok {
		_spec.SetField(nutritionalinformationtable.FieldParameter, field.TypeString, value)
	}
	if value, ok := nituo.mutation.Value(); ok {
		_spec.SetField(nutritionalinformationtable.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := nituo.mutation.AddedValue(); ok {
		_spec.AddField(nutritionalinformationtable.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := nituo.mutation.MeasurementUnit(); ok {
		_spec.SetField(nutritionalinformationtable.FieldMeasurementUnit, field.TypeString, value)
	}
	if nituo.mutation.NutritionalInformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nutritionalinformationtable.NutritionalInformationTable,
			Columns: []string{nutritionalinformationtable.NutritionalInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutritionalinformation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nituo.mutation.RemovedNutritionalInformationIDs(); len(nodes) > 0 && !nituo.mutation.NutritionalInformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nutritionalinformationtable.NutritionalInformationTable,
			Columns: []string{nutritionalinformationtable.NutritionalInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutritionalinformation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nituo.mutation.NutritionalInformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nutritionalinformationtable.NutritionalInformationTable,
			Columns: []string{nutritionalinformationtable.NutritionalInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutritionalinformation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NutritionalInformationTable{config: nituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nutritionalinformationtable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nituo.mutation.done = true
	return _node, nil
}
