// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/predicate"
	"healthyshopper/ent/productitem"
	"healthyshopper/ent/shoppingcart"
	"healthyshopper/ent/shoppingcartitem"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShoppingCartItemUpdate is the builder for updating ShoppingCartItem entities.
type ShoppingCartItemUpdate struct {
	config
	hooks    []Hook
	mutation *ShoppingCartItemMutation
}

// Where appends a list predicates to the ShoppingCartItemUpdate builder.
func (sciu *ShoppingCartItemUpdate) Where(ps ...predicate.ShoppingCartItem) *ShoppingCartItemUpdate {
	sciu.mutation.Where(ps...)
	return sciu
}

// SetShoppingCartID sets the "shopping_cart_id" field.
func (sciu *ShoppingCartItemUpdate) SetShoppingCartID(i int) *ShoppingCartItemUpdate {
	sciu.mutation.SetShoppingCartID(i)
	return sciu
}

// SetProductItemID sets the "product_item_id" field.
func (sciu *ShoppingCartItemUpdate) SetProductItemID(i int) *ShoppingCartItemUpdate {
	sciu.mutation.SetProductItemID(i)
	return sciu
}

// SetQuantity sets the "quantity" field.
func (sciu *ShoppingCartItemUpdate) SetQuantity(i int) *ShoppingCartItemUpdate {
	sciu.mutation.ResetQuantity()
	sciu.mutation.SetQuantity(i)
	return sciu
}

// AddQuantity adds i to the "quantity" field.
func (sciu *ShoppingCartItemUpdate) AddQuantity(i int) *ShoppingCartItemUpdate {
	sciu.mutation.AddQuantity(i)
	return sciu
}

// SetShoppingCart sets the "shopping_cart" edge to the ShoppingCart entity.
func (sciu *ShoppingCartItemUpdate) SetShoppingCart(s *ShoppingCart) *ShoppingCartItemUpdate {
	return sciu.SetShoppingCartID(s.ID)
}

// SetProductItem sets the "product_item" edge to the ProductItem entity.
func (sciu *ShoppingCartItemUpdate) SetProductItem(p *ProductItem) *ShoppingCartItemUpdate {
	return sciu.SetProductItemID(p.ID)
}

// Mutation returns the ShoppingCartItemMutation object of the builder.
func (sciu *ShoppingCartItemUpdate) Mutation() *ShoppingCartItemMutation {
	return sciu.mutation
}

// ClearShoppingCart clears the "shopping_cart" edge to the ShoppingCart entity.
func (sciu *ShoppingCartItemUpdate) ClearShoppingCart() *ShoppingCartItemUpdate {
	sciu.mutation.ClearShoppingCart()
	return sciu
}

// ClearProductItem clears the "product_item" edge to the ProductItem entity.
func (sciu *ShoppingCartItemUpdate) ClearProductItem() *ShoppingCartItemUpdate {
	sciu.mutation.ClearProductItem()
	return sciu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sciu *ShoppingCartItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sciu.sqlSave, sciu.mutation, sciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sciu *ShoppingCartItemUpdate) SaveX(ctx context.Context) int {
	affected, err := sciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sciu *ShoppingCartItemUpdate) Exec(ctx context.Context) error {
	_, err := sciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sciu *ShoppingCartItemUpdate) ExecX(ctx context.Context) {
	if err := sciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sciu *ShoppingCartItemUpdate) check() error {
	if v, ok := sciu.mutation.Quantity(); ok {
		if err := shoppingcartitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "ShoppingCartItem.quantity": %w`, err)}
		}
	}
	if _, ok := sciu.mutation.ShoppingCartID(); sciu.mutation.ShoppingCartCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShoppingCartItem.shopping_cart"`)
	}
	if _, ok := sciu.mutation.ProductItemID(); sciu.mutation.ProductItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShoppingCartItem.product_item"`)
	}
	return nil
}

func (sciu *ShoppingCartItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sciu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shoppingcartitem.Table, shoppingcartitem.Columns, sqlgraph.NewFieldSpec(shoppingcartitem.FieldID, field.TypeInt))
	if ps := sciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sciu.mutation.Quantity(); ok {
		_spec.SetField(shoppingcartitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := sciu.mutation.AddedQuantity(); ok {
		_spec.AddField(shoppingcartitem.FieldQuantity, field.TypeInt, value)
	}
	if sciu.mutation.ShoppingCartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shoppingcartitem.ShoppingCartTable,
			Columns: []string{shoppingcartitem.ShoppingCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sciu.mutation.ShoppingCartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shoppingcartitem.ShoppingCartTable,
			Columns: []string{shoppingcartitem.ShoppingCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sciu.mutation.ProductItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcartitem.ProductItemTable,
			Columns: []string{shoppingcartitem.ProductItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sciu.mutation.ProductItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcartitem.ProductItemTable,
			Columns: []string{shoppingcartitem.ProductItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoppingcartitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sciu.mutation.done = true
	return n, nil
}

// ShoppingCartItemUpdateOne is the builder for updating a single ShoppingCartItem entity.
type ShoppingCartItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShoppingCartItemMutation
}

// SetShoppingCartID sets the "shopping_cart_id" field.
func (sciuo *ShoppingCartItemUpdateOne) SetShoppingCartID(i int) *ShoppingCartItemUpdateOne {
	sciuo.mutation.SetShoppingCartID(i)
	return sciuo
}

// SetProductItemID sets the "product_item_id" field.
func (sciuo *ShoppingCartItemUpdateOne) SetProductItemID(i int) *ShoppingCartItemUpdateOne {
	sciuo.mutation.SetProductItemID(i)
	return sciuo
}

// SetQuantity sets the "quantity" field.
func (sciuo *ShoppingCartItemUpdateOne) SetQuantity(i int) *ShoppingCartItemUpdateOne {
	sciuo.mutation.ResetQuantity()
	sciuo.mutation.SetQuantity(i)
	return sciuo
}

// AddQuantity adds i to the "quantity" field.
func (sciuo *ShoppingCartItemUpdateOne) AddQuantity(i int) *ShoppingCartItemUpdateOne {
	sciuo.mutation.AddQuantity(i)
	return sciuo
}

// SetShoppingCart sets the "shopping_cart" edge to the ShoppingCart entity.
func (sciuo *ShoppingCartItemUpdateOne) SetShoppingCart(s *ShoppingCart) *ShoppingCartItemUpdateOne {
	return sciuo.SetShoppingCartID(s.ID)
}

// SetProductItem sets the "product_item" edge to the ProductItem entity.
func (sciuo *ShoppingCartItemUpdateOne) SetProductItem(p *ProductItem) *ShoppingCartItemUpdateOne {
	return sciuo.SetProductItemID(p.ID)
}

// Mutation returns the ShoppingCartItemMutation object of the builder.
func (sciuo *ShoppingCartItemUpdateOne) Mutation() *ShoppingCartItemMutation {
	return sciuo.mutation
}

// ClearShoppingCart clears the "shopping_cart" edge to the ShoppingCart entity.
func (sciuo *ShoppingCartItemUpdateOne) ClearShoppingCart() *ShoppingCartItemUpdateOne {
	sciuo.mutation.ClearShoppingCart()
	return sciuo
}

// ClearProductItem clears the "product_item" edge to the ProductItem entity.
func (sciuo *ShoppingCartItemUpdateOne) ClearProductItem() *ShoppingCartItemUpdateOne {
	sciuo.mutation.ClearProductItem()
	return sciuo
}

// Where appends a list predicates to the ShoppingCartItemUpdate builder.
func (sciuo *ShoppingCartItemUpdateOne) Where(ps ...predicate.ShoppingCartItem) *ShoppingCartItemUpdateOne {
	sciuo.mutation.Where(ps...)
	return sciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sciuo *ShoppingCartItemUpdateOne) Select(field string, fields ...string) *ShoppingCartItemUpdateOne {
	sciuo.fields = append([]string{field}, fields...)
	return sciuo
}

// Save executes the query and returns the updated ShoppingCartItem entity.
func (sciuo *ShoppingCartItemUpdateOne) Save(ctx context.Context) (*ShoppingCartItem, error) {
	return withHooks(ctx, sciuo.sqlSave, sciuo.mutation, sciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sciuo *ShoppingCartItemUpdateOne) SaveX(ctx context.Context) *ShoppingCartItem {
	node, err := sciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sciuo *ShoppingCartItemUpdateOne) Exec(ctx context.Context) error {
	_, err := sciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sciuo *ShoppingCartItemUpdateOne) ExecX(ctx context.Context) {
	if err := sciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sciuo *ShoppingCartItemUpdateOne) check() error {
	if v, ok := sciuo.mutation.Quantity(); ok {
		if err := shoppingcartitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "ShoppingCartItem.quantity": %w`, err)}
		}
	}
	if _, ok := sciuo.mutation.ShoppingCartID(); sciuo.mutation.ShoppingCartCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShoppingCartItem.shopping_cart"`)
	}
	if _, ok := sciuo.mutation.ProductItemID(); sciuo.mutation.ProductItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShoppingCartItem.product_item"`)
	}
	return nil
}

func (sciuo *ShoppingCartItemUpdateOne) sqlSave(ctx context.Context) (_node *ShoppingCartItem, err error) {
	if err := sciuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shoppingcartitem.Table, shoppingcartitem.Columns, sqlgraph.NewFieldSpec(shoppingcartitem.FieldID, field.TypeInt))
	id, ok := sciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShoppingCartItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shoppingcartitem.FieldID)
		for _, f := range fields {
			if !shoppingcartitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shoppingcartitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sciuo.mutation.Quantity(); ok {
		_spec.SetField(shoppingcartitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := sciuo.mutation.AddedQuantity(); ok {
		_spec.AddField(shoppingcartitem.FieldQuantity, field.TypeInt, value)
	}
	if sciuo.mutation.ShoppingCartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shoppingcartitem.ShoppingCartTable,
			Columns: []string{shoppingcartitem.ShoppingCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sciuo.mutation.ShoppingCartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shoppingcartitem.ShoppingCartTable,
			Columns: []string{shoppingcartitem.ShoppingCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sciuo.mutation.ProductItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcartitem.ProductItemTable,
			Columns: []string{shoppingcartitem.ProductItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sciuo.mutation.ProductItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcartitem.ProductItemTable,
			Columns: []string{shoppingcartitem.ProductItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShoppingCartItem{config: sciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoppingcartitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sciuo.mutation.done = true
	return _node, nil
}
