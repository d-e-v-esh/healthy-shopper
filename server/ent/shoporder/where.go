// Code generated by ent, DO NOT EDIT.

package shoporder

import (
	"healthyshopper/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldLTE(FieldID, id))
}

// OrderDateAndTime applies equality check predicate on the "order_date_and_time" field. It's identical to OrderDateAndTimeEQ.
func OrderDateAndTime(v time.Time) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldOrderDateAndTime, v))
}

// PaymentMethod applies equality check predicate on the "payment_method" field. It's identical to PaymentMethodEQ.
func PaymentMethod(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldPaymentMethod, v))
}

// TotalPrice applies equality check predicate on the "total_price" field. It's identical to TotalPriceEQ.
func TotalPrice(v float64) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldTotalPrice, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldUserID, v))
}

// ShippingAddressID applies equality check predicate on the "shipping_address_id" field. It's identical to ShippingAddressIDEQ.
func ShippingAddressID(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldShippingAddressID, v))
}

// ShippingMethodID applies equality check predicate on the "shipping_method_id" field. It's identical to ShippingMethodIDEQ.
func ShippingMethodID(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldShippingMethodID, v))
}

// OrderStatusID applies equality check predicate on the "order_status_id" field. It's identical to OrderStatusIDEQ.
func OrderStatusID(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldOrderStatusID, v))
}

// OrderDateAndTimeEQ applies the EQ predicate on the "order_date_and_time" field.
func OrderDateAndTimeEQ(v time.Time) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldOrderDateAndTime, v))
}

// OrderDateAndTimeNEQ applies the NEQ predicate on the "order_date_and_time" field.
func OrderDateAndTimeNEQ(v time.Time) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNEQ(FieldOrderDateAndTime, v))
}

// OrderDateAndTimeIn applies the In predicate on the "order_date_and_time" field.
func OrderDateAndTimeIn(vs ...time.Time) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldIn(FieldOrderDateAndTime, vs...))
}

// OrderDateAndTimeNotIn applies the NotIn predicate on the "order_date_and_time" field.
func OrderDateAndTimeNotIn(vs ...time.Time) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNotIn(FieldOrderDateAndTime, vs...))
}

// OrderDateAndTimeGT applies the GT predicate on the "order_date_and_time" field.
func OrderDateAndTimeGT(v time.Time) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldGT(FieldOrderDateAndTime, v))
}

// OrderDateAndTimeGTE applies the GTE predicate on the "order_date_and_time" field.
func OrderDateAndTimeGTE(v time.Time) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldGTE(FieldOrderDateAndTime, v))
}

// OrderDateAndTimeLT applies the LT predicate on the "order_date_and_time" field.
func OrderDateAndTimeLT(v time.Time) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldLT(FieldOrderDateAndTime, v))
}

// OrderDateAndTimeLTE applies the LTE predicate on the "order_date_and_time" field.
func OrderDateAndTimeLTE(v time.Time) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldLTE(FieldOrderDateAndTime, v))
}

// PaymentMethodEQ applies the EQ predicate on the "payment_method" field.
func PaymentMethodEQ(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentMethodNEQ applies the NEQ predicate on the "payment_method" field.
func PaymentMethodNEQ(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNEQ(FieldPaymentMethod, v))
}

// PaymentMethodIn applies the In predicate on the "payment_method" field.
func PaymentMethodIn(vs ...string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldIn(FieldPaymentMethod, vs...))
}

// PaymentMethodNotIn applies the NotIn predicate on the "payment_method" field.
func PaymentMethodNotIn(vs ...string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNotIn(FieldPaymentMethod, vs...))
}

// PaymentMethodGT applies the GT predicate on the "payment_method" field.
func PaymentMethodGT(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldGT(FieldPaymentMethod, v))
}

// PaymentMethodGTE applies the GTE predicate on the "payment_method" field.
func PaymentMethodGTE(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldGTE(FieldPaymentMethod, v))
}

// PaymentMethodLT applies the LT predicate on the "payment_method" field.
func PaymentMethodLT(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldLT(FieldPaymentMethod, v))
}

// PaymentMethodLTE applies the LTE predicate on the "payment_method" field.
func PaymentMethodLTE(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldLTE(FieldPaymentMethod, v))
}

// PaymentMethodContains applies the Contains predicate on the "payment_method" field.
func PaymentMethodContains(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldContains(FieldPaymentMethod, v))
}

// PaymentMethodHasPrefix applies the HasPrefix predicate on the "payment_method" field.
func PaymentMethodHasPrefix(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldHasPrefix(FieldPaymentMethod, v))
}

// PaymentMethodHasSuffix applies the HasSuffix predicate on the "payment_method" field.
func PaymentMethodHasSuffix(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldHasSuffix(FieldPaymentMethod, v))
}

// PaymentMethodEqualFold applies the EqualFold predicate on the "payment_method" field.
func PaymentMethodEqualFold(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEqualFold(FieldPaymentMethod, v))
}

// PaymentMethodContainsFold applies the ContainsFold predicate on the "payment_method" field.
func PaymentMethodContainsFold(v string) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldContainsFold(FieldPaymentMethod, v))
}

// TotalPriceEQ applies the EQ predicate on the "total_price" field.
func TotalPriceEQ(v float64) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldTotalPrice, v))
}

// TotalPriceNEQ applies the NEQ predicate on the "total_price" field.
func TotalPriceNEQ(v float64) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNEQ(FieldTotalPrice, v))
}

// TotalPriceIn applies the In predicate on the "total_price" field.
func TotalPriceIn(vs ...float64) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldIn(FieldTotalPrice, vs...))
}

// TotalPriceNotIn applies the NotIn predicate on the "total_price" field.
func TotalPriceNotIn(vs ...float64) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNotIn(FieldTotalPrice, vs...))
}

// TotalPriceGT applies the GT predicate on the "total_price" field.
func TotalPriceGT(v float64) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldGT(FieldTotalPrice, v))
}

// TotalPriceGTE applies the GTE predicate on the "total_price" field.
func TotalPriceGTE(v float64) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldGTE(FieldTotalPrice, v))
}

// TotalPriceLT applies the LT predicate on the "total_price" field.
func TotalPriceLT(v float64) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldLT(FieldTotalPrice, v))
}

// TotalPriceLTE applies the LTE predicate on the "total_price" field.
func TotalPriceLTE(v float64) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldLTE(FieldTotalPrice, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNotIn(FieldUserID, vs...))
}

// ShippingAddressIDEQ applies the EQ predicate on the "shipping_address_id" field.
func ShippingAddressIDEQ(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldShippingAddressID, v))
}

// ShippingAddressIDNEQ applies the NEQ predicate on the "shipping_address_id" field.
func ShippingAddressIDNEQ(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNEQ(FieldShippingAddressID, v))
}

// ShippingAddressIDIn applies the In predicate on the "shipping_address_id" field.
func ShippingAddressIDIn(vs ...int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldIn(FieldShippingAddressID, vs...))
}

// ShippingAddressIDNotIn applies the NotIn predicate on the "shipping_address_id" field.
func ShippingAddressIDNotIn(vs ...int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNotIn(FieldShippingAddressID, vs...))
}

// ShippingMethodIDEQ applies the EQ predicate on the "shipping_method_id" field.
func ShippingMethodIDEQ(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldShippingMethodID, v))
}

// ShippingMethodIDNEQ applies the NEQ predicate on the "shipping_method_id" field.
func ShippingMethodIDNEQ(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNEQ(FieldShippingMethodID, v))
}

// ShippingMethodIDIn applies the In predicate on the "shipping_method_id" field.
func ShippingMethodIDIn(vs ...int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldIn(FieldShippingMethodID, vs...))
}

// ShippingMethodIDNotIn applies the NotIn predicate on the "shipping_method_id" field.
func ShippingMethodIDNotIn(vs ...int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNotIn(FieldShippingMethodID, vs...))
}

// OrderStatusIDEQ applies the EQ predicate on the "order_status_id" field.
func OrderStatusIDEQ(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldEQ(FieldOrderStatusID, v))
}

// OrderStatusIDNEQ applies the NEQ predicate on the "order_status_id" field.
func OrderStatusIDNEQ(v int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNEQ(FieldOrderStatusID, v))
}

// OrderStatusIDIn applies the In predicate on the "order_status_id" field.
func OrderStatusIDIn(vs ...int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldIn(FieldOrderStatusID, vs...))
}

// OrderStatusIDNotIn applies the NotIn predicate on the "order_status_id" field.
func OrderStatusIDNotIn(vs ...int) predicate.ShopOrder {
	return predicate.ShopOrder(sql.FieldNotIn(FieldOrderStatusID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShippingMethod applies the HasEdge predicate on the "shipping_method" edge.
func HasShippingMethod() predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShippingMethodTable, ShippingMethodColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShippingMethodWith applies the HasEdge predicate on the "shipping_method" edge with a given conditions (other predicates).
func HasShippingMethodWith(preds ...predicate.ShippingMethod) predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		step := newShippingMethodStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderStatus applies the HasEdge predicate on the "order_status" edge.
func HasOrderStatus() predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderStatusTable, OrderStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderStatusWith applies the HasEdge predicate on the "order_status" edge with a given conditions (other predicates).
func HasOrderStatusWith(preds ...predicate.OrderStatus) predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		step := newOrderStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShippingAddress applies the HasEdge predicate on the "shipping_address" edge.
func HasShippingAddress() predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ShippingAddressTable, ShippingAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShippingAddressWith applies the HasEdge predicate on the "shipping_address" edge with a given conditions (other predicates).
func HasShippingAddressWith(preds ...predicate.ShippingAddress) predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		step := newShippingAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShopOrder) predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShopOrder) predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShopOrder) predicate.ShopOrder {
	return predicate.ShopOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
