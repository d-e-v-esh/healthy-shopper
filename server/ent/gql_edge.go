// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Address) UserAddress(ctx context.Context) (result []*UserAddress, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedUserAddress(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.UserAddressOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryUserAddress().All(ctx)
	}
	return result, err
}

func (pr *Product) ProductItem(ctx context.Context) (result []*ProductItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedProductItem(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.ProductItemOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryProductItem().All(ctx)
	}
	return result, err
}

func (pi *ProductItem) Product(ctx context.Context) (*Product, error) {
	result, err := pi.Edges.ProductOrErr()
	if IsNotLoaded(err) {
		result, err = pi.QueryProduct().Only(ctx)
	}
	return result, err
}

func (sc *ShoppingCart) User(ctx context.Context) (*User, error) {
	result, err := sc.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = sc.QueryUser().Only(ctx)
	}
	return result, err
}

func (sc *ShoppingCart) ShoppingCartItem(ctx context.Context) (*ShoppingCartItem, error) {
	result, err := sc.Edges.ShoppingCartItemOrErr()
	if IsNotLoaded(err) {
		result, err = sc.QueryShoppingCartItem().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sci *ShoppingCartItem) ShoppingCart(ctx context.Context) (*ShoppingCart, error) {
	result, err := sci.Edges.ShoppingCartOrErr()
	if IsNotLoaded(err) {
		result, err = sci.QueryShoppingCart().Only(ctx)
	}
	return result, err
}

func (u *User) UserAddress(ctx context.Context) (result []*UserAddress, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedUserAddress(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.UserAddressOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryUserAddress().All(ctx)
	}
	return result, err
}

func (u *User) UserReview(ctx context.Context) (result []*UserReview, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedUserReview(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.UserReviewOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryUserReview().All(ctx)
	}
	return result, err
}

func (u *User) ShoppingCart(ctx context.Context) (result []*ShoppingCart, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedShoppingCart(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ShoppingCartOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryShoppingCart().All(ctx)
	}
	return result, err
}

func (ua *UserAddress) User(ctx context.Context) (*User, error) {
	result, err := ua.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ua.QueryUser().Only(ctx)
	}
	return result, err
}

func (ua *UserAddress) Address(ctx context.Context) (*Address, error) {
	result, err := ua.Edges.AddressOrErr()
	if IsNotLoaded(err) {
		result, err = ua.QueryAddress().Only(ctx)
	}
	return result, err
}

func (ur *UserReview) User(ctx context.Context) (*User, error) {
	result, err := ur.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ur.QueryUser().Only(ctx)
	}
	return result, err
}
