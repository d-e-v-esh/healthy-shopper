// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Address) UserAddress(ctx context.Context) (result []*UserAddress, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedUserAddress(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.UserAddressOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryUserAddress().All(ctx)
	}
	return result, err
}

func (u *User) UserAddress(ctx context.Context) (result []*UserAddress, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedUserAddress(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.UserAddressOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryUserAddress().All(ctx)
	}
	return result, err
}

func (ua *UserAddress) User(ctx context.Context) (*User, error) {
	result, err := ua.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ua.QueryUser().Only(ctx)
	}
	return result, err
}

func (ua *UserAddress) Address(ctx context.Context) (*Address, error) {
	result, err := ua.Edges.AddressOrErr()
	if IsNotLoaded(err) {
		result, err = ua.QueryAddress().Only(ctx)
	}
	return result, err
}
