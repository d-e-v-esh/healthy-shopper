// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/shippingaddress"
	"healthyshopper/ent/shippingmethod"
	"healthyshopper/ent/shoporder"
	"healthyshopper/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShopOrderCreate is the builder for creating a ShopOrder entity.
type ShopOrderCreate struct {
	config
	mutation *ShopOrderMutation
	hooks    []Hook
}

// SetOrderDateAndTime sets the "order_date_and_time" field.
func (soc *ShopOrderCreate) SetOrderDateAndTime(t time.Time) *ShopOrderCreate {
	soc.mutation.SetOrderDateAndTime(t)
	return soc
}

// SetNillableOrderDateAndTime sets the "order_date_and_time" field if the given value is not nil.
func (soc *ShopOrderCreate) SetNillableOrderDateAndTime(t *time.Time) *ShopOrderCreate {
	if t != nil {
		soc.SetOrderDateAndTime(*t)
	}
	return soc
}

// SetPaymentMethod sets the "payment_method" field.
func (soc *ShopOrderCreate) SetPaymentMethod(s string) *ShopOrderCreate {
	soc.mutation.SetPaymentMethod(s)
	return soc
}

// SetTotalPrice sets the "total_price" field.
func (soc *ShopOrderCreate) SetTotalPrice(f float64) *ShopOrderCreate {
	soc.mutation.SetTotalPrice(f)
	return soc
}

// SetUserID sets the "user_id" field.
func (soc *ShopOrderCreate) SetUserID(i int) *ShopOrderCreate {
	soc.mutation.SetUserID(i)
	return soc
}

// SetShippingAddressID sets the "shipping_address_id" field.
func (soc *ShopOrderCreate) SetShippingAddressID(i int) *ShopOrderCreate {
	soc.mutation.SetShippingAddressID(i)
	return soc
}

// SetShippingMethodID sets the "shipping_method_id" field.
func (soc *ShopOrderCreate) SetShippingMethodID(i int) *ShopOrderCreate {
	soc.mutation.SetShippingMethodID(i)
	return soc
}

// SetOrderStatusID sets the "order_status_id" field.
func (soc *ShopOrderCreate) SetOrderStatusID(i int) *ShopOrderCreate {
	soc.mutation.SetOrderStatusID(i)
	return soc
}

// SetUser sets the "user" edge to the User entity.
func (soc *ShopOrderCreate) SetUser(u *User) *ShopOrderCreate {
	return soc.SetUserID(u.ID)
}

// SetShippingMethod sets the "shipping_method" edge to the ShippingMethod entity.
func (soc *ShopOrderCreate) SetShippingMethod(s *ShippingMethod) *ShopOrderCreate {
	return soc.SetShippingMethodID(s.ID)
}

// SetShippingAddress sets the "shipping_address" edge to the ShippingAddress entity.
func (soc *ShopOrderCreate) SetShippingAddress(s *ShippingAddress) *ShopOrderCreate {
	return soc.SetShippingAddressID(s.ID)
}

// Mutation returns the ShopOrderMutation object of the builder.
func (soc *ShopOrderCreate) Mutation() *ShopOrderMutation {
	return soc.mutation
}

// Save creates the ShopOrder in the database.
func (soc *ShopOrderCreate) Save(ctx context.Context) (*ShopOrder, error) {
	soc.defaults()
	return withHooks(ctx, soc.sqlSave, soc.mutation, soc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (soc *ShopOrderCreate) SaveX(ctx context.Context) *ShopOrder {
	v, err := soc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (soc *ShopOrderCreate) Exec(ctx context.Context) error {
	_, err := soc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (soc *ShopOrderCreate) ExecX(ctx context.Context) {
	if err := soc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (soc *ShopOrderCreate) defaults() {
	if _, ok := soc.mutation.OrderDateAndTime(); !ok {
		v := shoporder.DefaultOrderDateAndTime()
		soc.mutation.SetOrderDateAndTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (soc *ShopOrderCreate) check() error {
	if _, ok := soc.mutation.OrderDateAndTime(); !ok {
		return &ValidationError{Name: "order_date_and_time", err: errors.New(`ent: missing required field "ShopOrder.order_date_and_time"`)}
	}
	if _, ok := soc.mutation.PaymentMethod(); !ok {
		return &ValidationError{Name: "payment_method", err: errors.New(`ent: missing required field "ShopOrder.payment_method"`)}
	}
	if v, ok := soc.mutation.PaymentMethod(); ok {
		if err := shoporder.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`ent: validator failed for field "ShopOrder.payment_method": %w`, err)}
		}
	}
	if _, ok := soc.mutation.TotalPrice(); !ok {
		return &ValidationError{Name: "total_price", err: errors.New(`ent: missing required field "ShopOrder.total_price"`)}
	}
	if v, ok := soc.mutation.TotalPrice(); ok {
		if err := shoporder.TotalPriceValidator(v); err != nil {
			return &ValidationError{Name: "total_price", err: fmt.Errorf(`ent: validator failed for field "ShopOrder.total_price": %w`, err)}
		}
	}
	if _, ok := soc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ShopOrder.user_id"`)}
	}
	if _, ok := soc.mutation.ShippingAddressID(); !ok {
		return &ValidationError{Name: "shipping_address_id", err: errors.New(`ent: missing required field "ShopOrder.shipping_address_id"`)}
	}
	if _, ok := soc.mutation.ShippingMethodID(); !ok {
		return &ValidationError{Name: "shipping_method_id", err: errors.New(`ent: missing required field "ShopOrder.shipping_method_id"`)}
	}
	if _, ok := soc.mutation.OrderStatusID(); !ok {
		return &ValidationError{Name: "order_status_id", err: errors.New(`ent: missing required field "ShopOrder.order_status_id"`)}
	}
	if _, ok := soc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ShopOrder.user"`)}
	}
	if _, ok := soc.mutation.ShippingMethodID(); !ok {
		return &ValidationError{Name: "shipping_method", err: errors.New(`ent: missing required edge "ShopOrder.shipping_method"`)}
	}
	if _, ok := soc.mutation.ShippingAddressID(); !ok {
		return &ValidationError{Name: "shipping_address", err: errors.New(`ent: missing required edge "ShopOrder.shipping_address"`)}
	}
	return nil
}

func (soc *ShopOrderCreate) sqlSave(ctx context.Context) (*ShopOrder, error) {
	if err := soc.check(); err != nil {
		return nil, err
	}
	_node, _spec := soc.createSpec()
	if err := sqlgraph.CreateNode(ctx, soc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	soc.mutation.id = &_node.ID
	soc.mutation.done = true
	return _node, nil
}

func (soc *ShopOrderCreate) createSpec() (*ShopOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &ShopOrder{config: soc.config}
		_spec = sqlgraph.NewCreateSpec(shoporder.Table, sqlgraph.NewFieldSpec(shoporder.FieldID, field.TypeInt))
	)
	if value, ok := soc.mutation.OrderDateAndTime(); ok {
		_spec.SetField(shoporder.FieldOrderDateAndTime, field.TypeTime, value)
		_node.OrderDateAndTime = value
	}
	if value, ok := soc.mutation.PaymentMethod(); ok {
		_spec.SetField(shoporder.FieldPaymentMethod, field.TypeString, value)
		_node.PaymentMethod = value
	}
	if value, ok := soc.mutation.TotalPrice(); ok {
		_spec.SetField(shoporder.FieldTotalPrice, field.TypeFloat64, value)
		_node.TotalPrice = value
	}
	if value, ok := soc.mutation.OrderStatusID(); ok {
		_spec.SetField(shoporder.FieldOrderStatusID, field.TypeInt, value)
		_node.OrderStatusID = value
	}
	if nodes := soc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoporder.UserTable,
			Columns: []string{shoporder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := soc.mutation.ShippingMethodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoporder.ShippingMethodTable,
			Columns: []string{shoporder.ShippingMethodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shippingmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShippingMethodID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := soc.mutation.ShippingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shoporder.ShippingAddressTable,
			Columns: []string{shoporder.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shippingaddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShippingAddressID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShopOrderCreateBulk is the builder for creating many ShopOrder entities in bulk.
type ShopOrderCreateBulk struct {
	config
	builders []*ShopOrderCreate
}

// Save creates the ShopOrder entities in the database.
func (socb *ShopOrderCreateBulk) Save(ctx context.Context) ([]*ShopOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(socb.builders))
	nodes := make([]*ShopOrder, len(socb.builders))
	mutators := make([]Mutator, len(socb.builders))
	for i := range socb.builders {
		func(i int, root context.Context) {
			builder := socb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShopOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, socb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, socb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, socb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (socb *ShopOrderCreateBulk) SaveX(ctx context.Context) []*ShopOrder {
	v, err := socb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (socb *ShopOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := socb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (socb *ShopOrderCreateBulk) ExecX(ctx context.Context) {
	if err := socb.Exec(ctx); err != nil {
		panic(err)
	}
}
