// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/nutritionalinformation"
	"healthyshopper/ent/nutritionalinformationtable"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NutritionalInformationTableCreate is the builder for creating a NutritionalInformationTable entity.
type NutritionalInformationTableCreate struct {
	config
	mutation *NutritionalInformationTableMutation
	hooks    []Hook
}

// SetParameter sets the "parameter" field.
func (nitc *NutritionalInformationTableCreate) SetParameter(s string) *NutritionalInformationTableCreate {
	nitc.mutation.SetParameter(s)
	return nitc
}

// SetValue sets the "value" field.
func (nitc *NutritionalInformationTableCreate) SetValue(f float64) *NutritionalInformationTableCreate {
	nitc.mutation.SetValue(f)
	return nitc
}

// SetMeasurementUnit sets the "measurement_unit" field.
func (nitc *NutritionalInformationTableCreate) SetMeasurementUnit(s string) *NutritionalInformationTableCreate {
	nitc.mutation.SetMeasurementUnit(s)
	return nitc
}

// AddNutritionalInformationIDs adds the "nutritional_information" edge to the NutritionalInformation entity by IDs.
func (nitc *NutritionalInformationTableCreate) AddNutritionalInformationIDs(ids ...int) *NutritionalInformationTableCreate {
	nitc.mutation.AddNutritionalInformationIDs(ids...)
	return nitc
}

// AddNutritionalInformation adds the "nutritional_information" edges to the NutritionalInformation entity.
func (nitc *NutritionalInformationTableCreate) AddNutritionalInformation(n ...*NutritionalInformation) *NutritionalInformationTableCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nitc.AddNutritionalInformationIDs(ids...)
}

// Mutation returns the NutritionalInformationTableMutation object of the builder.
func (nitc *NutritionalInformationTableCreate) Mutation() *NutritionalInformationTableMutation {
	return nitc.mutation
}

// Save creates the NutritionalInformationTable in the database.
func (nitc *NutritionalInformationTableCreate) Save(ctx context.Context) (*NutritionalInformationTable, error) {
	return withHooks(ctx, nitc.sqlSave, nitc.mutation, nitc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nitc *NutritionalInformationTableCreate) SaveX(ctx context.Context) *NutritionalInformationTable {
	v, err := nitc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nitc *NutritionalInformationTableCreate) Exec(ctx context.Context) error {
	_, err := nitc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nitc *NutritionalInformationTableCreate) ExecX(ctx context.Context) {
	if err := nitc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nitc *NutritionalInformationTableCreate) check() error {
	if _, ok := nitc.mutation.Parameter(); !ok {
		return &ValidationError{Name: "parameter", err: errors.New(`ent: missing required field "NutritionalInformationTable.parameter"`)}
	}
	if v, ok := nitc.mutation.Parameter(); ok {
		if err := nutritionalinformationtable.ParameterValidator(v); err != nil {
			return &ValidationError{Name: "parameter", err: fmt.Errorf(`ent: validator failed for field "NutritionalInformationTable.parameter": %w`, err)}
		}
	}
	if _, ok := nitc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "NutritionalInformationTable.value"`)}
	}
	if v, ok := nitc.mutation.Value(); ok {
		if err := nutritionalinformationtable.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "NutritionalInformationTable.value": %w`, err)}
		}
	}
	if _, ok := nitc.mutation.MeasurementUnit(); !ok {
		return &ValidationError{Name: "measurement_unit", err: errors.New(`ent: missing required field "NutritionalInformationTable.measurement_unit"`)}
	}
	if v, ok := nitc.mutation.MeasurementUnit(); ok {
		if err := nutritionalinformationtable.MeasurementUnitValidator(v); err != nil {
			return &ValidationError{Name: "measurement_unit", err: fmt.Errorf(`ent: validator failed for field "NutritionalInformationTable.measurement_unit": %w`, err)}
		}
	}
	return nil
}

func (nitc *NutritionalInformationTableCreate) sqlSave(ctx context.Context) (*NutritionalInformationTable, error) {
	if err := nitc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nitc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nitc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nitc.mutation.id = &_node.ID
	nitc.mutation.done = true
	return _node, nil
}

func (nitc *NutritionalInformationTableCreate) createSpec() (*NutritionalInformationTable, *sqlgraph.CreateSpec) {
	var (
		_node = &NutritionalInformationTable{config: nitc.config}
		_spec = sqlgraph.NewCreateSpec(nutritionalinformationtable.Table, sqlgraph.NewFieldSpec(nutritionalinformationtable.FieldID, field.TypeInt))
	)
	if value, ok := nitc.mutation.Parameter(); ok {
		_spec.SetField(nutritionalinformationtable.FieldParameter, field.TypeString, value)
		_node.Parameter = value
	}
	if value, ok := nitc.mutation.Value(); ok {
		_spec.SetField(nutritionalinformationtable.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := nitc.mutation.MeasurementUnit(); ok {
		_spec.SetField(nutritionalinformationtable.FieldMeasurementUnit, field.TypeString, value)
		_node.MeasurementUnit = value
	}
	if nodes := nitc.mutation.NutritionalInformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   nutritionalinformationtable.NutritionalInformationTable,
			Columns: []string{nutritionalinformationtable.NutritionalInformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutritionalinformation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NutritionalInformationTableCreateBulk is the builder for creating many NutritionalInformationTable entities in bulk.
type NutritionalInformationTableCreateBulk struct {
	config
	builders []*NutritionalInformationTableCreate
}

// Save creates the NutritionalInformationTable entities in the database.
func (nitcb *NutritionalInformationTableCreateBulk) Save(ctx context.Context) ([]*NutritionalInformationTable, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nitcb.builders))
	nodes := make([]*NutritionalInformationTable, len(nitcb.builders))
	mutators := make([]Mutator, len(nitcb.builders))
	for i := range nitcb.builders {
		func(i int, root context.Context) {
			builder := nitcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NutritionalInformationTableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nitcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nitcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nitcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nitcb *NutritionalInformationTableCreateBulk) SaveX(ctx context.Context) []*NutritionalInformationTable {
	v, err := nitcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nitcb *NutritionalInformationTableCreateBulk) Exec(ctx context.Context) error {
	_, err := nitcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nitcb *NutritionalInformationTableCreateBulk) ExecX(ctx context.Context) {
	if err := nitcb.Exec(ctx); err != nil {
		panic(err)
	}
}
