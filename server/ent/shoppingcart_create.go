// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/shoppingcart"
	"healthyshopper/ent/shoppingcartitem"
	"healthyshopper/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShoppingCartCreate is the builder for creating a ShoppingCart entity.
type ShoppingCartCreate struct {
	config
	mutation *ShoppingCartMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (scc *ShoppingCartCreate) SetUserID(i int) *ShoppingCartCreate {
	scc.mutation.SetUserID(i)
	return scc
}

// SetUser sets the "user" edge to the User entity.
func (scc *ShoppingCartCreate) SetUser(u *User) *ShoppingCartCreate {
	return scc.SetUserID(u.ID)
}

// SetShoppingCartItemID sets the "shopping_cart_item" edge to the ShoppingCartItem entity by ID.
func (scc *ShoppingCartCreate) SetShoppingCartItemID(id int) *ShoppingCartCreate {
	scc.mutation.SetShoppingCartItemID(id)
	return scc
}

// SetNillableShoppingCartItemID sets the "shopping_cart_item" edge to the ShoppingCartItem entity by ID if the given value is not nil.
func (scc *ShoppingCartCreate) SetNillableShoppingCartItemID(id *int) *ShoppingCartCreate {
	if id != nil {
		scc = scc.SetShoppingCartItemID(*id)
	}
	return scc
}

// SetShoppingCartItem sets the "shopping_cart_item" edge to the ShoppingCartItem entity.
func (scc *ShoppingCartCreate) SetShoppingCartItem(s *ShoppingCartItem) *ShoppingCartCreate {
	return scc.SetShoppingCartItemID(s.ID)
}

// Mutation returns the ShoppingCartMutation object of the builder.
func (scc *ShoppingCartCreate) Mutation() *ShoppingCartMutation {
	return scc.mutation
}

// Save creates the ShoppingCart in the database.
func (scc *ShoppingCartCreate) Save(ctx context.Context) (*ShoppingCart, error) {
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *ShoppingCartCreate) SaveX(ctx context.Context) *ShoppingCart {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *ShoppingCartCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *ShoppingCartCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *ShoppingCartCreate) check() error {
	if _, ok := scc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ShoppingCart.user_id"`)}
	}
	if _, ok := scc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ShoppingCart.user"`)}
	}
	return nil
}

func (scc *ShoppingCartCreate) sqlSave(ctx context.Context) (*ShoppingCart, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *ShoppingCartCreate) createSpec() (*ShoppingCart, *sqlgraph.CreateSpec) {
	var (
		_node = &ShoppingCart{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(shoppingcart.Table, sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt))
	)
	if nodes := scc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcart.UserTable,
			Columns: []string{shoppingcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.ShoppingCartItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shoppingcart.ShoppingCartItemTable,
			Columns: []string{shoppingcart.ShoppingCartItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcartitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShoppingCartCreateBulk is the builder for creating many ShoppingCart entities in bulk.
type ShoppingCartCreateBulk struct {
	config
	builders []*ShoppingCartCreate
}

// Save creates the ShoppingCart entities in the database.
func (sccb *ShoppingCartCreateBulk) Save(ctx context.Context) ([]*ShoppingCart, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*ShoppingCart, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShoppingCartMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *ShoppingCartCreateBulk) SaveX(ctx context.Context) []*ShoppingCart {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *ShoppingCartCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *ShoppingCartCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
