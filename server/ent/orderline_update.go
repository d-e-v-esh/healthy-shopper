// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/orderline"
	"healthyshopper/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderLineUpdate is the builder for updating OrderLine entities.
type OrderLineUpdate struct {
	config
	hooks    []Hook
	mutation *OrderLineMutation
}

// Where appends a list predicates to the OrderLineUpdate builder.
func (olu *OrderLineUpdate) Where(ps ...predicate.OrderLine) *OrderLineUpdate {
	olu.mutation.Where(ps...)
	return olu
}

// SetProductItemID sets the "product_item_id" field.
func (olu *OrderLineUpdate) SetProductItemID(i int) *OrderLineUpdate {
	olu.mutation.ResetProductItemID()
	olu.mutation.SetProductItemID(i)
	return olu
}

// AddProductItemID adds i to the "product_item_id" field.
func (olu *OrderLineUpdate) AddProductItemID(i int) *OrderLineUpdate {
	olu.mutation.AddProductItemID(i)
	return olu
}

// SetShopOrderID sets the "shop_order_id" field.
func (olu *OrderLineUpdate) SetShopOrderID(i int) *OrderLineUpdate {
	olu.mutation.ResetShopOrderID()
	olu.mutation.SetShopOrderID(i)
	return olu
}

// AddShopOrderID adds i to the "shop_order_id" field.
func (olu *OrderLineUpdate) AddShopOrderID(i int) *OrderLineUpdate {
	olu.mutation.AddShopOrderID(i)
	return olu
}

// SetQuantity sets the "quantity" field.
func (olu *OrderLineUpdate) SetQuantity(i int) *OrderLineUpdate {
	olu.mutation.ResetQuantity()
	olu.mutation.SetQuantity(i)
	return olu
}

// AddQuantity adds i to the "quantity" field.
func (olu *OrderLineUpdate) AddQuantity(i int) *OrderLineUpdate {
	olu.mutation.AddQuantity(i)
	return olu
}

// SetPrice sets the "price" field.
func (olu *OrderLineUpdate) SetPrice(f float64) *OrderLineUpdate {
	olu.mutation.ResetPrice()
	olu.mutation.SetPrice(f)
	return olu
}

// AddPrice adds f to the "price" field.
func (olu *OrderLineUpdate) AddPrice(f float64) *OrderLineUpdate {
	olu.mutation.AddPrice(f)
	return olu
}

// Mutation returns the OrderLineMutation object of the builder.
func (olu *OrderLineUpdate) Mutation() *OrderLineMutation {
	return olu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (olu *OrderLineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, olu.sqlSave, olu.mutation, olu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (olu *OrderLineUpdate) SaveX(ctx context.Context) int {
	affected, err := olu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (olu *OrderLineUpdate) Exec(ctx context.Context) error {
	_, err := olu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olu *OrderLineUpdate) ExecX(ctx context.Context) {
	if err := olu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (olu *OrderLineUpdate) check() error {
	if v, ok := olu.mutation.Quantity(); ok {
		if err := orderline.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "OrderLine.quantity": %w`, err)}
		}
	}
	if v, ok := olu.mutation.Price(); ok {
		if err := orderline.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "OrderLine.price": %w`, err)}
		}
	}
	return nil
}

func (olu *OrderLineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := olu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderline.Table, orderline.Columns, sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeInt))
	if ps := olu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := olu.mutation.ProductItemID(); ok {
		_spec.SetField(orderline.FieldProductItemID, field.TypeInt, value)
	}
	if value, ok := olu.mutation.AddedProductItemID(); ok {
		_spec.AddField(orderline.FieldProductItemID, field.TypeInt, value)
	}
	if value, ok := olu.mutation.ShopOrderID(); ok {
		_spec.SetField(orderline.FieldShopOrderID, field.TypeInt, value)
	}
	if value, ok := olu.mutation.AddedShopOrderID(); ok {
		_spec.AddField(orderline.FieldShopOrderID, field.TypeInt, value)
	}
	if value, ok := olu.mutation.Quantity(); ok {
		_spec.SetField(orderline.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := olu.mutation.AddedQuantity(); ok {
		_spec.AddField(orderline.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := olu.mutation.Price(); ok {
		_spec.SetField(orderline.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := olu.mutation.AddedPrice(); ok {
		_spec.AddField(orderline.FieldPrice, field.TypeFloat64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, olu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	olu.mutation.done = true
	return n, nil
}

// OrderLineUpdateOne is the builder for updating a single OrderLine entity.
type OrderLineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderLineMutation
}

// SetProductItemID sets the "product_item_id" field.
func (oluo *OrderLineUpdateOne) SetProductItemID(i int) *OrderLineUpdateOne {
	oluo.mutation.ResetProductItemID()
	oluo.mutation.SetProductItemID(i)
	return oluo
}

// AddProductItemID adds i to the "product_item_id" field.
func (oluo *OrderLineUpdateOne) AddProductItemID(i int) *OrderLineUpdateOne {
	oluo.mutation.AddProductItemID(i)
	return oluo
}

// SetShopOrderID sets the "shop_order_id" field.
func (oluo *OrderLineUpdateOne) SetShopOrderID(i int) *OrderLineUpdateOne {
	oluo.mutation.ResetShopOrderID()
	oluo.mutation.SetShopOrderID(i)
	return oluo
}

// AddShopOrderID adds i to the "shop_order_id" field.
func (oluo *OrderLineUpdateOne) AddShopOrderID(i int) *OrderLineUpdateOne {
	oluo.mutation.AddShopOrderID(i)
	return oluo
}

// SetQuantity sets the "quantity" field.
func (oluo *OrderLineUpdateOne) SetQuantity(i int) *OrderLineUpdateOne {
	oluo.mutation.ResetQuantity()
	oluo.mutation.SetQuantity(i)
	return oluo
}

// AddQuantity adds i to the "quantity" field.
func (oluo *OrderLineUpdateOne) AddQuantity(i int) *OrderLineUpdateOne {
	oluo.mutation.AddQuantity(i)
	return oluo
}

// SetPrice sets the "price" field.
func (oluo *OrderLineUpdateOne) SetPrice(f float64) *OrderLineUpdateOne {
	oluo.mutation.ResetPrice()
	oluo.mutation.SetPrice(f)
	return oluo
}

// AddPrice adds f to the "price" field.
func (oluo *OrderLineUpdateOne) AddPrice(f float64) *OrderLineUpdateOne {
	oluo.mutation.AddPrice(f)
	return oluo
}

// Mutation returns the OrderLineMutation object of the builder.
func (oluo *OrderLineUpdateOne) Mutation() *OrderLineMutation {
	return oluo.mutation
}

// Where appends a list predicates to the OrderLineUpdate builder.
func (oluo *OrderLineUpdateOne) Where(ps ...predicate.OrderLine) *OrderLineUpdateOne {
	oluo.mutation.Where(ps...)
	return oluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oluo *OrderLineUpdateOne) Select(field string, fields ...string) *OrderLineUpdateOne {
	oluo.fields = append([]string{field}, fields...)
	return oluo
}

// Save executes the query and returns the updated OrderLine entity.
func (oluo *OrderLineUpdateOne) Save(ctx context.Context) (*OrderLine, error) {
	return withHooks(ctx, oluo.sqlSave, oluo.mutation, oluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oluo *OrderLineUpdateOne) SaveX(ctx context.Context) *OrderLine {
	node, err := oluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oluo *OrderLineUpdateOne) Exec(ctx context.Context) error {
	_, err := oluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oluo *OrderLineUpdateOne) ExecX(ctx context.Context) {
	if err := oluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oluo *OrderLineUpdateOne) check() error {
	if v, ok := oluo.mutation.Quantity(); ok {
		if err := orderline.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "OrderLine.quantity": %w`, err)}
		}
	}
	if v, ok := oluo.mutation.Price(); ok {
		if err := orderline.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "OrderLine.price": %w`, err)}
		}
	}
	return nil
}

func (oluo *OrderLineUpdateOne) sqlSave(ctx context.Context) (_node *OrderLine, err error) {
	if err := oluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderline.Table, orderline.Columns, sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeInt))
	id, ok := oluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderLine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderline.FieldID)
		for _, f := range fields {
			if !orderline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oluo.mutation.ProductItemID(); ok {
		_spec.SetField(orderline.FieldProductItemID, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.AddedProductItemID(); ok {
		_spec.AddField(orderline.FieldProductItemID, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.ShopOrderID(); ok {
		_spec.SetField(orderline.FieldShopOrderID, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.AddedShopOrderID(); ok {
		_spec.AddField(orderline.FieldShopOrderID, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.Quantity(); ok {
		_spec.SetField(orderline.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.AddedQuantity(); ok {
		_spec.AddField(orderline.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.Price(); ok {
		_spec.SetField(orderline.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := oluo.mutation.AddedPrice(); ok {
		_spec.AddField(orderline.FieldPrice, field.TypeFloat64, value)
	}
	_node = &OrderLine{config: oluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oluo.mutation.done = true
	return _node, nil
}
