// Code generated by ent, DO NOT EDIT.

package userreview

import (
	"healthyshopper/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserReview {
	return predicate.UserReview(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserReview {
	return predicate.UserReview(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserReview {
	return predicate.UserReview(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserReview {
	return predicate.UserReview(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserReview {
	return predicate.UserReview(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserReview {
	return predicate.UserReview(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserReview {
	return predicate.UserReview(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldUserID, v))
}

// OrderedProductID applies equality check predicate on the "ordered_product_id" field. It's identical to OrderedProductIDEQ.
func OrderedProductID(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldOrderedProductID, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldRating, v))
}

// Review applies equality check predicate on the "review" field. It's identical to ReviewEQ.
func Review(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldReview, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserReview {
	return predicate.UserReview(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserReview {
	return predicate.UserReview(sql.FieldNotIn(FieldUserID, vs...))
}

// OrderedProductIDEQ applies the EQ predicate on the "ordered_product_id" field.
func OrderedProductIDEQ(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldOrderedProductID, v))
}

// OrderedProductIDNEQ applies the NEQ predicate on the "ordered_product_id" field.
func OrderedProductIDNEQ(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldNEQ(FieldOrderedProductID, v))
}

// OrderedProductIDIn applies the In predicate on the "ordered_product_id" field.
func OrderedProductIDIn(vs ...int) predicate.UserReview {
	return predicate.UserReview(sql.FieldIn(FieldOrderedProductID, vs...))
}

// OrderedProductIDNotIn applies the NotIn predicate on the "ordered_product_id" field.
func OrderedProductIDNotIn(vs ...int) predicate.UserReview {
	return predicate.UserReview(sql.FieldNotIn(FieldOrderedProductID, vs...))
}

// OrderedProductIDGT applies the GT predicate on the "ordered_product_id" field.
func OrderedProductIDGT(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldGT(FieldOrderedProductID, v))
}

// OrderedProductIDGTE applies the GTE predicate on the "ordered_product_id" field.
func OrderedProductIDGTE(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldGTE(FieldOrderedProductID, v))
}

// OrderedProductIDLT applies the LT predicate on the "ordered_product_id" field.
func OrderedProductIDLT(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldLT(FieldOrderedProductID, v))
}

// OrderedProductIDLTE applies the LTE predicate on the "ordered_product_id" field.
func OrderedProductIDLTE(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldLTE(FieldOrderedProductID, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...int) predicate.UserReview {
	return predicate.UserReview(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...int) predicate.UserReview {
	return predicate.UserReview(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v int) predicate.UserReview {
	return predicate.UserReview(sql.FieldLTE(FieldRating, v))
}

// ReviewEQ applies the EQ predicate on the "review" field.
func ReviewEQ(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldReview, v))
}

// ReviewNEQ applies the NEQ predicate on the "review" field.
func ReviewNEQ(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldNEQ(FieldReview, v))
}

// ReviewIn applies the In predicate on the "review" field.
func ReviewIn(vs ...string) predicate.UserReview {
	return predicate.UserReview(sql.FieldIn(FieldReview, vs...))
}

// ReviewNotIn applies the NotIn predicate on the "review" field.
func ReviewNotIn(vs ...string) predicate.UserReview {
	return predicate.UserReview(sql.FieldNotIn(FieldReview, vs...))
}

// ReviewGT applies the GT predicate on the "review" field.
func ReviewGT(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldGT(FieldReview, v))
}

// ReviewGTE applies the GTE predicate on the "review" field.
func ReviewGTE(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldGTE(FieldReview, v))
}

// ReviewLT applies the LT predicate on the "review" field.
func ReviewLT(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldLT(FieldReview, v))
}

// ReviewLTE applies the LTE predicate on the "review" field.
func ReviewLTE(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldLTE(FieldReview, v))
}

// ReviewContains applies the Contains predicate on the "review" field.
func ReviewContains(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldContains(FieldReview, v))
}

// ReviewHasPrefix applies the HasPrefix predicate on the "review" field.
func ReviewHasPrefix(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldHasPrefix(FieldReview, v))
}

// ReviewHasSuffix applies the HasSuffix predicate on the "review" field.
func ReviewHasSuffix(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldHasSuffix(FieldReview, v))
}

// ReviewEqualFold applies the EqualFold predicate on the "review" field.
func ReviewEqualFold(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldEqualFold(FieldReview, v))
}

// ReviewContainsFold applies the ContainsFold predicate on the "review" field.
func ReviewContainsFold(v string) predicate.UserReview {
	return predicate.UserReview(sql.FieldContainsFold(FieldReview, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserReview {
	return predicate.UserReview(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserReview {
	return predicate.UserReview(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserReview {
	return predicate.UserReview(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserReview) predicate.UserReview {
	return predicate.UserReview(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserReview) predicate.UserReview {
	return predicate.UserReview(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserReview) predicate.UserReview {
	return predicate.UserReview(func(s *sql.Selector) {
		p(s.Not())
	})
}
