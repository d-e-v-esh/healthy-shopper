// Code generated by ent, DO NOT EDIT.

package userreview

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userreview type in the database.
	Label = "user_review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOrderedProductID holds the string denoting the ordered_product_id field in the database.
	FieldOrderedProductID = "ordered_product_id"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldReview holds the string denoting the review field in the database.
	FieldReview = "review"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeOrderedProduct holds the string denoting the ordered_product edge name in mutations.
	EdgeOrderedProduct = "ordered_product"
	// Table holds the table name of the userreview in the database.
	Table = "user_reviews"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_reviews"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// OrderedProductTable is the table that holds the ordered_product relation/edge.
	OrderedProductTable = "user_reviews"
	// OrderedProductInverseTable is the table name for the OrderLine entity.
	// It exists in this package in order to avoid circular dependency with the "orderline" package.
	OrderedProductInverseTable = "order_lines"
	// OrderedProductColumn is the table column denoting the ordered_product relation/edge.
	OrderedProductColumn = "ordered_product_id"
)

// Columns holds all SQL columns for userreview fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldOrderedProductID,
	FieldRating,
	FieldReview,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RatingValidator is a validator for the "rating" field. It is called by the builders before save.
	RatingValidator func(int) error
	// ReviewValidator is a validator for the "review" field. It is called by the builders before save.
	ReviewValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the UserReview queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOrderedProductID orders the results by the ordered_product_id field.
func ByOrderedProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderedProductID, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByReview orders the results by the review field.
func ByReview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReview, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderedProductField orders the results by ordered_product field.
func ByOrderedProductField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderedProductStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newOrderedProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderedProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrderedProductTable, OrderedProductColumn),
	)
}
