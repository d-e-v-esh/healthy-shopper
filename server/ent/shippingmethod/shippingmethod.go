// Code generated by ent, DO NOT EDIT.

package shippingmethod

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the shippingmethod type in the database.
	Label = "shipping_method"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldShippingMethod holds the string denoting the shipping_method field in the database.
	FieldShippingMethod = "shipping_method"
	// FieldShippingCost holds the string denoting the shipping_cost field in the database.
	FieldShippingCost = "shipping_cost"
	// EdgeShopOrder holds the string denoting the shop_order edge name in mutations.
	EdgeShopOrder = "shop_order"
	// Table holds the table name of the shippingmethod in the database.
	Table = "shipping_methods"
	// ShopOrderTable is the table that holds the shop_order relation/edge.
	ShopOrderTable = "shop_orders"
	// ShopOrderInverseTable is the table name for the ShopOrder entity.
	// It exists in this package in order to avoid circular dependency with the "shoporder" package.
	ShopOrderInverseTable = "shop_orders"
	// ShopOrderColumn is the table column denoting the shop_order relation/edge.
	ShopOrderColumn = "shipping_method_id"
)

// Columns holds all SQL columns for shippingmethod fields.
var Columns = []string{
	FieldID,
	FieldShippingMethod,
	FieldShippingCost,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ShippingMethodValidator is a validator for the "shipping_method" field. It is called by the builders before save.
	ShippingMethodValidator func(string) error
	// ShippingCostValidator is a validator for the "shipping_cost" field. It is called by the builders before save.
	ShippingCostValidator func(float64) error
)

// OrderOption defines the ordering options for the ShippingMethod queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByShippingMethod orders the results by the shipping_method field.
func ByShippingMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingMethod, opts...).ToFunc()
}

// ByShippingCost orders the results by the shipping_cost field.
func ByShippingCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingCost, opts...).ToFunc()
}

// ByShopOrderCount orders the results by shop_order count.
func ByShopOrderCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShopOrderStep(), opts...)
	}
}

// ByShopOrder orders the results by shop_order terms.
func ByShopOrder(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShopOrderStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newShopOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShopOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShopOrderTable, ShopOrderColumn),
	)
}
