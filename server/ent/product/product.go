// Code generated by ent, DO NOT EDIT.

package product

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldProductImage holds the string denoting the product_image field in the database.
	FieldProductImage = "product_image"
	// FieldIngredientsTableID holds the string denoting the ingredients_table_id field in the database.
	FieldIngredientsTableID = "ingredients_table_id"
	// FieldProductCategoryID holds the string denoting the product_category_id field in the database.
	FieldProductCategoryID = "product_category_id"
	// FieldNutritionalInformationID holds the string denoting the nutritional_information_id field in the database.
	FieldNutritionalInformationID = "nutritional_information_id"
	// FieldPromotionID holds the string denoting the promotion_id field in the database.
	FieldPromotionID = "promotion_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProductItem holds the string denoting the product_item edge name in mutations.
	EdgeProductItem = "product_item"
	// EdgePromotion holds the string denoting the promotion edge name in mutations.
	EdgePromotion = "promotion"
	// EdgeIngredientsTable holds the string denoting the ingredients_table edge name in mutations.
	EdgeIngredientsTable = "ingredients_table"
	// EdgeNutritionalInformation holds the string denoting the nutritional_information edge name in mutations.
	EdgeNutritionalInformation = "nutritional_information"
	// Table holds the table name of the product in the database.
	Table = "products"
	// ProductItemTable is the table that holds the product_item relation/edge.
	ProductItemTable = "product_items"
	// ProductItemInverseTable is the table name for the ProductItem entity.
	// It exists in this package in order to avoid circular dependency with the "productitem" package.
	ProductItemInverseTable = "product_items"
	// ProductItemColumn is the table column denoting the product_item relation/edge.
	ProductItemColumn = "product_id"
	// PromotionTable is the table that holds the promotion relation/edge.
	PromotionTable = "products"
	// PromotionInverseTable is the table name for the Promotion entity.
	// It exists in this package in order to avoid circular dependency with the "promotion" package.
	PromotionInverseTable = "promotions"
	// PromotionColumn is the table column denoting the promotion relation/edge.
	PromotionColumn = "promotion_id"
	// IngredientsTableTable is the table that holds the ingredients_table relation/edge.
	IngredientsTableTable = "products"
	// IngredientsTableInverseTable is the table name for the IngredientsTable entity.
	// It exists in this package in order to avoid circular dependency with the "ingredientstable" package.
	IngredientsTableInverseTable = "ingredients_tables"
	// IngredientsTableColumn is the table column denoting the ingredients_table relation/edge.
	IngredientsTableColumn = "ingredients_table_id"
	// NutritionalInformationTable is the table that holds the nutritional_information relation/edge.
	NutritionalInformationTable = "products"
	// NutritionalInformationInverseTable is the table name for the NutritionalInformation entity.
	// It exists in this package in order to avoid circular dependency with the "nutritionalinformation" package.
	NutritionalInformationInverseTable = "nutritional_informations"
	// NutritionalInformationColumn is the table column denoting the nutritional_information relation/edge.
	NutritionalInformationColumn = "nutritional_information_id"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldProductImage,
	FieldIngredientsTableID,
	FieldProductCategoryID,
	FieldNutritionalInformationID,
	FieldPromotionID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// ProductImageValidator is a validator for the "product_image" field. It is called by the builders before save.
	ProductImageValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByProductImage orders the results by the product_image field.
func ByProductImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductImage, opts...).ToFunc()
}

// ByIngredientsTableID orders the results by the ingredients_table_id field.
func ByIngredientsTableID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIngredientsTableID, opts...).ToFunc()
}

// ByProductCategoryID orders the results by the product_category_id field.
func ByProductCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductCategoryID, opts...).ToFunc()
}

// ByNutritionalInformationID orders the results by the nutritional_information_id field.
func ByNutritionalInformationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNutritionalInformationID, opts...).ToFunc()
}

// ByPromotionID orders the results by the promotion_id field.
func ByPromotionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromotionID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProductItemField orders the results by product_item field.
func ByProductItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductItemStep(), sql.OrderByField(field, opts...))
	}
}

// ByPromotionField orders the results by promotion field.
func ByPromotionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPromotionStep(), sql.OrderByField(field, opts...))
	}
}

// ByIngredientsTableField orders the results by ingredients_table field.
func ByIngredientsTableField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIngredientsTableStep(), sql.OrderByField(field, opts...))
	}
}

// ByNutritionalInformationField orders the results by nutritional_information field.
func ByNutritionalInformationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNutritionalInformationStep(), sql.OrderByField(field, opts...))
	}
}
func newProductItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProductItemTable, ProductItemColumn),
	)
}
func newPromotionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PromotionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PromotionTable, PromotionColumn),
	)
}
func newIngredientsTableStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IngredientsTableInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, IngredientsTableTable, IngredientsTableColumn),
	)
}
func newNutritionalInformationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NutritionalInformationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NutritionalInformationTable, NutritionalInformationColumn),
	)
}
