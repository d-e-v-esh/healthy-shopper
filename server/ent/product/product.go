// Code generated by ent, DO NOT EDIT.

package product

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldProductImage holds the string denoting the product_image field in the database.
	FieldProductImage = "product_image"
	// FieldProductCategoryID holds the string denoting the product_category_id field in the database.
	FieldProductCategoryID = "product_category_id"
	// FieldIngredientsListID holds the string denoting the ingredients_list_id field in the database.
	FieldIngredientsListID = "ingredients_list_id"
	// FieldNutritionalInformationID holds the string denoting the nutritional_information_id field in the database.
	FieldNutritionalInformationID = "nutritional_information_id"
	// FieldPromotionID holds the string denoting the promotion_id field in the database.
	FieldPromotionID = "promotion_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the product in the database.
	Table = "products"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldProductImage,
	FieldProductCategoryID,
	FieldIngredientsListID,
	FieldNutritionalInformationID,
	FieldPromotionID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// ProductImageValidator is a validator for the "product_image" field. It is called by the builders before save.
	ProductImageValidator func(string) error
	// ProductCategoryIDValidator is a validator for the "product_category_id" field. It is called by the builders before save.
	ProductCategoryIDValidator func(int) error
	// IngredientsListIDValidator is a validator for the "ingredients_list_id" field. It is called by the builders before save.
	IngredientsListIDValidator func(int) error
	// NutritionalInformationIDValidator is a validator for the "nutritional_information_id" field. It is called by the builders before save.
	NutritionalInformationIDValidator func(int) error
	// PromotionIDValidator is a validator for the "promotion_id" field. It is called by the builders before save.
	PromotionIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByProductImage orders the results by the product_image field.
func ByProductImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductImage, opts...).ToFunc()
}

// ByProductCategoryID orders the results by the product_category_id field.
func ByProductCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductCategoryID, opts...).ToFunc()
}

// ByIngredientsListID orders the results by the ingredients_list_id field.
func ByIngredientsListID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIngredientsListID, opts...).ToFunc()
}

// ByNutritionalInformationID orders the results by the nutritional_information_id field.
func ByNutritionalInformationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNutritionalInformationID, opts...).ToFunc()
}

// ByPromotionID orders the results by the promotion_id field.
func ByPromotionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromotionID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
