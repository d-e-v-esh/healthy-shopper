// Code generated by ent, DO NOT EDIT.

package product

import (
	"healthyshopper/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDescription, v))
}

// ProductImage applies equality check predicate on the "product_image" field. It's identical to ProductImageEQ.
func ProductImage(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductImage, v))
}

// IngredientsTableID applies equality check predicate on the "ingredients_table_id" field. It's identical to IngredientsTableIDEQ.
func IngredientsTableID(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldIngredientsTableID, v))
}

// ProductCategoryID applies equality check predicate on the "product_category_id" field. It's identical to ProductCategoryIDEQ.
func ProductCategoryID(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductCategoryID, v))
}

// NutritionalInformationID applies equality check predicate on the "nutritional_information_id" field. It's identical to NutritionalInformationIDEQ.
func NutritionalInformationID(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldNutritionalInformationID, v))
}

// PromotionID applies equality check predicate on the "promotion_id" field. It's identical to PromotionIDEQ.
func PromotionID(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldPromotionID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldDescription, v))
}

// ProductImageEQ applies the EQ predicate on the "product_image" field.
func ProductImageEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductImage, v))
}

// ProductImageNEQ applies the NEQ predicate on the "product_image" field.
func ProductImageNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldProductImage, v))
}

// ProductImageIn applies the In predicate on the "product_image" field.
func ProductImageIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldProductImage, vs...))
}

// ProductImageNotIn applies the NotIn predicate on the "product_image" field.
func ProductImageNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldProductImage, vs...))
}

// ProductImageGT applies the GT predicate on the "product_image" field.
func ProductImageGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldProductImage, v))
}

// ProductImageGTE applies the GTE predicate on the "product_image" field.
func ProductImageGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldProductImage, v))
}

// ProductImageLT applies the LT predicate on the "product_image" field.
func ProductImageLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldProductImage, v))
}

// ProductImageLTE applies the LTE predicate on the "product_image" field.
func ProductImageLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldProductImage, v))
}

// ProductImageContains applies the Contains predicate on the "product_image" field.
func ProductImageContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldProductImage, v))
}

// ProductImageHasPrefix applies the HasPrefix predicate on the "product_image" field.
func ProductImageHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldProductImage, v))
}

// ProductImageHasSuffix applies the HasSuffix predicate on the "product_image" field.
func ProductImageHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldProductImage, v))
}

// ProductImageEqualFold applies the EqualFold predicate on the "product_image" field.
func ProductImageEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldProductImage, v))
}

// ProductImageContainsFold applies the ContainsFold predicate on the "product_image" field.
func ProductImageContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldProductImage, v))
}

// IngredientsTableIDEQ applies the EQ predicate on the "ingredients_table_id" field.
func IngredientsTableIDEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldIngredientsTableID, v))
}

// IngredientsTableIDNEQ applies the NEQ predicate on the "ingredients_table_id" field.
func IngredientsTableIDNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldIngredientsTableID, v))
}

// IngredientsTableIDIn applies the In predicate on the "ingredients_table_id" field.
func IngredientsTableIDIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldIngredientsTableID, vs...))
}

// IngredientsTableIDNotIn applies the NotIn predicate on the "ingredients_table_id" field.
func IngredientsTableIDNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldIngredientsTableID, vs...))
}

// IngredientsTableIDIsNil applies the IsNil predicate on the "ingredients_table_id" field.
func IngredientsTableIDIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldIngredientsTableID))
}

// IngredientsTableIDNotNil applies the NotNil predicate on the "ingredients_table_id" field.
func IngredientsTableIDNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldIngredientsTableID))
}

// ProductCategoryIDEQ applies the EQ predicate on the "product_category_id" field.
func ProductCategoryIDEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductCategoryID, v))
}

// ProductCategoryIDNEQ applies the NEQ predicate on the "product_category_id" field.
func ProductCategoryIDNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldProductCategoryID, v))
}

// ProductCategoryIDIn applies the In predicate on the "product_category_id" field.
func ProductCategoryIDIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldProductCategoryID, vs...))
}

// ProductCategoryIDNotIn applies the NotIn predicate on the "product_category_id" field.
func ProductCategoryIDNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldProductCategoryID, vs...))
}

// ProductCategoryIDGT applies the GT predicate on the "product_category_id" field.
func ProductCategoryIDGT(v int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldProductCategoryID, v))
}

// ProductCategoryIDGTE applies the GTE predicate on the "product_category_id" field.
func ProductCategoryIDGTE(v int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldProductCategoryID, v))
}

// ProductCategoryIDLT applies the LT predicate on the "product_category_id" field.
func ProductCategoryIDLT(v int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldProductCategoryID, v))
}

// ProductCategoryIDLTE applies the LTE predicate on the "product_category_id" field.
func ProductCategoryIDLTE(v int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldProductCategoryID, v))
}

// ProductCategoryIDIsNil applies the IsNil predicate on the "product_category_id" field.
func ProductCategoryIDIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldProductCategoryID))
}

// ProductCategoryIDNotNil applies the NotNil predicate on the "product_category_id" field.
func ProductCategoryIDNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldProductCategoryID))
}

// NutritionalInformationIDEQ applies the EQ predicate on the "nutritional_information_id" field.
func NutritionalInformationIDEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldNutritionalInformationID, v))
}

// NutritionalInformationIDNEQ applies the NEQ predicate on the "nutritional_information_id" field.
func NutritionalInformationIDNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldNutritionalInformationID, v))
}

// NutritionalInformationIDIn applies the In predicate on the "nutritional_information_id" field.
func NutritionalInformationIDIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldNutritionalInformationID, vs...))
}

// NutritionalInformationIDNotIn applies the NotIn predicate on the "nutritional_information_id" field.
func NutritionalInformationIDNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldNutritionalInformationID, vs...))
}

// NutritionalInformationIDIsNil applies the IsNil predicate on the "nutritional_information_id" field.
func NutritionalInformationIDIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldNutritionalInformationID))
}

// NutritionalInformationIDNotNil applies the NotNil predicate on the "nutritional_information_id" field.
func NutritionalInformationIDNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldNutritionalInformationID))
}

// PromotionIDEQ applies the EQ predicate on the "promotion_id" field.
func PromotionIDEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldPromotionID, v))
}

// PromotionIDNEQ applies the NEQ predicate on the "promotion_id" field.
func PromotionIDNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldPromotionID, v))
}

// PromotionIDIn applies the In predicate on the "promotion_id" field.
func PromotionIDIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldPromotionID, vs...))
}

// PromotionIDNotIn applies the NotIn predicate on the "promotion_id" field.
func PromotionIDNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldPromotionID, vs...))
}

// PromotionIDIsNil applies the IsNil predicate on the "promotion_id" field.
func PromotionIDIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldPromotionID))
}

// PromotionIDNotNil applies the NotNil predicate on the "promotion_id" field.
func PromotionIDNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldPromotionID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProductItem applies the HasEdge predicate on the "product_item" edge.
func HasProductItem() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProductItemTable, ProductItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductItemWith applies the HasEdge predicate on the "product_item" edge with a given conditions (other predicates).
func HasProductItemWith(preds ...predicate.ProductItem) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newProductItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPromotion applies the HasEdge predicate on the "promotion" edge.
func HasPromotion() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PromotionTable, PromotionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPromotionWith applies the HasEdge predicate on the "promotion" edge with a given conditions (other predicates).
func HasPromotionWith(preds ...predicate.Promotion) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newPromotionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIngredientsTable applies the HasEdge predicate on the "ingredients_table" edge.
func HasIngredientsTable() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, IngredientsTableTable, IngredientsTableColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIngredientsTableWith applies the HasEdge predicate on the "ingredients_table" edge with a given conditions (other predicates).
func HasIngredientsTableWith(preds ...predicate.IngredientsTable) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newIngredientsTableStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNutritionalInformation applies the HasEdge predicate on the "nutritional_information" edge.
func HasNutritionalInformation() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NutritionalInformationTable, NutritionalInformationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNutritionalInformationWith applies the HasEdge predicate on the "nutritional_information" edge with a given conditions (other predicates).
func HasNutritionalInformationWith(preds ...predicate.NutritionalInformation) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newNutritionalInformationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		p(s.Not())
	})
}
