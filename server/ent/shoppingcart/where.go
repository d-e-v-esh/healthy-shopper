// Code generated by ent, DO NOT EDIT.

package shoppingcart

import (
	"healthyshopper/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldUserID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNotIn(FieldUserID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ShoppingCart {
	return predicate.ShoppingCart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ShoppingCart {
	return predicate.ShoppingCart(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShoppingCartItem applies the HasEdge predicate on the "shopping_cart_item" edge.
func HasShoppingCartItem() predicate.ShoppingCart {
	return predicate.ShoppingCart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ShoppingCartItemTable, ShoppingCartItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShoppingCartItemWith applies the HasEdge predicate on the "shopping_cart_item" edge with a given conditions (other predicates).
func HasShoppingCartItemWith(preds ...predicate.ShoppingCartItem) predicate.ShoppingCart {
	return predicate.ShoppingCart(func(s *sql.Selector) {
		step := newShoppingCartItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShoppingCart) predicate.ShoppingCart {
	return predicate.ShoppingCart(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShoppingCart) predicate.ShoppingCart {
	return predicate.ShoppingCart(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShoppingCart) predicate.ShoppingCart {
	return predicate.ShoppingCart(func(s *sql.Selector) {
		p(s.Not())
	})
}
