// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"healthyshopper/ent/nutritionalinformation"
	"healthyshopper/ent/nutritionalinformationtable"
	"healthyshopper/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NutritionalInformationTableQuery is the builder for querying NutritionalInformationTable entities.
type NutritionalInformationTableQuery struct {
	config
	ctx                             *QueryContext
	order                           []nutritionalinformationtable.OrderOption
	inters                          []Interceptor
	predicates                      []predicate.NutritionalInformationTable
	withNutritionalInformation      *NutritionalInformationQuery
	modifiers                       []func(*sql.Selector)
	loadTotal                       []func(context.Context, []*NutritionalInformationTable) error
	withNamedNutritionalInformation map[string]*NutritionalInformationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NutritionalInformationTableQuery builder.
func (nitq *NutritionalInformationTableQuery) Where(ps ...predicate.NutritionalInformationTable) *NutritionalInformationTableQuery {
	nitq.predicates = append(nitq.predicates, ps...)
	return nitq
}

// Limit the number of records to be returned by this query.
func (nitq *NutritionalInformationTableQuery) Limit(limit int) *NutritionalInformationTableQuery {
	nitq.ctx.Limit = &limit
	return nitq
}

// Offset to start from.
func (nitq *NutritionalInformationTableQuery) Offset(offset int) *NutritionalInformationTableQuery {
	nitq.ctx.Offset = &offset
	return nitq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nitq *NutritionalInformationTableQuery) Unique(unique bool) *NutritionalInformationTableQuery {
	nitq.ctx.Unique = &unique
	return nitq
}

// Order specifies how the records should be ordered.
func (nitq *NutritionalInformationTableQuery) Order(o ...nutritionalinformationtable.OrderOption) *NutritionalInformationTableQuery {
	nitq.order = append(nitq.order, o...)
	return nitq
}

// QueryNutritionalInformation chains the current query on the "nutritional_information" edge.
func (nitq *NutritionalInformationTableQuery) QueryNutritionalInformation() *NutritionalInformationQuery {
	query := (&NutritionalInformationClient{config: nitq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nitq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nitq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(nutritionalinformationtable.Table, nutritionalinformationtable.FieldID, selector),
			sqlgraph.To(nutritionalinformation.Table, nutritionalinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, nutritionalinformationtable.NutritionalInformationTable, nutritionalinformationtable.NutritionalInformationColumn),
		)
		fromU = sqlgraph.SetNeighbors(nitq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NutritionalInformationTable entity from the query.
// Returns a *NotFoundError when no NutritionalInformationTable was found.
func (nitq *NutritionalInformationTableQuery) First(ctx context.Context) (*NutritionalInformationTable, error) {
	nodes, err := nitq.Limit(1).All(setContextOp(ctx, nitq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{nutritionalinformationtable.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nitq *NutritionalInformationTableQuery) FirstX(ctx context.Context) *NutritionalInformationTable {
	node, err := nitq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NutritionalInformationTable ID from the query.
// Returns a *NotFoundError when no NutritionalInformationTable ID was found.
func (nitq *NutritionalInformationTableQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nitq.Limit(1).IDs(setContextOp(ctx, nitq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{nutritionalinformationtable.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nitq *NutritionalInformationTableQuery) FirstIDX(ctx context.Context) int {
	id, err := nitq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NutritionalInformationTable entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NutritionalInformationTable entity is found.
// Returns a *NotFoundError when no NutritionalInformationTable entities are found.
func (nitq *NutritionalInformationTableQuery) Only(ctx context.Context) (*NutritionalInformationTable, error) {
	nodes, err := nitq.Limit(2).All(setContextOp(ctx, nitq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{nutritionalinformationtable.Label}
	default:
		return nil, &NotSingularError{nutritionalinformationtable.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nitq *NutritionalInformationTableQuery) OnlyX(ctx context.Context) *NutritionalInformationTable {
	node, err := nitq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NutritionalInformationTable ID in the query.
// Returns a *NotSingularError when more than one NutritionalInformationTable ID is found.
// Returns a *NotFoundError when no entities are found.
func (nitq *NutritionalInformationTableQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nitq.Limit(2).IDs(setContextOp(ctx, nitq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{nutritionalinformationtable.Label}
	default:
		err = &NotSingularError{nutritionalinformationtable.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nitq *NutritionalInformationTableQuery) OnlyIDX(ctx context.Context) int {
	id, err := nitq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NutritionalInformationTables.
func (nitq *NutritionalInformationTableQuery) All(ctx context.Context) ([]*NutritionalInformationTable, error) {
	ctx = setContextOp(ctx, nitq.ctx, "All")
	if err := nitq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NutritionalInformationTable, *NutritionalInformationTableQuery]()
	return withInterceptors[[]*NutritionalInformationTable](ctx, nitq, qr, nitq.inters)
}

// AllX is like All, but panics if an error occurs.
func (nitq *NutritionalInformationTableQuery) AllX(ctx context.Context) []*NutritionalInformationTable {
	nodes, err := nitq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NutritionalInformationTable IDs.
func (nitq *NutritionalInformationTableQuery) IDs(ctx context.Context) (ids []int, err error) {
	if nitq.ctx.Unique == nil && nitq.path != nil {
		nitq.Unique(true)
	}
	ctx = setContextOp(ctx, nitq.ctx, "IDs")
	if err = nitq.Select(nutritionalinformationtable.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nitq *NutritionalInformationTableQuery) IDsX(ctx context.Context) []int {
	ids, err := nitq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nitq *NutritionalInformationTableQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, nitq.ctx, "Count")
	if err := nitq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, nitq, querierCount[*NutritionalInformationTableQuery](), nitq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (nitq *NutritionalInformationTableQuery) CountX(ctx context.Context) int {
	count, err := nitq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nitq *NutritionalInformationTableQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, nitq.ctx, "Exist")
	switch _, err := nitq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (nitq *NutritionalInformationTableQuery) ExistX(ctx context.Context) bool {
	exist, err := nitq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NutritionalInformationTableQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nitq *NutritionalInformationTableQuery) Clone() *NutritionalInformationTableQuery {
	if nitq == nil {
		return nil
	}
	return &NutritionalInformationTableQuery{
		config:                     nitq.config,
		ctx:                        nitq.ctx.Clone(),
		order:                      append([]nutritionalinformationtable.OrderOption{}, nitq.order...),
		inters:                     append([]Interceptor{}, nitq.inters...),
		predicates:                 append([]predicate.NutritionalInformationTable{}, nitq.predicates...),
		withNutritionalInformation: nitq.withNutritionalInformation.Clone(),
		// clone intermediate query.
		sql:  nitq.sql.Clone(),
		path: nitq.path,
	}
}

// WithNutritionalInformation tells the query-builder to eager-load the nodes that are connected to
// the "nutritional_information" edge. The optional arguments are used to configure the query builder of the edge.
func (nitq *NutritionalInformationTableQuery) WithNutritionalInformation(opts ...func(*NutritionalInformationQuery)) *NutritionalInformationTableQuery {
	query := (&NutritionalInformationClient{config: nitq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nitq.withNutritionalInformation = query
	return nitq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Parameter string `json:"parameter,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NutritionalInformationTable.Query().
//		GroupBy(nutritionalinformationtable.FieldParameter).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nitq *NutritionalInformationTableQuery) GroupBy(field string, fields ...string) *NutritionalInformationTableGroupBy {
	nitq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NutritionalInformationTableGroupBy{build: nitq}
	grbuild.flds = &nitq.ctx.Fields
	grbuild.label = nutritionalinformationtable.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Parameter string `json:"parameter,omitempty"`
//	}
//
//	client.NutritionalInformationTable.Query().
//		Select(nutritionalinformationtable.FieldParameter).
//		Scan(ctx, &v)
func (nitq *NutritionalInformationTableQuery) Select(fields ...string) *NutritionalInformationTableSelect {
	nitq.ctx.Fields = append(nitq.ctx.Fields, fields...)
	sbuild := &NutritionalInformationTableSelect{NutritionalInformationTableQuery: nitq}
	sbuild.label = nutritionalinformationtable.Label
	sbuild.flds, sbuild.scan = &nitq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NutritionalInformationTableSelect configured with the given aggregations.
func (nitq *NutritionalInformationTableQuery) Aggregate(fns ...AggregateFunc) *NutritionalInformationTableSelect {
	return nitq.Select().Aggregate(fns...)
}

func (nitq *NutritionalInformationTableQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range nitq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, nitq); err != nil {
				return err
			}
		}
	}
	for _, f := range nitq.ctx.Fields {
		if !nutritionalinformationtable.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nitq.path != nil {
		prev, err := nitq.path(ctx)
		if err != nil {
			return err
		}
		nitq.sql = prev
	}
	return nil
}

func (nitq *NutritionalInformationTableQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NutritionalInformationTable, error) {
	var (
		nodes       = []*NutritionalInformationTable{}
		_spec       = nitq.querySpec()
		loadedTypes = [1]bool{
			nitq.withNutritionalInformation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NutritionalInformationTable).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NutritionalInformationTable{config: nitq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(nitq.modifiers) > 0 {
		_spec.Modifiers = nitq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nitq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nitq.withNutritionalInformation; query != nil {
		if err := nitq.loadNutritionalInformation(ctx, query, nodes,
			func(n *NutritionalInformationTable) { n.Edges.NutritionalInformation = []*NutritionalInformation{} },
			func(n *NutritionalInformationTable, e *NutritionalInformation) {
				n.Edges.NutritionalInformation = append(n.Edges.NutritionalInformation, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range nitq.withNamedNutritionalInformation {
		if err := nitq.loadNutritionalInformation(ctx, query, nodes,
			func(n *NutritionalInformationTable) { n.appendNamedNutritionalInformation(name) },
			func(n *NutritionalInformationTable, e *NutritionalInformation) {
				n.appendNamedNutritionalInformation(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range nitq.loadTotal {
		if err := nitq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nitq *NutritionalInformationTableQuery) loadNutritionalInformation(ctx context.Context, query *NutritionalInformationQuery, nodes []*NutritionalInformationTable, init func(*NutritionalInformationTable), assign func(*NutritionalInformationTable, *NutritionalInformation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*NutritionalInformationTable)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(nutritionalinformation.FieldNutritionalInformationTableID)
	}
	query.Where(predicate.NutritionalInformation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(nutritionalinformationtable.NutritionalInformationColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.NutritionalInformationTableID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "nutritional_information_table_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (nitq *NutritionalInformationTableQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nitq.querySpec()
	if len(nitq.modifiers) > 0 {
		_spec.Modifiers = nitq.modifiers
	}
	_spec.Node.Columns = nitq.ctx.Fields
	if len(nitq.ctx.Fields) > 0 {
		_spec.Unique = nitq.ctx.Unique != nil && *nitq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, nitq.driver, _spec)
}

func (nitq *NutritionalInformationTableQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(nutritionalinformationtable.Table, nutritionalinformationtable.Columns, sqlgraph.NewFieldSpec(nutritionalinformationtable.FieldID, field.TypeInt))
	_spec.From = nitq.sql
	if unique := nitq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if nitq.path != nil {
		_spec.Unique = true
	}
	if fields := nitq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nutritionalinformationtable.FieldID)
		for i := range fields {
			if fields[i] != nutritionalinformationtable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nitq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nitq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nitq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nitq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nitq *NutritionalInformationTableQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nitq.driver.Dialect())
	t1 := builder.Table(nutritionalinformationtable.Table)
	columns := nitq.ctx.Fields
	if len(columns) == 0 {
		columns = nutritionalinformationtable.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nitq.sql != nil {
		selector = nitq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nitq.ctx.Unique != nil && *nitq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range nitq.predicates {
		p(selector)
	}
	for _, p := range nitq.order {
		p(selector)
	}
	if offset := nitq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nitq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedNutritionalInformation tells the query-builder to eager-load the nodes that are connected to the "nutritional_information"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nitq *NutritionalInformationTableQuery) WithNamedNutritionalInformation(name string, opts ...func(*NutritionalInformationQuery)) *NutritionalInformationTableQuery {
	query := (&NutritionalInformationClient{config: nitq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if nitq.withNamedNutritionalInformation == nil {
		nitq.withNamedNutritionalInformation = make(map[string]*NutritionalInformationQuery)
	}
	nitq.withNamedNutritionalInformation[name] = query
	return nitq
}

// NutritionalInformationTableGroupBy is the group-by builder for NutritionalInformationTable entities.
type NutritionalInformationTableGroupBy struct {
	selector
	build *NutritionalInformationTableQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nitgb *NutritionalInformationTableGroupBy) Aggregate(fns ...AggregateFunc) *NutritionalInformationTableGroupBy {
	nitgb.fns = append(nitgb.fns, fns...)
	return nitgb
}

// Scan applies the selector query and scans the result into the given value.
func (nitgb *NutritionalInformationTableGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nitgb.build.ctx, "GroupBy")
	if err := nitgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NutritionalInformationTableQuery, *NutritionalInformationTableGroupBy](ctx, nitgb.build, nitgb, nitgb.build.inters, v)
}

func (nitgb *NutritionalInformationTableGroupBy) sqlScan(ctx context.Context, root *NutritionalInformationTableQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(nitgb.fns))
	for _, fn := range nitgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*nitgb.flds)+len(nitgb.fns))
		for _, f := range *nitgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*nitgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nitgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NutritionalInformationTableSelect is the builder for selecting fields of NutritionalInformationTable entities.
type NutritionalInformationTableSelect struct {
	*NutritionalInformationTableQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nits *NutritionalInformationTableSelect) Aggregate(fns ...AggregateFunc) *NutritionalInformationTableSelect {
	nits.fns = append(nits.fns, fns...)
	return nits
}

// Scan applies the selector query and scans the result into the given value.
func (nits *NutritionalInformationTableSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nits.ctx, "Select")
	if err := nits.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NutritionalInformationTableQuery, *NutritionalInformationTableSelect](ctx, nits.NutritionalInformationTableQuery, nits, nits.inters, v)
}

func (nits *NutritionalInformationTableSelect) sqlScan(ctx context.Context, root *NutritionalInformationTableQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nits.fns))
	for _, fn := range nits.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nits.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nits.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
