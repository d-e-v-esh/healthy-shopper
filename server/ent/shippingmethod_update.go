// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/predicate"
	"healthyshopper/ent/shippingmethod"
	"healthyshopper/ent/shoporder"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShippingMethodUpdate is the builder for updating ShippingMethod entities.
type ShippingMethodUpdate struct {
	config
	hooks    []Hook
	mutation *ShippingMethodMutation
}

// Where appends a list predicates to the ShippingMethodUpdate builder.
func (smu *ShippingMethodUpdate) Where(ps ...predicate.ShippingMethod) *ShippingMethodUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetShippingMethod sets the "shipping_method" field.
func (smu *ShippingMethodUpdate) SetShippingMethod(s string) *ShippingMethodUpdate {
	smu.mutation.SetShippingMethod(s)
	return smu
}

// SetShippingCost sets the "shipping_cost" field.
func (smu *ShippingMethodUpdate) SetShippingCost(f float64) *ShippingMethodUpdate {
	smu.mutation.ResetShippingCost()
	smu.mutation.SetShippingCost(f)
	return smu
}

// AddShippingCost adds f to the "shipping_cost" field.
func (smu *ShippingMethodUpdate) AddShippingCost(f float64) *ShippingMethodUpdate {
	smu.mutation.AddShippingCost(f)
	return smu
}

// AddShopOrderIDs adds the "shop_order" edge to the ShopOrder entity by IDs.
func (smu *ShippingMethodUpdate) AddShopOrderIDs(ids ...int) *ShippingMethodUpdate {
	smu.mutation.AddShopOrderIDs(ids...)
	return smu
}

// AddShopOrder adds the "shop_order" edges to the ShopOrder entity.
func (smu *ShippingMethodUpdate) AddShopOrder(s ...*ShopOrder) *ShippingMethodUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddShopOrderIDs(ids...)
}

// Mutation returns the ShippingMethodMutation object of the builder.
func (smu *ShippingMethodUpdate) Mutation() *ShippingMethodMutation {
	return smu.mutation
}

// ClearShopOrder clears all "shop_order" edges to the ShopOrder entity.
func (smu *ShippingMethodUpdate) ClearShopOrder() *ShippingMethodUpdate {
	smu.mutation.ClearShopOrder()
	return smu
}

// RemoveShopOrderIDs removes the "shop_order" edge to ShopOrder entities by IDs.
func (smu *ShippingMethodUpdate) RemoveShopOrderIDs(ids ...int) *ShippingMethodUpdate {
	smu.mutation.RemoveShopOrderIDs(ids...)
	return smu
}

// RemoveShopOrder removes "shop_order" edges to ShopOrder entities.
func (smu *ShippingMethodUpdate) RemoveShopOrder(s ...*ShopOrder) *ShippingMethodUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveShopOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *ShippingMethodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *ShippingMethodUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *ShippingMethodUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *ShippingMethodUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *ShippingMethodUpdate) check() error {
	if v, ok := smu.mutation.ShippingMethod(); ok {
		if err := shippingmethod.ShippingMethodValidator(v); err != nil {
			return &ValidationError{Name: "shipping_method", err: fmt.Errorf(`ent: validator failed for field "ShippingMethod.shipping_method": %w`, err)}
		}
	}
	if v, ok := smu.mutation.ShippingCost(); ok {
		if err := shippingmethod.ShippingCostValidator(v); err != nil {
			return &ValidationError{Name: "shipping_cost", err: fmt.Errorf(`ent: validator failed for field "ShippingMethod.shipping_cost": %w`, err)}
		}
	}
	return nil
}

func (smu *ShippingMethodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shippingmethod.Table, shippingmethod.Columns, sqlgraph.NewFieldSpec(shippingmethod.FieldID, field.TypeInt))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.ShippingMethod(); ok {
		_spec.SetField(shippingmethod.FieldShippingMethod, field.TypeString, value)
	}
	if value, ok := smu.mutation.ShippingCost(); ok {
		_spec.SetField(shippingmethod.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := smu.mutation.AddedShippingCost(); ok {
		_spec.AddField(shippingmethod.FieldShippingCost, field.TypeFloat64, value)
	}
	if smu.mutation.ShopOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shippingmethod.ShopOrderTable,
			Columns: []string{shippingmethod.ShopOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoporder.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedShopOrderIDs(); len(nodes) > 0 && !smu.mutation.ShopOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shippingmethod.ShopOrderTable,
			Columns: []string{shippingmethod.ShopOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoporder.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ShopOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shippingmethod.ShopOrderTable,
			Columns: []string{shippingmethod.ShopOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoporder.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shippingmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// ShippingMethodUpdateOne is the builder for updating a single ShippingMethod entity.
type ShippingMethodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShippingMethodMutation
}

// SetShippingMethod sets the "shipping_method" field.
func (smuo *ShippingMethodUpdateOne) SetShippingMethod(s string) *ShippingMethodUpdateOne {
	smuo.mutation.SetShippingMethod(s)
	return smuo
}

// SetShippingCost sets the "shipping_cost" field.
func (smuo *ShippingMethodUpdateOne) SetShippingCost(f float64) *ShippingMethodUpdateOne {
	smuo.mutation.ResetShippingCost()
	smuo.mutation.SetShippingCost(f)
	return smuo
}

// AddShippingCost adds f to the "shipping_cost" field.
func (smuo *ShippingMethodUpdateOne) AddShippingCost(f float64) *ShippingMethodUpdateOne {
	smuo.mutation.AddShippingCost(f)
	return smuo
}

// AddShopOrderIDs adds the "shop_order" edge to the ShopOrder entity by IDs.
func (smuo *ShippingMethodUpdateOne) AddShopOrderIDs(ids ...int) *ShippingMethodUpdateOne {
	smuo.mutation.AddShopOrderIDs(ids...)
	return smuo
}

// AddShopOrder adds the "shop_order" edges to the ShopOrder entity.
func (smuo *ShippingMethodUpdateOne) AddShopOrder(s ...*ShopOrder) *ShippingMethodUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddShopOrderIDs(ids...)
}

// Mutation returns the ShippingMethodMutation object of the builder.
func (smuo *ShippingMethodUpdateOne) Mutation() *ShippingMethodMutation {
	return smuo.mutation
}

// ClearShopOrder clears all "shop_order" edges to the ShopOrder entity.
func (smuo *ShippingMethodUpdateOne) ClearShopOrder() *ShippingMethodUpdateOne {
	smuo.mutation.ClearShopOrder()
	return smuo
}

// RemoveShopOrderIDs removes the "shop_order" edge to ShopOrder entities by IDs.
func (smuo *ShippingMethodUpdateOne) RemoveShopOrderIDs(ids ...int) *ShippingMethodUpdateOne {
	smuo.mutation.RemoveShopOrderIDs(ids...)
	return smuo
}

// RemoveShopOrder removes "shop_order" edges to ShopOrder entities.
func (smuo *ShippingMethodUpdateOne) RemoveShopOrder(s ...*ShopOrder) *ShippingMethodUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveShopOrderIDs(ids...)
}

// Where appends a list predicates to the ShippingMethodUpdate builder.
func (smuo *ShippingMethodUpdateOne) Where(ps ...predicate.ShippingMethod) *ShippingMethodUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *ShippingMethodUpdateOne) Select(field string, fields ...string) *ShippingMethodUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated ShippingMethod entity.
func (smuo *ShippingMethodUpdateOne) Save(ctx context.Context) (*ShippingMethod, error) {
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *ShippingMethodUpdateOne) SaveX(ctx context.Context) *ShippingMethod {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *ShippingMethodUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *ShippingMethodUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *ShippingMethodUpdateOne) check() error {
	if v, ok := smuo.mutation.ShippingMethod(); ok {
		if err := shippingmethod.ShippingMethodValidator(v); err != nil {
			return &ValidationError{Name: "shipping_method", err: fmt.Errorf(`ent: validator failed for field "ShippingMethod.shipping_method": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.ShippingCost(); ok {
		if err := shippingmethod.ShippingCostValidator(v); err != nil {
			return &ValidationError{Name: "shipping_cost", err: fmt.Errorf(`ent: validator failed for field "ShippingMethod.shipping_cost": %w`, err)}
		}
	}
	return nil
}

func (smuo *ShippingMethodUpdateOne) sqlSave(ctx context.Context) (_node *ShippingMethod, err error) {
	if err := smuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shippingmethod.Table, shippingmethod.Columns, sqlgraph.NewFieldSpec(shippingmethod.FieldID, field.TypeInt))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShippingMethod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shippingmethod.FieldID)
		for _, f := range fields {
			if !shippingmethod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shippingmethod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.ShippingMethod(); ok {
		_spec.SetField(shippingmethod.FieldShippingMethod, field.TypeString, value)
	}
	if value, ok := smuo.mutation.ShippingCost(); ok {
		_spec.SetField(shippingmethod.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := smuo.mutation.AddedShippingCost(); ok {
		_spec.AddField(shippingmethod.FieldShippingCost, field.TypeFloat64, value)
	}
	if smuo.mutation.ShopOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shippingmethod.ShopOrderTable,
			Columns: []string{shippingmethod.ShopOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoporder.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedShopOrderIDs(); len(nodes) > 0 && !smuo.mutation.ShopOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shippingmethod.ShopOrderTable,
			Columns: []string{shippingmethod.ShopOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoporder.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ShopOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shippingmethod.ShopOrderTable,
			Columns: []string{shippingmethod.ShopOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoporder.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShippingMethod{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shippingmethod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
