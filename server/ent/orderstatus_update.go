// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/orderstatus"
	"healthyshopper/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderStatusUpdate is the builder for updating OrderStatus entities.
type OrderStatusUpdate struct {
	config
	hooks    []Hook
	mutation *OrderStatusMutation
}

// Where appends a list predicates to the OrderStatusUpdate builder.
func (osu *OrderStatusUpdate) Where(ps ...predicate.OrderStatus) *OrderStatusUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetStatus sets the "status" field.
func (osu *OrderStatusUpdate) SetStatus(s string) *OrderStatusUpdate {
	osu.mutation.SetStatus(s)
	return osu
}

// Mutation returns the OrderStatusMutation object of the builder.
func (osu *OrderStatusUpdate) Mutation() *OrderStatusMutation {
	return osu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrderStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrderStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrderStatusUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrderStatusUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osu *OrderStatusUpdate) check() error {
	if v, ok := osu.mutation.Status(); ok {
		if err := orderstatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "OrderStatus.status": %w`, err)}
		}
	}
	return nil
}

func (osu *OrderStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderstatus.Table, orderstatus.Columns, sqlgraph.NewFieldSpec(orderstatus.FieldID, field.TypeInt))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.Status(); ok {
		_spec.SetField(orderstatus.FieldStatus, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OrderStatusUpdateOne is the builder for updating a single OrderStatus entity.
type OrderStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderStatusMutation
}

// SetStatus sets the "status" field.
func (osuo *OrderStatusUpdateOne) SetStatus(s string) *OrderStatusUpdateOne {
	osuo.mutation.SetStatus(s)
	return osuo
}

// Mutation returns the OrderStatusMutation object of the builder.
func (osuo *OrderStatusUpdateOne) Mutation() *OrderStatusMutation {
	return osuo.mutation
}

// Where appends a list predicates to the OrderStatusUpdate builder.
func (osuo *OrderStatusUpdateOne) Where(ps ...predicate.OrderStatus) *OrderStatusUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrderStatusUpdateOne) Select(field string, fields ...string) *OrderStatusUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrderStatus entity.
func (osuo *OrderStatusUpdateOne) Save(ctx context.Context) (*OrderStatus, error) {
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrderStatusUpdateOne) SaveX(ctx context.Context) *OrderStatus {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrderStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrderStatusUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OrderStatusUpdateOne) check() error {
	if v, ok := osuo.mutation.Status(); ok {
		if err := orderstatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "OrderStatus.status": %w`, err)}
		}
	}
	return nil
}

func (osuo *OrderStatusUpdateOne) sqlSave(ctx context.Context) (_node *OrderStatus, err error) {
	if err := osuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderstatus.Table, orderstatus.Columns, sqlgraph.NewFieldSpec(orderstatus.FieldID, field.TypeInt))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderstatus.FieldID)
		for _, f := range fields {
			if !orderstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.Status(); ok {
		_spec.SetField(orderstatus.FieldStatus, field.TypeString, value)
	}
	_node = &OrderStatus{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
