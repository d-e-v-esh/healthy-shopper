// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthyshopper/ent/user"
	"healthyshopper/ent/userreview"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserReview is the model entity for the UserReview schema.
type UserReview struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// OrderedProductID holds the value of the "ordered_product_id" field.
	OrderedProductID int `json:"ordered_product_id,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating int `json:"rating,omitempty"`
	// Review holds the value of the "review" field.
	Review string `json:"review,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserReviewQuery when eager-loading is set.
	Edges        UserReviewEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserReviewEdges holds the relations/edges for other nodes in the graph.
type UserReviewEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserReviewEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserReview) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userreview.FieldID, userreview.FieldUserID, userreview.FieldOrderedProductID, userreview.FieldRating:
			values[i] = new(sql.NullInt64)
		case userreview.FieldReview:
			values[i] = new(sql.NullString)
		case userreview.FieldCreatedAt, userreview.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserReview fields.
func (ur *UserReview) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userreview.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ur.ID = int(value.Int64)
		case userreview.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ur.UserID = int(value.Int64)
			}
		case userreview.FieldOrderedProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ordered_product_id", values[i])
			} else if value.Valid {
				ur.OrderedProductID = int(value.Int64)
			}
		case userreview.FieldRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				ur.Rating = int(value.Int64)
			}
		case userreview.FieldReview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review", values[i])
			} else if value.Valid {
				ur.Review = value.String
			}
		case userreview.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ur.CreatedAt = value.Time
			}
		case userreview.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ur.UpdatedAt = value.Time
			}
		default:
			ur.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserReview.
// This includes values selected through modifiers, order, etc.
func (ur *UserReview) Value(name string) (ent.Value, error) {
	return ur.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserReview entity.
func (ur *UserReview) QueryUser() *UserQuery {
	return NewUserReviewClient(ur.config).QueryUser(ur)
}

// Update returns a builder for updating this UserReview.
// Note that you need to call UserReview.Unwrap() before calling this method if this UserReview
// was returned from a transaction, and the transaction was committed or rolled back.
func (ur *UserReview) Update() *UserReviewUpdateOne {
	return NewUserReviewClient(ur.config).UpdateOne(ur)
}

// Unwrap unwraps the UserReview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ur *UserReview) Unwrap() *UserReview {
	_tx, ok := ur.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserReview is not a transactional entity")
	}
	ur.config.driver = _tx.drv
	return ur
}

// String implements the fmt.Stringer.
func (ur *UserReview) String() string {
	var builder strings.Builder
	builder.WriteString("UserReview(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ur.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ur.UserID))
	builder.WriteString(", ")
	builder.WriteString("ordered_product_id=")
	builder.WriteString(fmt.Sprintf("%v", ur.OrderedProductID))
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", ur.Rating))
	builder.WriteString(", ")
	builder.WriteString("review=")
	builder.WriteString(ur.Review)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ur.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ur.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserReviews is a parsable slice of UserReview.
type UserReviews []*UserReview
