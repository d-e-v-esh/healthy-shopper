// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/productitem"
	"healthyshopper/ent/shoppingcart"
	"healthyshopper/ent/shoppingcartitem"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShoppingCartItemCreate is the builder for creating a ShoppingCartItem entity.
type ShoppingCartItemCreate struct {
	config
	mutation *ShoppingCartItemMutation
	hooks    []Hook
}

// SetShoppingCartID sets the "shopping_cart_id" field.
func (scic *ShoppingCartItemCreate) SetShoppingCartID(i int) *ShoppingCartItemCreate {
	scic.mutation.SetShoppingCartID(i)
	return scic
}

// SetProductItemID sets the "product_item_id" field.
func (scic *ShoppingCartItemCreate) SetProductItemID(i int) *ShoppingCartItemCreate {
	scic.mutation.SetProductItemID(i)
	return scic
}

// SetQuantity sets the "quantity" field.
func (scic *ShoppingCartItemCreate) SetQuantity(i int) *ShoppingCartItemCreate {
	scic.mutation.SetQuantity(i)
	return scic
}

// SetShoppingCart sets the "shopping_cart" edge to the ShoppingCart entity.
func (scic *ShoppingCartItemCreate) SetShoppingCart(s *ShoppingCart) *ShoppingCartItemCreate {
	return scic.SetShoppingCartID(s.ID)
}

// SetProductItem sets the "product_item" edge to the ProductItem entity.
func (scic *ShoppingCartItemCreate) SetProductItem(p *ProductItem) *ShoppingCartItemCreate {
	return scic.SetProductItemID(p.ID)
}

// Mutation returns the ShoppingCartItemMutation object of the builder.
func (scic *ShoppingCartItemCreate) Mutation() *ShoppingCartItemMutation {
	return scic.mutation
}

// Save creates the ShoppingCartItem in the database.
func (scic *ShoppingCartItemCreate) Save(ctx context.Context) (*ShoppingCartItem, error) {
	return withHooks(ctx, scic.sqlSave, scic.mutation, scic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scic *ShoppingCartItemCreate) SaveX(ctx context.Context) *ShoppingCartItem {
	v, err := scic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scic *ShoppingCartItemCreate) Exec(ctx context.Context) error {
	_, err := scic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scic *ShoppingCartItemCreate) ExecX(ctx context.Context) {
	if err := scic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scic *ShoppingCartItemCreate) check() error {
	if _, ok := scic.mutation.ShoppingCartID(); !ok {
		return &ValidationError{Name: "shopping_cart_id", err: errors.New(`ent: missing required field "ShoppingCartItem.shopping_cart_id"`)}
	}
	if _, ok := scic.mutation.ProductItemID(); !ok {
		return &ValidationError{Name: "product_item_id", err: errors.New(`ent: missing required field "ShoppingCartItem.product_item_id"`)}
	}
	if _, ok := scic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "ShoppingCartItem.quantity"`)}
	}
	if v, ok := scic.mutation.Quantity(); ok {
		if err := shoppingcartitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "ShoppingCartItem.quantity": %w`, err)}
		}
	}
	if _, ok := scic.mutation.ShoppingCartID(); !ok {
		return &ValidationError{Name: "shopping_cart", err: errors.New(`ent: missing required edge "ShoppingCartItem.shopping_cart"`)}
	}
	if _, ok := scic.mutation.ProductItemID(); !ok {
		return &ValidationError{Name: "product_item", err: errors.New(`ent: missing required edge "ShoppingCartItem.product_item"`)}
	}
	return nil
}

func (scic *ShoppingCartItemCreate) sqlSave(ctx context.Context) (*ShoppingCartItem, error) {
	if err := scic.check(); err != nil {
		return nil, err
	}
	_node, _spec := scic.createSpec()
	if err := sqlgraph.CreateNode(ctx, scic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	scic.mutation.id = &_node.ID
	scic.mutation.done = true
	return _node, nil
}

func (scic *ShoppingCartItemCreate) createSpec() (*ShoppingCartItem, *sqlgraph.CreateSpec) {
	var (
		_node = &ShoppingCartItem{config: scic.config}
		_spec = sqlgraph.NewCreateSpec(shoppingcartitem.Table, sqlgraph.NewFieldSpec(shoppingcartitem.FieldID, field.TypeInt))
	)
	if value, ok := scic.mutation.Quantity(); ok {
		_spec.SetField(shoppingcartitem.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if nodes := scic.mutation.ShoppingCartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shoppingcartitem.ShoppingCartTable,
			Columns: []string{shoppingcartitem.ShoppingCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShoppingCartID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scic.mutation.ProductItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcartitem.ProductItemTable,
			Columns: []string{shoppingcartitem.ProductItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductItemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShoppingCartItemCreateBulk is the builder for creating many ShoppingCartItem entities in bulk.
type ShoppingCartItemCreateBulk struct {
	config
	builders []*ShoppingCartItemCreate
}

// Save creates the ShoppingCartItem entities in the database.
func (scicb *ShoppingCartItemCreateBulk) Save(ctx context.Context) ([]*ShoppingCartItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scicb.builders))
	nodes := make([]*ShoppingCartItem, len(scicb.builders))
	mutators := make([]Mutator, len(scicb.builders))
	for i := range scicb.builders {
		func(i int, root context.Context) {
			builder := scicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShoppingCartItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scicb *ShoppingCartItemCreateBulk) SaveX(ctx context.Context) []*ShoppingCartItem {
	v, err := scicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scicb *ShoppingCartItemCreateBulk) Exec(ctx context.Context) error {
	_, err := scicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scicb *ShoppingCartItemCreateBulk) ExecX(ctx context.Context) {
	if err := scicb.Exec(ctx); err != nil {
		panic(err)
	}
}
