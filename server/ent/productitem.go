// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthyshopper/ent/product"
	"healthyshopper/ent/productitem"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductItem is the model entity for the ProductItem schema.
type ProductItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// StockKeepingUnit holds the value of the "stock_keeping_unit" field.
	StockKeepingUnit string `json:"stock_keeping_unit,omitempty"`
	// QuantityInStock holds the value of the "quantity_in_stock" field.
	QuantityInStock int `json:"quantity_in_stock,omitempty"`
	// ProductImage holds the value of the "product_image" field.
	ProductImage string `json:"product_image,omitempty"`
	// Price holds the value of the "price" field.
	Price float32 `json:"price,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductItemQuery when eager-loading is set.
	Edges        ProductItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductItemEdges holds the relations/edges for other nodes in the graph.
type ProductItemEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductItemEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productitem.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case productitem.FieldID, productitem.FieldProductID, productitem.FieldQuantityInStock:
			values[i] = new(sql.NullInt64)
		case productitem.FieldStockKeepingUnit, productitem.FieldProductImage:
			values[i] = new(sql.NullString)
		case productitem.FieldCreatedAt, productitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductItem fields.
func (pi *ProductItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case productitem.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pi.ProductID = int(value.Int64)
			}
		case productitem.FieldStockKeepingUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stock_keeping_unit", values[i])
			} else if value.Valid {
				pi.StockKeepingUnit = value.String
			}
		case productitem.FieldQuantityInStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_in_stock", values[i])
			} else if value.Valid {
				pi.QuantityInStock = int(value.Int64)
			}
		case productitem.FieldProductImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_image", values[i])
			} else if value.Valid {
				pi.ProductImage = value.String
			}
		case productitem.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pi.Price = float32(value.Float64)
			}
		case productitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case productitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductItem.
// This includes values selected through modifiers, order, etc.
func (pi *ProductItem) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the ProductItem entity.
func (pi *ProductItem) QueryProduct() *ProductQuery {
	return NewProductItemClient(pi.config).QueryProduct(pi)
}

// Update returns a builder for updating this ProductItem.
// Note that you need to call ProductItem.Unwrap() before calling this method if this ProductItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProductItem) Update() *ProductItemUpdateOne {
	return NewProductItemClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProductItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProductItem) Unwrap() *ProductItem {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductItem is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProductItem) String() string {
	var builder strings.Builder
	builder.WriteString("ProductItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", pi.ProductID))
	builder.WriteString(", ")
	builder.WriteString("stock_keeping_unit=")
	builder.WriteString(pi.StockKeepingUnit)
	builder.WriteString(", ")
	builder.WriteString("quantity_in_stock=")
	builder.WriteString(fmt.Sprintf("%v", pi.QuantityInStock))
	builder.WriteString(", ")
	builder.WriteString("product_image=")
	builder.WriteString(pi.ProductImage)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", pi.Price))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProductItems is a parsable slice of ProductItem.
type ProductItems []*ProductItem
