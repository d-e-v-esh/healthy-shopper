// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/address"
	"healthyshopper/ent/useraddress"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressCreate is the builder for creating a Address entity.
type AddressCreate struct {
	config
	mutation *AddressMutation
	hooks    []Hook
}

// SetAddressID sets the "address_id" field.
func (ac *AddressCreate) SetAddressID(i int) *AddressCreate {
	ac.mutation.SetAddressID(i)
	return ac
}

// SetPhoneNumber sets the "phone_number" field.
func (ac *AddressCreate) SetPhoneNumber(s string) *AddressCreate {
	ac.mutation.SetPhoneNumber(s)
	return ac
}

// SetAddressLine1 sets the "address_line1" field.
func (ac *AddressCreate) SetAddressLine1(s string) *AddressCreate {
	ac.mutation.SetAddressLine1(s)
	return ac
}

// SetAddressLine2 sets the "address_line2" field.
func (ac *AddressCreate) SetAddressLine2(s string) *AddressCreate {
	ac.mutation.SetAddressLine2(s)
	return ac
}

// SetNillableAddressLine2 sets the "address_line2" field if the given value is not nil.
func (ac *AddressCreate) SetNillableAddressLine2(s *string) *AddressCreate {
	if s != nil {
		ac.SetAddressLine2(*s)
	}
	return ac
}

// SetCity sets the "city" field.
func (ac *AddressCreate) SetCity(s string) *AddressCreate {
	ac.mutation.SetCity(s)
	return ac
}

// SetState sets the "state" field.
func (ac *AddressCreate) SetState(s string) *AddressCreate {
	ac.mutation.SetState(s)
	return ac
}

// SetCountry sets the "country" field.
func (ac *AddressCreate) SetCountry(s string) *AddressCreate {
	ac.mutation.SetCountry(s)
	return ac
}

// SetPostalCode sets the "postal_code" field.
func (ac *AddressCreate) SetPostalCode(s string) *AddressCreate {
	ac.mutation.SetPostalCode(s)
	return ac
}

// AddUserAddresIDs adds the "user_address" edge to the UserAddress entity by IDs.
func (ac *AddressCreate) AddUserAddresIDs(ids ...int) *AddressCreate {
	ac.mutation.AddUserAddresIDs(ids...)
	return ac
}

// AddUserAddress adds the "user_address" edges to the UserAddress entity.
func (ac *AddressCreate) AddUserAddress(u ...*UserAddress) *AddressCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ac.AddUserAddresIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (ac *AddressCreate) Mutation() *AddressMutation {
	return ac.mutation
}

// Save creates the Address in the database.
func (ac *AddressCreate) Save(ctx context.Context) (*Address, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddressCreate) SaveX(ctx context.Context) *Address {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddressCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddressCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddressCreate) check() error {
	if _, ok := ac.mutation.AddressID(); !ok {
		return &ValidationError{Name: "address_id", err: errors.New(`ent: missing required field "Address.address_id"`)}
	}
	if _, ok := ac.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "Address.phone_number"`)}
	}
	if v, ok := ac.mutation.PhoneNumber(); ok {
		if err := address.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Address.phone_number": %w`, err)}
		}
	}
	if _, ok := ac.mutation.AddressLine1(); !ok {
		return &ValidationError{Name: "address_line1", err: errors.New(`ent: missing required field "Address.address_line1"`)}
	}
	if v, ok := ac.mutation.AddressLine1(); ok {
		if err := address.AddressLine1Validator(v); err != nil {
			return &ValidationError{Name: "address_line1", err: fmt.Errorf(`ent: validator failed for field "Address.address_line1": %w`, err)}
		}
	}
	if v, ok := ac.mutation.AddressLine2(); ok {
		if err := address.AddressLine2Validator(v); err != nil {
			return &ValidationError{Name: "address_line2", err: fmt.Errorf(`ent: validator failed for field "Address.address_line2": %w`, err)}
		}
	}
	if _, ok := ac.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Address.city"`)}
	}
	if v, ok := ac.mutation.City(); ok {
		if err := address.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Address.city": %w`, err)}
		}
	}
	if _, ok := ac.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Address.state"`)}
	}
	if v, ok := ac.mutation.State(); ok {
		if err := address.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Address.state": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Address.country"`)}
	}
	if v, ok := ac.mutation.Country(); ok {
		if err := address.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Address.country": %w`, err)}
		}
	}
	if _, ok := ac.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New(`ent: missing required field "Address.postal_code"`)}
	}
	if v, ok := ac.mutation.PostalCode(); ok {
		if err := address.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Address.postal_code": %w`, err)}
		}
	}
	return nil
}

func (ac *AddressCreate) sqlSave(ctx context.Context) (*Address, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddressCreate) createSpec() (*Address, *sqlgraph.CreateSpec) {
	var (
		_node = &Address{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(address.Table, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.AddressID(); ok {
		_spec.SetField(address.FieldAddressID, field.TypeInt, value)
		_node.AddressID = value
	}
	if value, ok := ac.mutation.PhoneNumber(); ok {
		_spec.SetField(address.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := ac.mutation.AddressLine1(); ok {
		_spec.SetField(address.FieldAddressLine1, field.TypeString, value)
		_node.AddressLine1 = value
	}
	if value, ok := ac.mutation.AddressLine2(); ok {
		_spec.SetField(address.FieldAddressLine2, field.TypeString, value)
		_node.AddressLine2 = value
	}
	if value, ok := ac.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := ac.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := ac.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := ac.mutation.PostalCode(); ok {
		_spec.SetField(address.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if nodes := ac.mutation.UserAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.UserAddressTable,
			Columns: []string{address.UserAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AddressCreateBulk is the builder for creating many Address entities in bulk.
type AddressCreateBulk struct {
	config
	builders []*AddressCreate
}

// Save creates the Address entities in the database.
func (acb *AddressCreateBulk) Save(ctx context.Context) ([]*Address, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Address, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddressCreateBulk) SaveX(ctx context.Context) []*Address {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddressCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddressCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
