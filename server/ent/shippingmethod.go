// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthyshopper/ent/shippingmethod"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShippingMethod is the model entity for the ShippingMethod schema.
type ShippingMethod struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ShippingMethod holds the value of the "shipping_method" field.
	ShippingMethod string `json:"shipping_method,omitempty"`
	// ShippingCost holds the value of the "shipping_cost" field.
	ShippingCost float64 `json:"shipping_cost,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShippingMethod) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shippingmethod.FieldShippingCost:
			values[i] = new(sql.NullFloat64)
		case shippingmethod.FieldID:
			values[i] = new(sql.NullInt64)
		case shippingmethod.FieldShippingMethod:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShippingMethod fields.
func (sm *ShippingMethod) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shippingmethod.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int(value.Int64)
		case shippingmethod.FieldShippingMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_method", values[i])
			} else if value.Valid {
				sm.ShippingMethod = value.String
			}
		case shippingmethod.FieldShippingCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_cost", values[i])
			} else if value.Valid {
				sm.ShippingCost = value.Float64
			}
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShippingMethod.
// This includes values selected through modifiers, order, etc.
func (sm *ShippingMethod) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// Update returns a builder for updating this ShippingMethod.
// Note that you need to call ShippingMethod.Unwrap() before calling this method if this ShippingMethod
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *ShippingMethod) Update() *ShippingMethodUpdateOne {
	return NewShippingMethodClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the ShippingMethod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *ShippingMethod) Unwrap() *ShippingMethod {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShippingMethod is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *ShippingMethod) String() string {
	var builder strings.Builder
	builder.WriteString("ShippingMethod(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("shipping_method=")
	builder.WriteString(sm.ShippingMethod)
	builder.WriteString(", ")
	builder.WriteString("shipping_cost=")
	builder.WriteString(fmt.Sprintf("%v", sm.ShippingCost))
	builder.WriteByte(')')
	return builder.String()
}

// ShippingMethods is a parsable slice of ShippingMethod.
type ShippingMethods []*ShippingMethod
