// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"healthyshopper/ent/predicate"
	"healthyshopper/ent/userreview"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserReviewDelete is the builder for deleting a UserReview entity.
type UserReviewDelete struct {
	config
	hooks    []Hook
	mutation *UserReviewMutation
}

// Where appends a list predicates to the UserReviewDelete builder.
func (urd *UserReviewDelete) Where(ps ...predicate.UserReview) *UserReviewDelete {
	urd.mutation.Where(ps...)
	return urd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (urd *UserReviewDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, urd.sqlExec, urd.mutation, urd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (urd *UserReviewDelete) ExecX(ctx context.Context) int {
	n, err := urd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (urd *UserReviewDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userreview.Table, sqlgraph.NewFieldSpec(userreview.FieldID, field.TypeInt))
	if ps := urd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, urd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	urd.mutation.done = true
	return affected, err
}

// UserReviewDeleteOne is the builder for deleting a single UserReview entity.
type UserReviewDeleteOne struct {
	urd *UserReviewDelete
}

// Where appends a list predicates to the UserReviewDelete builder.
func (urdo *UserReviewDeleteOne) Where(ps ...predicate.UserReview) *UserReviewDeleteOne {
	urdo.urd.mutation.Where(ps...)
	return urdo
}

// Exec executes the deletion query.
func (urdo *UserReviewDeleteOne) Exec(ctx context.Context) error {
	n, err := urdo.urd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userreview.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (urdo *UserReviewDeleteOne) ExecX(ctx context.Context) {
	if err := urdo.Exec(ctx); err != nil {
		panic(err)
	}
}
