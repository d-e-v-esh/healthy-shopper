// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthyshopper/ent/orderline"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderLine is the model entity for the OrderLine schema.
type OrderLine struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProductItemID holds the value of the "product_item_id" field.
	ProductItemID int `json:"product_item_id,omitempty"`
	// ShopOrderID holds the value of the "shop_order_id" field.
	ShopOrderID int `json:"shop_order_id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Price holds the value of the "price" field.
	Price                   float64 `json:"price,omitempty"`
	product_item_order_line *int
	selectValues            sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderLine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderline.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case orderline.FieldID, orderline.FieldProductItemID, orderline.FieldShopOrderID, orderline.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case orderline.ForeignKeys[0]: // product_item_order_line
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderLine fields.
func (ol *OrderLine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderline.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ol.ID = int(value.Int64)
		case orderline.FieldProductItemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_item_id", values[i])
			} else if value.Valid {
				ol.ProductItemID = int(value.Int64)
			}
		case orderline.FieldShopOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shop_order_id", values[i])
			} else if value.Valid {
				ol.ShopOrderID = int(value.Int64)
			}
		case orderline.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				ol.Quantity = int(value.Int64)
			}
		case orderline.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ol.Price = value.Float64
			}
		case orderline.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_item_order_line", value)
			} else if value.Valid {
				ol.product_item_order_line = new(int)
				*ol.product_item_order_line = int(value.Int64)
			}
		default:
			ol.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderLine.
// This includes values selected through modifiers, order, etc.
func (ol *OrderLine) Value(name string) (ent.Value, error) {
	return ol.selectValues.Get(name)
}

// Update returns a builder for updating this OrderLine.
// Note that you need to call OrderLine.Unwrap() before calling this method if this OrderLine
// was returned from a transaction, and the transaction was committed or rolled back.
func (ol *OrderLine) Update() *OrderLineUpdateOne {
	return NewOrderLineClient(ol.config).UpdateOne(ol)
}

// Unwrap unwraps the OrderLine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ol *OrderLine) Unwrap() *OrderLine {
	_tx, ok := ol.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderLine is not a transactional entity")
	}
	ol.config.driver = _tx.drv
	return ol
}

// String implements the fmt.Stringer.
func (ol *OrderLine) String() string {
	var builder strings.Builder
	builder.WriteString("OrderLine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ol.ID))
	builder.WriteString("product_item_id=")
	builder.WriteString(fmt.Sprintf("%v", ol.ProductItemID))
	builder.WriteString(", ")
	builder.WriteString("shop_order_id=")
	builder.WriteString(fmt.Sprintf("%v", ol.ShopOrderID))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", ol.Quantity))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", ol.Price))
	builder.WriteByte(')')
	return builder.String()
}

// OrderLines is a parsable slice of OrderLine.
type OrderLines []*OrderLine
