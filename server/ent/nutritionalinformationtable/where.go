// Code generated by ent, DO NOT EDIT.

package nutritionalinformationtable

import (
	"healthyshopper/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldLTE(FieldID, id))
}

// Parameter applies equality check predicate on the "parameter" field. It's identical to ParameterEQ.
func Parameter(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldEQ(FieldParameter, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v float64) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldEQ(FieldValue, v))
}

// MeasurementUnit applies equality check predicate on the "measurement_unit" field. It's identical to MeasurementUnitEQ.
func MeasurementUnit(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldEQ(FieldMeasurementUnit, v))
}

// ParameterEQ applies the EQ predicate on the "parameter" field.
func ParameterEQ(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldEQ(FieldParameter, v))
}

// ParameterNEQ applies the NEQ predicate on the "parameter" field.
func ParameterNEQ(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldNEQ(FieldParameter, v))
}

// ParameterIn applies the In predicate on the "parameter" field.
func ParameterIn(vs ...string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldIn(FieldParameter, vs...))
}

// ParameterNotIn applies the NotIn predicate on the "parameter" field.
func ParameterNotIn(vs ...string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldNotIn(FieldParameter, vs...))
}

// ParameterGT applies the GT predicate on the "parameter" field.
func ParameterGT(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldGT(FieldParameter, v))
}

// ParameterGTE applies the GTE predicate on the "parameter" field.
func ParameterGTE(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldGTE(FieldParameter, v))
}

// ParameterLT applies the LT predicate on the "parameter" field.
func ParameterLT(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldLT(FieldParameter, v))
}

// ParameterLTE applies the LTE predicate on the "parameter" field.
func ParameterLTE(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldLTE(FieldParameter, v))
}

// ParameterContains applies the Contains predicate on the "parameter" field.
func ParameterContains(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldContains(FieldParameter, v))
}

// ParameterHasPrefix applies the HasPrefix predicate on the "parameter" field.
func ParameterHasPrefix(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldHasPrefix(FieldParameter, v))
}

// ParameterHasSuffix applies the HasSuffix predicate on the "parameter" field.
func ParameterHasSuffix(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldHasSuffix(FieldParameter, v))
}

// ParameterEqualFold applies the EqualFold predicate on the "parameter" field.
func ParameterEqualFold(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldEqualFold(FieldParameter, v))
}

// ParameterContainsFold applies the ContainsFold predicate on the "parameter" field.
func ParameterContainsFold(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldContainsFold(FieldParameter, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v float64) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v float64) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...float64) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...float64) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v float64) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v float64) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v float64) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v float64) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldLTE(FieldValue, v))
}

// MeasurementUnitEQ applies the EQ predicate on the "measurement_unit" field.
func MeasurementUnitEQ(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldEQ(FieldMeasurementUnit, v))
}

// MeasurementUnitNEQ applies the NEQ predicate on the "measurement_unit" field.
func MeasurementUnitNEQ(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldNEQ(FieldMeasurementUnit, v))
}

// MeasurementUnitIn applies the In predicate on the "measurement_unit" field.
func MeasurementUnitIn(vs ...string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldIn(FieldMeasurementUnit, vs...))
}

// MeasurementUnitNotIn applies the NotIn predicate on the "measurement_unit" field.
func MeasurementUnitNotIn(vs ...string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldNotIn(FieldMeasurementUnit, vs...))
}

// MeasurementUnitGT applies the GT predicate on the "measurement_unit" field.
func MeasurementUnitGT(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldGT(FieldMeasurementUnit, v))
}

// MeasurementUnitGTE applies the GTE predicate on the "measurement_unit" field.
func MeasurementUnitGTE(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldGTE(FieldMeasurementUnit, v))
}

// MeasurementUnitLT applies the LT predicate on the "measurement_unit" field.
func MeasurementUnitLT(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldLT(FieldMeasurementUnit, v))
}

// MeasurementUnitLTE applies the LTE predicate on the "measurement_unit" field.
func MeasurementUnitLTE(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldLTE(FieldMeasurementUnit, v))
}

// MeasurementUnitContains applies the Contains predicate on the "measurement_unit" field.
func MeasurementUnitContains(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldContains(FieldMeasurementUnit, v))
}

// MeasurementUnitHasPrefix applies the HasPrefix predicate on the "measurement_unit" field.
func MeasurementUnitHasPrefix(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldHasPrefix(FieldMeasurementUnit, v))
}

// MeasurementUnitHasSuffix applies the HasSuffix predicate on the "measurement_unit" field.
func MeasurementUnitHasSuffix(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldHasSuffix(FieldMeasurementUnit, v))
}

// MeasurementUnitEqualFold applies the EqualFold predicate on the "measurement_unit" field.
func MeasurementUnitEqualFold(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldEqualFold(FieldMeasurementUnit, v))
}

// MeasurementUnitContainsFold applies the ContainsFold predicate on the "measurement_unit" field.
func MeasurementUnitContainsFold(v string) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(sql.FieldContainsFold(FieldMeasurementUnit, v))
}

// HasNutritionalInformation applies the HasEdge predicate on the "nutritional_information" edge.
func HasNutritionalInformation() predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, NutritionalInformationTable, NutritionalInformationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNutritionalInformationWith applies the HasEdge predicate on the "nutritional_information" edge with a given conditions (other predicates).
func HasNutritionalInformationWith(preds ...predicate.NutritionalInformation) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(func(s *sql.Selector) {
		step := newNutritionalInformationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NutritionalInformationTable) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NutritionalInformationTable) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NutritionalInformationTable) predicate.NutritionalInformationTable {
	return predicate.NutritionalInformationTable(func(s *sql.Selector) {
		p(s.Not())
	})
}
