// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"healthyshopper/ent/nutritionalinformation"
	"healthyshopper/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NutritionalInformationDelete is the builder for deleting a NutritionalInformation entity.
type NutritionalInformationDelete struct {
	config
	hooks    []Hook
	mutation *NutritionalInformationMutation
}

// Where appends a list predicates to the NutritionalInformationDelete builder.
func (nid *NutritionalInformationDelete) Where(ps ...predicate.NutritionalInformation) *NutritionalInformationDelete {
	nid.mutation.Where(ps...)
	return nid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nid *NutritionalInformationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nid.sqlExec, nid.mutation, nid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nid *NutritionalInformationDelete) ExecX(ctx context.Context) int {
	n, err := nid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nid *NutritionalInformationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(nutritionalinformation.Table, sqlgraph.NewFieldSpec(nutritionalinformation.FieldID, field.TypeInt))
	if ps := nid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nid.mutation.done = true
	return affected, err
}

// NutritionalInformationDeleteOne is the builder for deleting a single NutritionalInformation entity.
type NutritionalInformationDeleteOne struct {
	nid *NutritionalInformationDelete
}

// Where appends a list predicates to the NutritionalInformationDelete builder.
func (nido *NutritionalInformationDeleteOne) Where(ps ...predicate.NutritionalInformation) *NutritionalInformationDeleteOne {
	nido.nid.mutation.Where(ps...)
	return nido
}

// Exec executes the deletion query.
func (nido *NutritionalInformationDeleteOne) Exec(ctx context.Context) error {
	n, err := nido.nid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{nutritionalinformation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nido *NutritionalInformationDeleteOne) ExecX(ctx context.Context) {
	if err := nido.Exec(ctx); err != nil {
		panic(err)
	}
}
