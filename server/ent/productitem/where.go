// Code generated by ent, DO NOT EDIT.

package productitem

import (
	"healthyshopper/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLTE(FieldID, id))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldProductID, v))
}

// StockKeepingUnit applies equality check predicate on the "stock_keeping_unit" field. It's identical to StockKeepingUnitEQ.
func StockKeepingUnit(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldStockKeepingUnit, v))
}

// QuantityInStock applies equality check predicate on the "quantity_in_stock" field. It's identical to QuantityInStockEQ.
func QuantityInStock(v int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldQuantityInStock, v))
}

// ProductImage applies equality check predicate on the "product_image" field. It's identical to ProductImageEQ.
func ProductImage(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldProductImage, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float32) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldPrice, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNotIn(FieldProductID, vs...))
}

// StockKeepingUnitEQ applies the EQ predicate on the "stock_keeping_unit" field.
func StockKeepingUnitEQ(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldStockKeepingUnit, v))
}

// StockKeepingUnitNEQ applies the NEQ predicate on the "stock_keeping_unit" field.
func StockKeepingUnitNEQ(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNEQ(FieldStockKeepingUnit, v))
}

// StockKeepingUnitIn applies the In predicate on the "stock_keeping_unit" field.
func StockKeepingUnitIn(vs ...string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldIn(FieldStockKeepingUnit, vs...))
}

// StockKeepingUnitNotIn applies the NotIn predicate on the "stock_keeping_unit" field.
func StockKeepingUnitNotIn(vs ...string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNotIn(FieldStockKeepingUnit, vs...))
}

// StockKeepingUnitGT applies the GT predicate on the "stock_keeping_unit" field.
func StockKeepingUnitGT(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGT(FieldStockKeepingUnit, v))
}

// StockKeepingUnitGTE applies the GTE predicate on the "stock_keeping_unit" field.
func StockKeepingUnitGTE(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGTE(FieldStockKeepingUnit, v))
}

// StockKeepingUnitLT applies the LT predicate on the "stock_keeping_unit" field.
func StockKeepingUnitLT(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLT(FieldStockKeepingUnit, v))
}

// StockKeepingUnitLTE applies the LTE predicate on the "stock_keeping_unit" field.
func StockKeepingUnitLTE(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLTE(FieldStockKeepingUnit, v))
}

// StockKeepingUnitContains applies the Contains predicate on the "stock_keeping_unit" field.
func StockKeepingUnitContains(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldContains(FieldStockKeepingUnit, v))
}

// StockKeepingUnitHasPrefix applies the HasPrefix predicate on the "stock_keeping_unit" field.
func StockKeepingUnitHasPrefix(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldHasPrefix(FieldStockKeepingUnit, v))
}

// StockKeepingUnitHasSuffix applies the HasSuffix predicate on the "stock_keeping_unit" field.
func StockKeepingUnitHasSuffix(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldHasSuffix(FieldStockKeepingUnit, v))
}

// StockKeepingUnitEqualFold applies the EqualFold predicate on the "stock_keeping_unit" field.
func StockKeepingUnitEqualFold(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEqualFold(FieldStockKeepingUnit, v))
}

// StockKeepingUnitContainsFold applies the ContainsFold predicate on the "stock_keeping_unit" field.
func StockKeepingUnitContainsFold(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldContainsFold(FieldStockKeepingUnit, v))
}

// QuantityInStockEQ applies the EQ predicate on the "quantity_in_stock" field.
func QuantityInStockEQ(v int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldQuantityInStock, v))
}

// QuantityInStockNEQ applies the NEQ predicate on the "quantity_in_stock" field.
func QuantityInStockNEQ(v int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNEQ(FieldQuantityInStock, v))
}

// QuantityInStockIn applies the In predicate on the "quantity_in_stock" field.
func QuantityInStockIn(vs ...int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldIn(FieldQuantityInStock, vs...))
}

// QuantityInStockNotIn applies the NotIn predicate on the "quantity_in_stock" field.
func QuantityInStockNotIn(vs ...int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNotIn(FieldQuantityInStock, vs...))
}

// QuantityInStockGT applies the GT predicate on the "quantity_in_stock" field.
func QuantityInStockGT(v int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGT(FieldQuantityInStock, v))
}

// QuantityInStockGTE applies the GTE predicate on the "quantity_in_stock" field.
func QuantityInStockGTE(v int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGTE(FieldQuantityInStock, v))
}

// QuantityInStockLT applies the LT predicate on the "quantity_in_stock" field.
func QuantityInStockLT(v int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLT(FieldQuantityInStock, v))
}

// QuantityInStockLTE applies the LTE predicate on the "quantity_in_stock" field.
func QuantityInStockLTE(v int) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLTE(FieldQuantityInStock, v))
}

// ProductImageEQ applies the EQ predicate on the "product_image" field.
func ProductImageEQ(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldProductImage, v))
}

// ProductImageNEQ applies the NEQ predicate on the "product_image" field.
func ProductImageNEQ(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNEQ(FieldProductImage, v))
}

// ProductImageIn applies the In predicate on the "product_image" field.
func ProductImageIn(vs ...string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldIn(FieldProductImage, vs...))
}

// ProductImageNotIn applies the NotIn predicate on the "product_image" field.
func ProductImageNotIn(vs ...string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNotIn(FieldProductImage, vs...))
}

// ProductImageGT applies the GT predicate on the "product_image" field.
func ProductImageGT(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGT(FieldProductImage, v))
}

// ProductImageGTE applies the GTE predicate on the "product_image" field.
func ProductImageGTE(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGTE(FieldProductImage, v))
}

// ProductImageLT applies the LT predicate on the "product_image" field.
func ProductImageLT(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLT(FieldProductImage, v))
}

// ProductImageLTE applies the LTE predicate on the "product_image" field.
func ProductImageLTE(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLTE(FieldProductImage, v))
}

// ProductImageContains applies the Contains predicate on the "product_image" field.
func ProductImageContains(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldContains(FieldProductImage, v))
}

// ProductImageHasPrefix applies the HasPrefix predicate on the "product_image" field.
func ProductImageHasPrefix(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldHasPrefix(FieldProductImage, v))
}

// ProductImageHasSuffix applies the HasSuffix predicate on the "product_image" field.
func ProductImageHasSuffix(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldHasSuffix(FieldProductImage, v))
}

// ProductImageEqualFold applies the EqualFold predicate on the "product_image" field.
func ProductImageEqualFold(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEqualFold(FieldProductImage, v))
}

// ProductImageContainsFold applies the ContainsFold predicate on the "product_image" field.
func ProductImageContainsFold(v string) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldContainsFold(FieldProductImage, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float32) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float32) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float32) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float32) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float32) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float32) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float32) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float32) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLTE(FieldPrice, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProductItem {
	return predicate.ProductItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.ProductItem {
	return predicate.ProductItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.ProductItem {
	return predicate.ProductItem(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderLine applies the HasEdge predicate on the "order_line" edge.
func HasOrderLine() predicate.ProductItem {
	return predicate.ProductItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderLineTable, OrderLineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderLineWith applies the HasEdge predicate on the "order_line" edge with a given conditions (other predicates).
func HasOrderLineWith(preds ...predicate.OrderLine) predicate.ProductItem {
	return predicate.ProductItem(func(s *sql.Selector) {
		step := newOrderLineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShoppingCartItem applies the HasEdge predicate on the "shopping_cart_item" edge.
func HasShoppingCartItem() predicate.ProductItem {
	return predicate.ProductItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShoppingCartItemTable, ShoppingCartItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShoppingCartItemWith applies the HasEdge predicate on the "shopping_cart_item" edge with a given conditions (other predicates).
func HasShoppingCartItemWith(preds ...predicate.ShoppingCartItem) predicate.ProductItem {
	return predicate.ProductItem(func(s *sql.Selector) {
		step := newShoppingCartItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductItem) predicate.ProductItem {
	return predicate.ProductItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductItem) predicate.ProductItem {
	return predicate.ProductItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductItem) predicate.ProductItem {
	return predicate.ProductItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
