// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"healthyshopper/ent/nutritionalinformationtable"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// NutritionalInformationTable is the model entity for the NutritionalInformationTable schema.
type NutritionalInformationTable struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Parameter holds the value of the "parameter" field.
	Parameter string `json:"parameter,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// MeasurementUnit holds the value of the "measurement_unit" field.
	MeasurementUnit string `json:"measurement_unit,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NutritionalInformationTableQuery when eager-loading is set.
	Edges        NutritionalInformationTableEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NutritionalInformationTableEdges holds the relations/edges for other nodes in the graph.
type NutritionalInformationTableEdges struct {
	// NutritionalInformation holds the value of the nutritional_information edge.
	NutritionalInformation []*NutritionalInformation `json:"nutritional_information,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedNutritionalInformation map[string][]*NutritionalInformation
}

// NutritionalInformationOrErr returns the NutritionalInformation value or an error if the edge
// was not loaded in eager-loading.
func (e NutritionalInformationTableEdges) NutritionalInformationOrErr() ([]*NutritionalInformation, error) {
	if e.loadedTypes[0] {
		return e.NutritionalInformation, nil
	}
	return nil, &NotLoadedError{edge: "nutritional_information"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NutritionalInformationTable) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nutritionalinformationtable.FieldValue:
			values[i] = new(sql.NullFloat64)
		case nutritionalinformationtable.FieldID:
			values[i] = new(sql.NullInt64)
		case nutritionalinformationtable.FieldParameter, nutritionalinformationtable.FieldMeasurementUnit:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NutritionalInformationTable fields.
func (nit *NutritionalInformationTable) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nutritionalinformationtable.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nit.ID = int(value.Int64)
		case nutritionalinformationtable.FieldParameter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parameter", values[i])
			} else if value.Valid {
				nit.Parameter = value.String
			}
		case nutritionalinformationtable.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				nit.Value = value.Float64
			}
		case nutritionalinformationtable.FieldMeasurementUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field measurement_unit", values[i])
			} else if value.Valid {
				nit.MeasurementUnit = value.String
			}
		default:
			nit.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the NutritionalInformationTable.
// This includes values selected through modifiers, order, etc.
func (nit *NutritionalInformationTable) GetValue(name string) (ent.Value, error) {
	return nit.selectValues.Get(name)
}

// QueryNutritionalInformation queries the "nutritional_information" edge of the NutritionalInformationTable entity.
func (nit *NutritionalInformationTable) QueryNutritionalInformation() *NutritionalInformationQuery {
	return NewNutritionalInformationTableClient(nit.config).QueryNutritionalInformation(nit)
}

// Update returns a builder for updating this NutritionalInformationTable.
// Note that you need to call NutritionalInformationTable.Unwrap() before calling this method if this NutritionalInformationTable
// was returned from a transaction, and the transaction was committed or rolled back.
func (nit *NutritionalInformationTable) Update() *NutritionalInformationTableUpdateOne {
	return NewNutritionalInformationTableClient(nit.config).UpdateOne(nit)
}

// Unwrap unwraps the NutritionalInformationTable entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nit *NutritionalInformationTable) Unwrap() *NutritionalInformationTable {
	_tx, ok := nit.config.driver.(*txDriver)
	if !ok {
		panic("ent: NutritionalInformationTable is not a transactional entity")
	}
	nit.config.driver = _tx.drv
	return nit
}

// String implements the fmt.Stringer.
func (nit *NutritionalInformationTable) String() string {
	var builder strings.Builder
	builder.WriteString("NutritionalInformationTable(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nit.ID))
	builder.WriteString("parameter=")
	builder.WriteString(nit.Parameter)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", nit.Value))
	builder.WriteString(", ")
	builder.WriteString("measurement_unit=")
	builder.WriteString(nit.MeasurementUnit)
	builder.WriteByte(')')
	return builder.String()
}

// NamedNutritionalInformation returns the NutritionalInformation named value or an error if the edge was not
// loaded in eager-loading with this name.
func (nit *NutritionalInformationTable) NamedNutritionalInformation(name string) ([]*NutritionalInformation, error) {
	if nit.Edges.namedNutritionalInformation == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := nit.Edges.namedNutritionalInformation[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (nit *NutritionalInformationTable) appendNamedNutritionalInformation(name string, edges ...*NutritionalInformation) {
	if nit.Edges.namedNutritionalInformation == nil {
		nit.Edges.namedNutritionalInformation = make(map[string][]*NutritionalInformation)
	}
	if len(edges) == 0 {
		nit.Edges.namedNutritionalInformation[name] = []*NutritionalInformation{}
	} else {
		nit.Edges.namedNutritionalInformation[name] = append(nit.Edges.namedNutritionalInformation[name], edges...)
	}
}

// NutritionalInformationTables is a parsable slice of NutritionalInformationTable.
type NutritionalInformationTables []*NutritionalInformationTable
