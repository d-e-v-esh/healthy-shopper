// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/address"
	"healthyshopper/ent/predicate"
	"healthyshopper/ent/user"
	"healthyshopper/ent/useraddress"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserAddressUpdate is the builder for updating UserAddress entities.
type UserAddressUpdate struct {
	config
	hooks    []Hook
	mutation *UserAddressMutation
}

// Where appends a list predicates to the UserAddressUpdate builder.
func (uau *UserAddressUpdate) Where(ps ...predicate.UserAddress) *UserAddressUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetUserID sets the "user_id" field.
func (uau *UserAddressUpdate) SetUserID(i int) *UserAddressUpdate {
	uau.mutation.SetUserID(i)
	return uau
}

// SetAddressID sets the "address_id" field.
func (uau *UserAddressUpdate) SetAddressID(i int) *UserAddressUpdate {
	uau.mutation.SetAddressID(i)
	return uau
}

// SetIsDefault sets the "is_default" field.
func (uau *UserAddressUpdate) SetIsDefault(b bool) *UserAddressUpdate {
	uau.mutation.SetIsDefault(b)
	return uau
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (uau *UserAddressUpdate) SetNillableIsDefault(b *bool) *UserAddressUpdate {
	if b != nil {
		uau.SetIsDefault(*b)
	}
	return uau
}

// SetUser sets the "user" edge to the User entity.
func (uau *UserAddressUpdate) SetUser(u *User) *UserAddressUpdate {
	return uau.SetUserID(u.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (uau *UserAddressUpdate) SetAddress(a *Address) *UserAddressUpdate {
	return uau.SetAddressID(a.ID)
}

// Mutation returns the UserAddressMutation object of the builder.
func (uau *UserAddressUpdate) Mutation() *UserAddressMutation {
	return uau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uau *UserAddressUpdate) ClearUser() *UserAddressUpdate {
	uau.mutation.ClearUser()
	return uau
}

// ClearAddress clears the "address" edge to the Address entity.
func (uau *UserAddressUpdate) ClearAddress() *UserAddressUpdate {
	uau.mutation.ClearAddress()
	return uau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserAddressUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uau.sqlSave, uau.mutation, uau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserAddressUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserAddressUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uau *UserAddressUpdate) check() error {
	if _, ok := uau.mutation.UserID(); uau.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserAddress.user"`)
	}
	if _, ok := uau.mutation.AddressID(); uau.mutation.AddressCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserAddress.address"`)
	}
	return nil
}

func (uau *UserAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(useraddress.Table, useraddress.Columns, sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeInt))
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.IsDefault(); ok {
		_spec.SetField(useraddress.FieldIsDefault, field.TypeBool, value)
	}
	if uau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraddress.UserTable,
			Columns: []string{useraddress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraddress.UserTable,
			Columns: []string{useraddress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uau.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useraddress.AddressTable,
			Columns: []string{useraddress.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useraddress.AddressTable,
			Columns: []string{useraddress.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uau.mutation.done = true
	return n, nil
}

// UserAddressUpdateOne is the builder for updating a single UserAddress entity.
type UserAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAddressMutation
}

// SetUserID sets the "user_id" field.
func (uauo *UserAddressUpdateOne) SetUserID(i int) *UserAddressUpdateOne {
	uauo.mutation.SetUserID(i)
	return uauo
}

// SetAddressID sets the "address_id" field.
func (uauo *UserAddressUpdateOne) SetAddressID(i int) *UserAddressUpdateOne {
	uauo.mutation.SetAddressID(i)
	return uauo
}

// SetIsDefault sets the "is_default" field.
func (uauo *UserAddressUpdateOne) SetIsDefault(b bool) *UserAddressUpdateOne {
	uauo.mutation.SetIsDefault(b)
	return uauo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (uauo *UserAddressUpdateOne) SetNillableIsDefault(b *bool) *UserAddressUpdateOne {
	if b != nil {
		uauo.SetIsDefault(*b)
	}
	return uauo
}

// SetUser sets the "user" edge to the User entity.
func (uauo *UserAddressUpdateOne) SetUser(u *User) *UserAddressUpdateOne {
	return uauo.SetUserID(u.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (uauo *UserAddressUpdateOne) SetAddress(a *Address) *UserAddressUpdateOne {
	return uauo.SetAddressID(a.ID)
}

// Mutation returns the UserAddressMutation object of the builder.
func (uauo *UserAddressUpdateOne) Mutation() *UserAddressMutation {
	return uauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uauo *UserAddressUpdateOne) ClearUser() *UserAddressUpdateOne {
	uauo.mutation.ClearUser()
	return uauo
}

// ClearAddress clears the "address" edge to the Address entity.
func (uauo *UserAddressUpdateOne) ClearAddress() *UserAddressUpdateOne {
	uauo.mutation.ClearAddress()
	return uauo
}

// Where appends a list predicates to the UserAddressUpdate builder.
func (uauo *UserAddressUpdateOne) Where(ps ...predicate.UserAddress) *UserAddressUpdateOne {
	uauo.mutation.Where(ps...)
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserAddressUpdateOne) Select(field string, fields ...string) *UserAddressUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UserAddress entity.
func (uauo *UserAddressUpdateOne) Save(ctx context.Context) (*UserAddress, error) {
	return withHooks(ctx, uauo.sqlSave, uauo.mutation, uauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserAddressUpdateOne) SaveX(ctx context.Context) *UserAddress {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserAddressUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uauo *UserAddressUpdateOne) check() error {
	if _, ok := uauo.mutation.UserID(); uauo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserAddress.user"`)
	}
	if _, ok := uauo.mutation.AddressID(); uauo.mutation.AddressCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserAddress.address"`)
	}
	return nil
}

func (uauo *UserAddressUpdateOne) sqlSave(ctx context.Context) (_node *UserAddress, err error) {
	if err := uauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(useraddress.Table, useraddress.Columns, sqlgraph.NewFieldSpec(useraddress.FieldID, field.TypeInt))
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useraddress.FieldID)
		for _, f := range fields {
			if !useraddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useraddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.IsDefault(); ok {
		_spec.SetField(useraddress.FieldIsDefault, field.TypeBool, value)
	}
	if uauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraddress.UserTable,
			Columns: []string{useraddress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraddress.UserTable,
			Columns: []string{useraddress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uauo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useraddress.AddressTable,
			Columns: []string{useraddress.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useraddress.AddressTable,
			Columns: []string{useraddress.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserAddress{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uauo.mutation.done = true
	return _node, nil
}
