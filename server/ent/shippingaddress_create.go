// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/shippingaddress"
	"healthyshopper/ent/shoporder"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShippingAddressCreate is the builder for creating a ShippingAddress entity.
type ShippingAddressCreate struct {
	config
	mutation *ShippingAddressMutation
	hooks    []Hook
}

// SetPhoneNumber sets the "phone_number" field.
func (sac *ShippingAddressCreate) SetPhoneNumber(s string) *ShippingAddressCreate {
	sac.mutation.SetPhoneNumber(s)
	return sac
}

// SetAddressLine1 sets the "address_line1" field.
func (sac *ShippingAddressCreate) SetAddressLine1(s string) *ShippingAddressCreate {
	sac.mutation.SetAddressLine1(s)
	return sac
}

// SetAddressLine2 sets the "address_line2" field.
func (sac *ShippingAddressCreate) SetAddressLine2(s string) *ShippingAddressCreate {
	sac.mutation.SetAddressLine2(s)
	return sac
}

// SetNillableAddressLine2 sets the "address_line2" field if the given value is not nil.
func (sac *ShippingAddressCreate) SetNillableAddressLine2(s *string) *ShippingAddressCreate {
	if s != nil {
		sac.SetAddressLine2(*s)
	}
	return sac
}

// SetCity sets the "city" field.
func (sac *ShippingAddressCreate) SetCity(s string) *ShippingAddressCreate {
	sac.mutation.SetCity(s)
	return sac
}

// SetState sets the "state" field.
func (sac *ShippingAddressCreate) SetState(s string) *ShippingAddressCreate {
	sac.mutation.SetState(s)
	return sac
}

// SetCountry sets the "country" field.
func (sac *ShippingAddressCreate) SetCountry(s string) *ShippingAddressCreate {
	sac.mutation.SetCountry(s)
	return sac
}

// SetPostalCode sets the "postal_code" field.
func (sac *ShippingAddressCreate) SetPostalCode(s string) *ShippingAddressCreate {
	sac.mutation.SetPostalCode(s)
	return sac
}

// AddShopOrderIDs adds the "shop_order" edge to the ShopOrder entity by IDs.
func (sac *ShippingAddressCreate) AddShopOrderIDs(ids ...int) *ShippingAddressCreate {
	sac.mutation.AddShopOrderIDs(ids...)
	return sac
}

// AddShopOrder adds the "shop_order" edges to the ShopOrder entity.
func (sac *ShippingAddressCreate) AddShopOrder(s ...*ShopOrder) *ShippingAddressCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sac.AddShopOrderIDs(ids...)
}

// Mutation returns the ShippingAddressMutation object of the builder.
func (sac *ShippingAddressCreate) Mutation() *ShippingAddressMutation {
	return sac.mutation
}

// Save creates the ShippingAddress in the database.
func (sac *ShippingAddressCreate) Save(ctx context.Context) (*ShippingAddress, error) {
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *ShippingAddressCreate) SaveX(ctx context.Context) *ShippingAddress {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *ShippingAddressCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *ShippingAddressCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *ShippingAddressCreate) check() error {
	if _, ok := sac.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "ShippingAddress.phone_number"`)}
	}
	if v, ok := sac.mutation.PhoneNumber(); ok {
		if err := shippingaddress.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "ShippingAddress.phone_number": %w`, err)}
		}
	}
	if _, ok := sac.mutation.AddressLine1(); !ok {
		return &ValidationError{Name: "address_line1", err: errors.New(`ent: missing required field "ShippingAddress.address_line1"`)}
	}
	if v, ok := sac.mutation.AddressLine1(); ok {
		if err := shippingaddress.AddressLine1Validator(v); err != nil {
			return &ValidationError{Name: "address_line1", err: fmt.Errorf(`ent: validator failed for field "ShippingAddress.address_line1": %w`, err)}
		}
	}
	if v, ok := sac.mutation.AddressLine2(); ok {
		if err := shippingaddress.AddressLine2Validator(v); err != nil {
			return &ValidationError{Name: "address_line2", err: fmt.Errorf(`ent: validator failed for field "ShippingAddress.address_line2": %w`, err)}
		}
	}
	if _, ok := sac.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "ShippingAddress.city"`)}
	}
	if v, ok := sac.mutation.City(); ok {
		if err := shippingaddress.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "ShippingAddress.city": %w`, err)}
		}
	}
	if _, ok := sac.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "ShippingAddress.state"`)}
	}
	if v, ok := sac.mutation.State(); ok {
		if err := shippingaddress.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "ShippingAddress.state": %w`, err)}
		}
	}
	if _, ok := sac.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "ShippingAddress.country"`)}
	}
	if v, ok := sac.mutation.Country(); ok {
		if err := shippingaddress.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "ShippingAddress.country": %w`, err)}
		}
	}
	if _, ok := sac.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New(`ent: missing required field "ShippingAddress.postal_code"`)}
	}
	if v, ok := sac.mutation.PostalCode(); ok {
		if err := shippingaddress.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "ShippingAddress.postal_code": %w`, err)}
		}
	}
	return nil
}

func (sac *ShippingAddressCreate) sqlSave(ctx context.Context) (*ShippingAddress, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *ShippingAddressCreate) createSpec() (*ShippingAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &ShippingAddress{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(shippingaddress.Table, sqlgraph.NewFieldSpec(shippingaddress.FieldID, field.TypeInt))
	)
	if value, ok := sac.mutation.PhoneNumber(); ok {
		_spec.SetField(shippingaddress.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := sac.mutation.AddressLine1(); ok {
		_spec.SetField(shippingaddress.FieldAddressLine1, field.TypeString, value)
		_node.AddressLine1 = value
	}
	if value, ok := sac.mutation.AddressLine2(); ok {
		_spec.SetField(shippingaddress.FieldAddressLine2, field.TypeString, value)
		_node.AddressLine2 = value
	}
	if value, ok := sac.mutation.City(); ok {
		_spec.SetField(shippingaddress.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := sac.mutation.State(); ok {
		_spec.SetField(shippingaddress.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := sac.mutation.Country(); ok {
		_spec.SetField(shippingaddress.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := sac.mutation.PostalCode(); ok {
		_spec.SetField(shippingaddress.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if nodes := sac.mutation.ShopOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shippingaddress.ShopOrderTable,
			Columns: []string{shippingaddress.ShopOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoporder.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShippingAddressCreateBulk is the builder for creating many ShippingAddress entities in bulk.
type ShippingAddressCreateBulk struct {
	config
	builders []*ShippingAddressCreate
}

// Save creates the ShippingAddress entities in the database.
func (sacb *ShippingAddressCreateBulk) Save(ctx context.Context) ([]*ShippingAddress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*ShippingAddress, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShippingAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *ShippingAddressCreateBulk) SaveX(ctx context.Context) []*ShippingAddress {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *ShippingAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *ShippingAddressCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
