// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/predicate"
	"healthyshopper/ent/product"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetProductID sets the "product_id" field.
func (pu *ProductUpdate) SetProductID(i int) *ProductUpdate {
	pu.mutation.ResetProductID()
	pu.mutation.SetProductID(i)
	return pu
}

// AddProductID adds i to the "product_id" field.
func (pu *ProductUpdate) AddProductID(i int) *ProductUpdate {
	pu.mutation.AddProductID(i)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetProductImage sets the "product_image" field.
func (pu *ProductUpdate) SetProductImage(s string) *ProductUpdate {
	pu.mutation.SetProductImage(s)
	return pu
}

// SetProductCategoryID sets the "product_category_id" field.
func (pu *ProductUpdate) SetProductCategoryID(i int) *ProductUpdate {
	pu.mutation.ResetProductCategoryID()
	pu.mutation.SetProductCategoryID(i)
	return pu
}

// AddProductCategoryID adds i to the "product_category_id" field.
func (pu *ProductUpdate) AddProductCategoryID(i int) *ProductUpdate {
	pu.mutation.AddProductCategoryID(i)
	return pu
}

// SetIngredientsListID sets the "ingredients_list_id" field.
func (pu *ProductUpdate) SetIngredientsListID(i int) *ProductUpdate {
	pu.mutation.ResetIngredientsListID()
	pu.mutation.SetIngredientsListID(i)
	return pu
}

// AddIngredientsListID adds i to the "ingredients_list_id" field.
func (pu *ProductUpdate) AddIngredientsListID(i int) *ProductUpdate {
	pu.mutation.AddIngredientsListID(i)
	return pu
}

// SetNutritionalInformationID sets the "nutritional_information_id" field.
func (pu *ProductUpdate) SetNutritionalInformationID(i int) *ProductUpdate {
	pu.mutation.ResetNutritionalInformationID()
	pu.mutation.SetNutritionalInformationID(i)
	return pu
}

// AddNutritionalInformationID adds i to the "nutritional_information_id" field.
func (pu *ProductUpdate) AddNutritionalInformationID(i int) *ProductUpdate {
	pu.mutation.AddNutritionalInformationID(i)
	return pu
}

// SetPromotionID sets the "promotion_id" field.
func (pu *ProductUpdate) SetPromotionID(i int) *ProductUpdate {
	pu.mutation.ResetPromotionID()
	pu.mutation.SetPromotionID(i)
	return pu
}

// AddPromotionID adds i to the "promotion_id" field.
func (pu *ProductUpdate) AddPromotionID(i int) *ProductUpdate {
	pu.mutation.AddPromotionID(i)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProductUpdate) SetCreatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableUpdatedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *ProductUpdate) ClearUpdatedAt() *ProductUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ProductImage(); ok {
		if err := product.ProductImageValidator(v); err != nil {
			return &ValidationError{Name: "product_image", err: fmt.Errorf(`ent: validator failed for field "Product.product_image": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ProductCategoryID(); ok {
		if err := product.ProductCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "product_category_id", err: fmt.Errorf(`ent: validator failed for field "Product.product_category_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.IngredientsListID(); ok {
		if err := product.IngredientsListIDValidator(v); err != nil {
			return &ValidationError{Name: "ingredients_list_id", err: fmt.Errorf(`ent: validator failed for field "Product.ingredients_list_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.NutritionalInformationID(); ok {
		if err := product.NutritionalInformationIDValidator(v); err != nil {
			return &ValidationError{Name: "nutritional_information_id", err: fmt.Errorf(`ent: validator failed for field "Product.nutritional_information_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PromotionID(); ok {
		if err := product.PromotionIDValidator(v); err != nil {
			return &ValidationError{Name: "promotion_id", err: fmt.Errorf(`ent: validator failed for field "Product.promotion_id": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.ProductID(); ok {
		_spec.SetField(product.FieldProductID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedProductID(); ok {
		_spec.AddField(product.FieldProductID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProductImage(); ok {
		_spec.SetField(product.FieldProductImage, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProductCategoryID(); ok {
		_spec.SetField(product.FieldProductCategoryID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedProductCategoryID(); ok {
		_spec.AddField(product.FieldProductCategoryID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.IngredientsListID(); ok {
		_spec.SetField(product.FieldIngredientsListID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedIngredientsListID(); ok {
		_spec.AddField(product.FieldIngredientsListID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.NutritionalInformationID(); ok {
		_spec.SetField(product.FieldNutritionalInformationID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedNutritionalInformationID(); ok {
		_spec.AddField(product.FieldNutritionalInformationID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.PromotionID(); ok {
		_spec.SetField(product.FieldPromotionID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPromotionID(); ok {
		_spec.AddField(product.FieldPromotionID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(product.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetProductID sets the "product_id" field.
func (puo *ProductUpdateOne) SetProductID(i int) *ProductUpdateOne {
	puo.mutation.ResetProductID()
	puo.mutation.SetProductID(i)
	return puo
}

// AddProductID adds i to the "product_id" field.
func (puo *ProductUpdateOne) AddProductID(i int) *ProductUpdateOne {
	puo.mutation.AddProductID(i)
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetProductImage sets the "product_image" field.
func (puo *ProductUpdateOne) SetProductImage(s string) *ProductUpdateOne {
	puo.mutation.SetProductImage(s)
	return puo
}

// SetProductCategoryID sets the "product_category_id" field.
func (puo *ProductUpdateOne) SetProductCategoryID(i int) *ProductUpdateOne {
	puo.mutation.ResetProductCategoryID()
	puo.mutation.SetProductCategoryID(i)
	return puo
}

// AddProductCategoryID adds i to the "product_category_id" field.
func (puo *ProductUpdateOne) AddProductCategoryID(i int) *ProductUpdateOne {
	puo.mutation.AddProductCategoryID(i)
	return puo
}

// SetIngredientsListID sets the "ingredients_list_id" field.
func (puo *ProductUpdateOne) SetIngredientsListID(i int) *ProductUpdateOne {
	puo.mutation.ResetIngredientsListID()
	puo.mutation.SetIngredientsListID(i)
	return puo
}

// AddIngredientsListID adds i to the "ingredients_list_id" field.
func (puo *ProductUpdateOne) AddIngredientsListID(i int) *ProductUpdateOne {
	puo.mutation.AddIngredientsListID(i)
	return puo
}

// SetNutritionalInformationID sets the "nutritional_information_id" field.
func (puo *ProductUpdateOne) SetNutritionalInformationID(i int) *ProductUpdateOne {
	puo.mutation.ResetNutritionalInformationID()
	puo.mutation.SetNutritionalInformationID(i)
	return puo
}

// AddNutritionalInformationID adds i to the "nutritional_information_id" field.
func (puo *ProductUpdateOne) AddNutritionalInformationID(i int) *ProductUpdateOne {
	puo.mutation.AddNutritionalInformationID(i)
	return puo
}

// SetPromotionID sets the "promotion_id" field.
func (puo *ProductUpdateOne) SetPromotionID(i int) *ProductUpdateOne {
	puo.mutation.ResetPromotionID()
	puo.mutation.SetPromotionID(i)
	return puo
}

// AddPromotionID adds i to the "promotion_id" field.
func (puo *ProductUpdateOne) AddPromotionID(i int) *ProductUpdateOne {
	puo.mutation.AddPromotionID(i)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProductUpdateOne) SetCreatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *ProductUpdateOne) ClearUpdatedAt() *ProductUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ProductImage(); ok {
		if err := product.ProductImageValidator(v); err != nil {
			return &ValidationError{Name: "product_image", err: fmt.Errorf(`ent: validator failed for field "Product.product_image": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ProductCategoryID(); ok {
		if err := product.ProductCategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "product_category_id", err: fmt.Errorf(`ent: validator failed for field "Product.product_category_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.IngredientsListID(); ok {
		if err := product.IngredientsListIDValidator(v); err != nil {
			return &ValidationError{Name: "ingredients_list_id", err: fmt.Errorf(`ent: validator failed for field "Product.ingredients_list_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.NutritionalInformationID(); ok {
		if err := product.NutritionalInformationIDValidator(v); err != nil {
			return &ValidationError{Name: "nutritional_information_id", err: fmt.Errorf(`ent: validator failed for field "Product.nutritional_information_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PromotionID(); ok {
		if err := product.PromotionIDValidator(v); err != nil {
			return &ValidationError{Name: "promotion_id", err: fmt.Errorf(`ent: validator failed for field "Product.promotion_id": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.ProductID(); ok {
		_spec.SetField(product.FieldProductID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedProductID(); ok {
		_spec.AddField(product.FieldProductID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProductImage(); ok {
		_spec.SetField(product.FieldProductImage, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProductCategoryID(); ok {
		_spec.SetField(product.FieldProductCategoryID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedProductCategoryID(); ok {
		_spec.AddField(product.FieldProductCategoryID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.IngredientsListID(); ok {
		_spec.SetField(product.FieldIngredientsListID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedIngredientsListID(); ok {
		_spec.AddField(product.FieldIngredientsListID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.NutritionalInformationID(); ok {
		_spec.SetField(product.FieldNutritionalInformationID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedNutritionalInformationID(); ok {
		_spec.AddField(product.FieldNutritionalInformationID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.PromotionID(); ok {
		_spec.SetField(product.FieldPromotionID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPromotionID(); ok {
		_spec.AddField(product.FieldPromotionID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(product.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
