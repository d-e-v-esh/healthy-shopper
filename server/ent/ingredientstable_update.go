// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/ingredientstable"
	"healthyshopper/ent/predicate"
	"healthyshopper/ent/product"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IngredientsTableUpdate is the builder for updating IngredientsTable entities.
type IngredientsTableUpdate struct {
	config
	hooks    []Hook
	mutation *IngredientsTableMutation
}

// Where appends a list predicates to the IngredientsTableUpdate builder.
func (itu *IngredientsTableUpdate) Where(ps ...predicate.IngredientsTable) *IngredientsTableUpdate {
	itu.mutation.Where(ps...)
	return itu
}

// SetName sets the "name" field.
func (itu *IngredientsTableUpdate) SetName(s string) *IngredientsTableUpdate {
	itu.mutation.SetName(s)
	return itu
}

// SetDescription sets the "description" field.
func (itu *IngredientsTableUpdate) SetDescription(s string) *IngredientsTableUpdate {
	itu.mutation.SetDescription(s)
	return itu
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (itu *IngredientsTableUpdate) AddProductIDs(ids ...int) *IngredientsTableUpdate {
	itu.mutation.AddProductIDs(ids...)
	return itu
}

// AddProduct adds the "product" edges to the Product entity.
func (itu *IngredientsTableUpdate) AddProduct(p ...*Product) *IngredientsTableUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return itu.AddProductIDs(ids...)
}

// Mutation returns the IngredientsTableMutation object of the builder.
func (itu *IngredientsTableUpdate) Mutation() *IngredientsTableMutation {
	return itu.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (itu *IngredientsTableUpdate) ClearProduct() *IngredientsTableUpdate {
	itu.mutation.ClearProduct()
	return itu
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (itu *IngredientsTableUpdate) RemoveProductIDs(ids ...int) *IngredientsTableUpdate {
	itu.mutation.RemoveProductIDs(ids...)
	return itu
}

// RemoveProduct removes "product" edges to Product entities.
func (itu *IngredientsTableUpdate) RemoveProduct(p ...*Product) *IngredientsTableUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return itu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *IngredientsTableUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, itu.sqlSave, itu.mutation, itu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itu *IngredientsTableUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *IngredientsTableUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *IngredientsTableUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itu *IngredientsTableUpdate) check() error {
	if v, ok := itu.mutation.Name(); ok {
		if err := ingredientstable.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "IngredientsTable.name": %w`, err)}
		}
	}
	if v, ok := itu.mutation.Description(); ok {
		if err := ingredientstable.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "IngredientsTable.description": %w`, err)}
		}
	}
	return nil
}

func (itu *IngredientsTableUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := itu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ingredientstable.Table, ingredientstable.Columns, sqlgraph.NewFieldSpec(ingredientstable.FieldID, field.TypeInt))
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.Name(); ok {
		_spec.SetField(ingredientstable.FieldName, field.TypeString, value)
	}
	if value, ok := itu.mutation.Description(); ok {
		_spec.SetField(ingredientstable.FieldDescription, field.TypeString, value)
	}
	if itu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredientstable.ProductTable,
			Columns: []string{ingredientstable.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.RemovedProductIDs(); len(nodes) > 0 && !itu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredientstable.ProductTable,
			Columns: []string{ingredientstable.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredientstable.ProductTable,
			Columns: []string{ingredientstable.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingredientstable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	itu.mutation.done = true
	return n, nil
}

// IngredientsTableUpdateOne is the builder for updating a single IngredientsTable entity.
type IngredientsTableUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IngredientsTableMutation
}

// SetName sets the "name" field.
func (ituo *IngredientsTableUpdateOne) SetName(s string) *IngredientsTableUpdateOne {
	ituo.mutation.SetName(s)
	return ituo
}

// SetDescription sets the "description" field.
func (ituo *IngredientsTableUpdateOne) SetDescription(s string) *IngredientsTableUpdateOne {
	ituo.mutation.SetDescription(s)
	return ituo
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (ituo *IngredientsTableUpdateOne) AddProductIDs(ids ...int) *IngredientsTableUpdateOne {
	ituo.mutation.AddProductIDs(ids...)
	return ituo
}

// AddProduct adds the "product" edges to the Product entity.
func (ituo *IngredientsTableUpdateOne) AddProduct(p ...*Product) *IngredientsTableUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ituo.AddProductIDs(ids...)
}

// Mutation returns the IngredientsTableMutation object of the builder.
func (ituo *IngredientsTableUpdateOne) Mutation() *IngredientsTableMutation {
	return ituo.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (ituo *IngredientsTableUpdateOne) ClearProduct() *IngredientsTableUpdateOne {
	ituo.mutation.ClearProduct()
	return ituo
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (ituo *IngredientsTableUpdateOne) RemoveProductIDs(ids ...int) *IngredientsTableUpdateOne {
	ituo.mutation.RemoveProductIDs(ids...)
	return ituo
}

// RemoveProduct removes "product" edges to Product entities.
func (ituo *IngredientsTableUpdateOne) RemoveProduct(p ...*Product) *IngredientsTableUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ituo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the IngredientsTableUpdate builder.
func (ituo *IngredientsTableUpdateOne) Where(ps ...predicate.IngredientsTable) *IngredientsTableUpdateOne {
	ituo.mutation.Where(ps...)
	return ituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *IngredientsTableUpdateOne) Select(field string, fields ...string) *IngredientsTableUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated IngredientsTable entity.
func (ituo *IngredientsTableUpdateOne) Save(ctx context.Context) (*IngredientsTable, error) {
	return withHooks(ctx, ituo.sqlSave, ituo.mutation, ituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *IngredientsTableUpdateOne) SaveX(ctx context.Context) *IngredientsTable {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *IngredientsTableUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *IngredientsTableUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ituo *IngredientsTableUpdateOne) check() error {
	if v, ok := ituo.mutation.Name(); ok {
		if err := ingredientstable.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "IngredientsTable.name": %w`, err)}
		}
	}
	if v, ok := ituo.mutation.Description(); ok {
		if err := ingredientstable.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "IngredientsTable.description": %w`, err)}
		}
	}
	return nil
}

func (ituo *IngredientsTableUpdateOne) sqlSave(ctx context.Context) (_node *IngredientsTable, err error) {
	if err := ituo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ingredientstable.Table, ingredientstable.Columns, sqlgraph.NewFieldSpec(ingredientstable.FieldID, field.TypeInt))
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IngredientsTable.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ingredientstable.FieldID)
		for _, f := range fields {
			if !ingredientstable.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ingredientstable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.Name(); ok {
		_spec.SetField(ingredientstable.FieldName, field.TypeString, value)
	}
	if value, ok := ituo.mutation.Description(); ok {
		_spec.SetField(ingredientstable.FieldDescription, field.TypeString, value)
	}
	if ituo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredientstable.ProductTable,
			Columns: []string{ingredientstable.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.RemovedProductIDs(); len(nodes) > 0 && !ituo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredientstable.ProductTable,
			Columns: []string{ingredientstable.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ingredientstable.ProductTable,
			Columns: []string{ingredientstable.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IngredientsTable{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingredientstable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ituo.mutation.done = true
	return _node, nil
}
