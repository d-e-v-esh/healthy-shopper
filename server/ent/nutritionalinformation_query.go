// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"healthyshopper/ent/nutritionalinformation"
	"healthyshopper/ent/nutritionalinformationtable"
	"healthyshopper/ent/predicate"
	"healthyshopper/ent/product"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NutritionalInformationQuery is the builder for querying NutritionalInformation entities.
type NutritionalInformationQuery struct {
	config
	ctx                             *QueryContext
	order                           []nutritionalinformation.OrderOption
	inters                          []Interceptor
	predicates                      []predicate.NutritionalInformation
	withProduct                     *ProductQuery
	withNutritionalInformationTable *NutritionalInformationTableQuery
	modifiers                       []func(*sql.Selector)
	loadTotal                       []func(context.Context, []*NutritionalInformation) error
	withNamedProduct                map[string]*ProductQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NutritionalInformationQuery builder.
func (niq *NutritionalInformationQuery) Where(ps ...predicate.NutritionalInformation) *NutritionalInformationQuery {
	niq.predicates = append(niq.predicates, ps...)
	return niq
}

// Limit the number of records to be returned by this query.
func (niq *NutritionalInformationQuery) Limit(limit int) *NutritionalInformationQuery {
	niq.ctx.Limit = &limit
	return niq
}

// Offset to start from.
func (niq *NutritionalInformationQuery) Offset(offset int) *NutritionalInformationQuery {
	niq.ctx.Offset = &offset
	return niq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (niq *NutritionalInformationQuery) Unique(unique bool) *NutritionalInformationQuery {
	niq.ctx.Unique = &unique
	return niq
}

// Order specifies how the records should be ordered.
func (niq *NutritionalInformationQuery) Order(o ...nutritionalinformation.OrderOption) *NutritionalInformationQuery {
	niq.order = append(niq.order, o...)
	return niq
}

// QueryProduct chains the current query on the "product" edge.
func (niq *NutritionalInformationQuery) QueryProduct() *ProductQuery {
	query := (&ProductClient{config: niq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := niq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := niq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(nutritionalinformation.Table, nutritionalinformation.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, nutritionalinformation.ProductTable, nutritionalinformation.ProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(niq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNutritionalInformationTable chains the current query on the "nutritional_information_table" edge.
func (niq *NutritionalInformationQuery) QueryNutritionalInformationTable() *NutritionalInformationTableQuery {
	query := (&NutritionalInformationTableClient{config: niq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := niq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := niq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(nutritionalinformation.Table, nutritionalinformation.FieldID, selector),
			sqlgraph.To(nutritionalinformationtable.Table, nutritionalinformationtable.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, nutritionalinformation.NutritionalInformationTableTable, nutritionalinformation.NutritionalInformationTableColumn),
		)
		fromU = sqlgraph.SetNeighbors(niq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NutritionalInformation entity from the query.
// Returns a *NotFoundError when no NutritionalInformation was found.
func (niq *NutritionalInformationQuery) First(ctx context.Context) (*NutritionalInformation, error) {
	nodes, err := niq.Limit(1).All(setContextOp(ctx, niq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{nutritionalinformation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (niq *NutritionalInformationQuery) FirstX(ctx context.Context) *NutritionalInformation {
	node, err := niq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NutritionalInformation ID from the query.
// Returns a *NotFoundError when no NutritionalInformation ID was found.
func (niq *NutritionalInformationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = niq.Limit(1).IDs(setContextOp(ctx, niq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{nutritionalinformation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (niq *NutritionalInformationQuery) FirstIDX(ctx context.Context) int {
	id, err := niq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NutritionalInformation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NutritionalInformation entity is found.
// Returns a *NotFoundError when no NutritionalInformation entities are found.
func (niq *NutritionalInformationQuery) Only(ctx context.Context) (*NutritionalInformation, error) {
	nodes, err := niq.Limit(2).All(setContextOp(ctx, niq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{nutritionalinformation.Label}
	default:
		return nil, &NotSingularError{nutritionalinformation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (niq *NutritionalInformationQuery) OnlyX(ctx context.Context) *NutritionalInformation {
	node, err := niq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NutritionalInformation ID in the query.
// Returns a *NotSingularError when more than one NutritionalInformation ID is found.
// Returns a *NotFoundError when no entities are found.
func (niq *NutritionalInformationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = niq.Limit(2).IDs(setContextOp(ctx, niq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{nutritionalinformation.Label}
	default:
		err = &NotSingularError{nutritionalinformation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (niq *NutritionalInformationQuery) OnlyIDX(ctx context.Context) int {
	id, err := niq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NutritionalInformations.
func (niq *NutritionalInformationQuery) All(ctx context.Context) ([]*NutritionalInformation, error) {
	ctx = setContextOp(ctx, niq.ctx, "All")
	if err := niq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NutritionalInformation, *NutritionalInformationQuery]()
	return withInterceptors[[]*NutritionalInformation](ctx, niq, qr, niq.inters)
}

// AllX is like All, but panics if an error occurs.
func (niq *NutritionalInformationQuery) AllX(ctx context.Context) []*NutritionalInformation {
	nodes, err := niq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NutritionalInformation IDs.
func (niq *NutritionalInformationQuery) IDs(ctx context.Context) (ids []int, err error) {
	if niq.ctx.Unique == nil && niq.path != nil {
		niq.Unique(true)
	}
	ctx = setContextOp(ctx, niq.ctx, "IDs")
	if err = niq.Select(nutritionalinformation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (niq *NutritionalInformationQuery) IDsX(ctx context.Context) []int {
	ids, err := niq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (niq *NutritionalInformationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, niq.ctx, "Count")
	if err := niq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, niq, querierCount[*NutritionalInformationQuery](), niq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (niq *NutritionalInformationQuery) CountX(ctx context.Context) int {
	count, err := niq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (niq *NutritionalInformationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, niq.ctx, "Exist")
	switch _, err := niq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (niq *NutritionalInformationQuery) ExistX(ctx context.Context) bool {
	exist, err := niq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NutritionalInformationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (niq *NutritionalInformationQuery) Clone() *NutritionalInformationQuery {
	if niq == nil {
		return nil
	}
	return &NutritionalInformationQuery{
		config:                          niq.config,
		ctx:                             niq.ctx.Clone(),
		order:                           append([]nutritionalinformation.OrderOption{}, niq.order...),
		inters:                          append([]Interceptor{}, niq.inters...),
		predicates:                      append([]predicate.NutritionalInformation{}, niq.predicates...),
		withProduct:                     niq.withProduct.Clone(),
		withNutritionalInformationTable: niq.withNutritionalInformationTable.Clone(),
		// clone intermediate query.
		sql:  niq.sql.Clone(),
		path: niq.path,
	}
}

// WithProduct tells the query-builder to eager-load the nodes that are connected to
// the "product" edge. The optional arguments are used to configure the query builder of the edge.
func (niq *NutritionalInformationQuery) WithProduct(opts ...func(*ProductQuery)) *NutritionalInformationQuery {
	query := (&ProductClient{config: niq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	niq.withProduct = query
	return niq
}

// WithNutritionalInformationTable tells the query-builder to eager-load the nodes that are connected to
// the "nutritional_information_table" edge. The optional arguments are used to configure the query builder of the edge.
func (niq *NutritionalInformationQuery) WithNutritionalInformationTable(opts ...func(*NutritionalInformationTableQuery)) *NutritionalInformationQuery {
	query := (&NutritionalInformationTableClient{config: niq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	niq.withNutritionalInformationTable = query
	return niq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		NutritionalInformationTableID int `json:"nutritional_information_table_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NutritionalInformation.Query().
//		GroupBy(nutritionalinformation.FieldNutritionalInformationTableID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (niq *NutritionalInformationQuery) GroupBy(field string, fields ...string) *NutritionalInformationGroupBy {
	niq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NutritionalInformationGroupBy{build: niq}
	grbuild.flds = &niq.ctx.Fields
	grbuild.label = nutritionalinformation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		NutritionalInformationTableID int `json:"nutritional_information_table_id,omitempty"`
//	}
//
//	client.NutritionalInformation.Query().
//		Select(nutritionalinformation.FieldNutritionalInformationTableID).
//		Scan(ctx, &v)
func (niq *NutritionalInformationQuery) Select(fields ...string) *NutritionalInformationSelect {
	niq.ctx.Fields = append(niq.ctx.Fields, fields...)
	sbuild := &NutritionalInformationSelect{NutritionalInformationQuery: niq}
	sbuild.label = nutritionalinformation.Label
	sbuild.flds, sbuild.scan = &niq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NutritionalInformationSelect configured with the given aggregations.
func (niq *NutritionalInformationQuery) Aggregate(fns ...AggregateFunc) *NutritionalInformationSelect {
	return niq.Select().Aggregate(fns...)
}

func (niq *NutritionalInformationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range niq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, niq); err != nil {
				return err
			}
		}
	}
	for _, f := range niq.ctx.Fields {
		if !nutritionalinformation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if niq.path != nil {
		prev, err := niq.path(ctx)
		if err != nil {
			return err
		}
		niq.sql = prev
	}
	return nil
}

func (niq *NutritionalInformationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NutritionalInformation, error) {
	var (
		nodes       = []*NutritionalInformation{}
		_spec       = niq.querySpec()
		loadedTypes = [2]bool{
			niq.withProduct != nil,
			niq.withNutritionalInformationTable != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NutritionalInformation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NutritionalInformation{config: niq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(niq.modifiers) > 0 {
		_spec.Modifiers = niq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, niq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := niq.withProduct; query != nil {
		if err := niq.loadProduct(ctx, query, nodes,
			func(n *NutritionalInformation) { n.Edges.Product = []*Product{} },
			func(n *NutritionalInformation, e *Product) { n.Edges.Product = append(n.Edges.Product, e) }); err != nil {
			return nil, err
		}
	}
	if query := niq.withNutritionalInformationTable; query != nil {
		if err := niq.loadNutritionalInformationTable(ctx, query, nodes, nil,
			func(n *NutritionalInformation, e *NutritionalInformationTable) {
				n.Edges.NutritionalInformationTable = e
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range niq.withNamedProduct {
		if err := niq.loadProduct(ctx, query, nodes,
			func(n *NutritionalInformation) { n.appendNamedProduct(name) },
			func(n *NutritionalInformation, e *Product) { n.appendNamedProduct(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range niq.loadTotal {
		if err := niq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (niq *NutritionalInformationQuery) loadProduct(ctx context.Context, query *ProductQuery, nodes []*NutritionalInformation, init func(*NutritionalInformation), assign func(*NutritionalInformation, *Product)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*NutritionalInformation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(product.FieldNutritionalInformationID)
	}
	query.Where(predicate.Product(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(nutritionalinformation.ProductColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.NutritionalInformationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "nutritional_information_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (niq *NutritionalInformationQuery) loadNutritionalInformationTable(ctx context.Context, query *NutritionalInformationTableQuery, nodes []*NutritionalInformation, init func(*NutritionalInformation), assign func(*NutritionalInformation, *NutritionalInformationTable)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NutritionalInformation)
	for i := range nodes {
		fk := nodes[i].NutritionalInformationTableID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(nutritionalinformationtable.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "nutritional_information_table_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (niq *NutritionalInformationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := niq.querySpec()
	if len(niq.modifiers) > 0 {
		_spec.Modifiers = niq.modifiers
	}
	_spec.Node.Columns = niq.ctx.Fields
	if len(niq.ctx.Fields) > 0 {
		_spec.Unique = niq.ctx.Unique != nil && *niq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, niq.driver, _spec)
}

func (niq *NutritionalInformationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(nutritionalinformation.Table, nutritionalinformation.Columns, sqlgraph.NewFieldSpec(nutritionalinformation.FieldID, field.TypeInt))
	_spec.From = niq.sql
	if unique := niq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if niq.path != nil {
		_spec.Unique = true
	}
	if fields := niq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nutritionalinformation.FieldID)
		for i := range fields {
			if fields[i] != nutritionalinformation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if niq.withNutritionalInformationTable != nil {
			_spec.Node.AddColumnOnce(nutritionalinformation.FieldNutritionalInformationTableID)
		}
	}
	if ps := niq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := niq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := niq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := niq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (niq *NutritionalInformationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(niq.driver.Dialect())
	t1 := builder.Table(nutritionalinformation.Table)
	columns := niq.ctx.Fields
	if len(columns) == 0 {
		columns = nutritionalinformation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if niq.sql != nil {
		selector = niq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if niq.ctx.Unique != nil && *niq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range niq.predicates {
		p(selector)
	}
	for _, p := range niq.order {
		p(selector)
	}
	if offset := niq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := niq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedProduct tells the query-builder to eager-load the nodes that are connected to the "product"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (niq *NutritionalInformationQuery) WithNamedProduct(name string, opts ...func(*ProductQuery)) *NutritionalInformationQuery {
	query := (&ProductClient{config: niq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if niq.withNamedProduct == nil {
		niq.withNamedProduct = make(map[string]*ProductQuery)
	}
	niq.withNamedProduct[name] = query
	return niq
}

// NutritionalInformationGroupBy is the group-by builder for NutritionalInformation entities.
type NutritionalInformationGroupBy struct {
	selector
	build *NutritionalInformationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nigb *NutritionalInformationGroupBy) Aggregate(fns ...AggregateFunc) *NutritionalInformationGroupBy {
	nigb.fns = append(nigb.fns, fns...)
	return nigb
}

// Scan applies the selector query and scans the result into the given value.
func (nigb *NutritionalInformationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nigb.build.ctx, "GroupBy")
	if err := nigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NutritionalInformationQuery, *NutritionalInformationGroupBy](ctx, nigb.build, nigb, nigb.build.inters, v)
}

func (nigb *NutritionalInformationGroupBy) sqlScan(ctx context.Context, root *NutritionalInformationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(nigb.fns))
	for _, fn := range nigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*nigb.flds)+len(nigb.fns))
		for _, f := range *nigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*nigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NutritionalInformationSelect is the builder for selecting fields of NutritionalInformation entities.
type NutritionalInformationSelect struct {
	*NutritionalInformationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nis *NutritionalInformationSelect) Aggregate(fns ...AggregateFunc) *NutritionalInformationSelect {
	nis.fns = append(nis.fns, fns...)
	return nis
}

// Scan applies the selector query and scans the result into the given value.
func (nis *NutritionalInformationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nis.ctx, "Select")
	if err := nis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NutritionalInformationQuery, *NutritionalInformationSelect](ctx, nis.NutritionalInformationQuery, nis, nis.inters, v)
}

func (nis *NutritionalInformationSelect) sqlScan(ctx context.Context, root *NutritionalInformationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nis.fns))
	for _, fn := range nis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
