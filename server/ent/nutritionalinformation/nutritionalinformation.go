// Code generated by ent, DO NOT EDIT.

package nutritionalinformation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the nutritionalinformation type in the database.
	Label = "nutritional_information"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNutritionalInformationTableID holds the string denoting the nutritional_information_table_id field in the database.
	FieldNutritionalInformationTableID = "nutritional_information_table_id"
	// FieldNValue holds the string denoting the n_value field in the database.
	FieldNValue = "n_value"
	// FieldNMeasurementUnit holds the string denoting the n_measurement_unit field in the database.
	FieldNMeasurementUnit = "n_measurement_unit"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// EdgeNutritionalInformationTable holds the string denoting the nutritional_information_table edge name in mutations.
	EdgeNutritionalInformationTable = "nutritional_information_table"
	// Table holds the table name of the nutritionalinformation in the database.
	Table = "nutritional_informations"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "products"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "nutritional_information_id"
	// NutritionalInformationTableTable is the table that holds the nutritional_information_table relation/edge.
	NutritionalInformationTableTable = "nutritional_informations"
	// NutritionalInformationTableInverseTable is the table name for the NutritionalInformationTable entity.
	// It exists in this package in order to avoid circular dependency with the "nutritionalinformationtable" package.
	NutritionalInformationTableInverseTable = "nutritional_information_tables"
	// NutritionalInformationTableColumn is the table column denoting the nutritional_information_table relation/edge.
	NutritionalInformationTableColumn = "nutritional_information_table_id"
)

// Columns holds all SQL columns for nutritionalinformation fields.
var Columns = []string{
	FieldID,
	FieldNutritionalInformationTableID,
	FieldNValue,
	FieldNMeasurementUnit,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NValueValidator is a validator for the "n_value" field. It is called by the builders before save.
	NValueValidator func(float64) error
	// NMeasurementUnitValidator is a validator for the "n_measurement_unit" field. It is called by the builders before save.
	NMeasurementUnitValidator func(string) error
)

// OrderOption defines the ordering options for the NutritionalInformation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNutritionalInformationTableID orders the results by the nutritional_information_table_id field.
func ByNutritionalInformationTableID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNutritionalInformationTableID, opts...).ToFunc()
}

// ByNValue orders the results by the n_value field.
func ByNValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNValue, opts...).ToFunc()
}

// ByNMeasurementUnit orders the results by the n_measurement_unit field.
func ByNMeasurementUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNMeasurementUnit, opts...).ToFunc()
}

// ByProductCount orders the results by product count.
func ByProductCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductStep(), opts...)
	}
}

// ByProduct orders the results by product terms.
func ByProduct(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNutritionalInformationTableField orders the results by nutritional_information_table field.
func ByNutritionalInformationTableField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNutritionalInformationTableStep(), sql.OrderByField(field, opts...))
	}
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ProductTable, ProductColumn),
	)
}
func newNutritionalInformationTableStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NutritionalInformationTableInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NutritionalInformationTableTable, NutritionalInformationTableColumn),
	)
}
