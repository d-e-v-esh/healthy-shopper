// Code generated by ent, DO NOT EDIT.

package nutritionalinformation

import (
	"healthyshopper/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldLTE(FieldID, id))
}

// NutritionalInformationTableID applies equality check predicate on the "nutritional_information_table_id" field. It's identical to NutritionalInformationTableIDEQ.
func NutritionalInformationTableID(v int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldEQ(FieldNutritionalInformationTableID, v))
}

// NValue applies equality check predicate on the "n_value" field. It's identical to NValueEQ.
func NValue(v float64) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldEQ(FieldNValue, v))
}

// NMeasurementUnit applies equality check predicate on the "n_measurement_unit" field. It's identical to NMeasurementUnitEQ.
func NMeasurementUnit(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldEQ(FieldNMeasurementUnit, v))
}

// NutritionalInformationTableIDEQ applies the EQ predicate on the "nutritional_information_table_id" field.
func NutritionalInformationTableIDEQ(v int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldEQ(FieldNutritionalInformationTableID, v))
}

// NutritionalInformationTableIDNEQ applies the NEQ predicate on the "nutritional_information_table_id" field.
func NutritionalInformationTableIDNEQ(v int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldNEQ(FieldNutritionalInformationTableID, v))
}

// NutritionalInformationTableIDIn applies the In predicate on the "nutritional_information_table_id" field.
func NutritionalInformationTableIDIn(vs ...int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldIn(FieldNutritionalInformationTableID, vs...))
}

// NutritionalInformationTableIDNotIn applies the NotIn predicate on the "nutritional_information_table_id" field.
func NutritionalInformationTableIDNotIn(vs ...int) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldNotIn(FieldNutritionalInformationTableID, vs...))
}

// NValueEQ applies the EQ predicate on the "n_value" field.
func NValueEQ(v float64) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldEQ(FieldNValue, v))
}

// NValueNEQ applies the NEQ predicate on the "n_value" field.
func NValueNEQ(v float64) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldNEQ(FieldNValue, v))
}

// NValueIn applies the In predicate on the "n_value" field.
func NValueIn(vs ...float64) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldIn(FieldNValue, vs...))
}

// NValueNotIn applies the NotIn predicate on the "n_value" field.
func NValueNotIn(vs ...float64) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldNotIn(FieldNValue, vs...))
}

// NValueGT applies the GT predicate on the "n_value" field.
func NValueGT(v float64) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldGT(FieldNValue, v))
}

// NValueGTE applies the GTE predicate on the "n_value" field.
func NValueGTE(v float64) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldGTE(FieldNValue, v))
}

// NValueLT applies the LT predicate on the "n_value" field.
func NValueLT(v float64) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldLT(FieldNValue, v))
}

// NValueLTE applies the LTE predicate on the "n_value" field.
func NValueLTE(v float64) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldLTE(FieldNValue, v))
}

// NMeasurementUnitEQ applies the EQ predicate on the "n_measurement_unit" field.
func NMeasurementUnitEQ(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldEQ(FieldNMeasurementUnit, v))
}

// NMeasurementUnitNEQ applies the NEQ predicate on the "n_measurement_unit" field.
func NMeasurementUnitNEQ(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldNEQ(FieldNMeasurementUnit, v))
}

// NMeasurementUnitIn applies the In predicate on the "n_measurement_unit" field.
func NMeasurementUnitIn(vs ...string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldIn(FieldNMeasurementUnit, vs...))
}

// NMeasurementUnitNotIn applies the NotIn predicate on the "n_measurement_unit" field.
func NMeasurementUnitNotIn(vs ...string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldNotIn(FieldNMeasurementUnit, vs...))
}

// NMeasurementUnitGT applies the GT predicate on the "n_measurement_unit" field.
func NMeasurementUnitGT(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldGT(FieldNMeasurementUnit, v))
}

// NMeasurementUnitGTE applies the GTE predicate on the "n_measurement_unit" field.
func NMeasurementUnitGTE(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldGTE(FieldNMeasurementUnit, v))
}

// NMeasurementUnitLT applies the LT predicate on the "n_measurement_unit" field.
func NMeasurementUnitLT(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldLT(FieldNMeasurementUnit, v))
}

// NMeasurementUnitLTE applies the LTE predicate on the "n_measurement_unit" field.
func NMeasurementUnitLTE(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldLTE(FieldNMeasurementUnit, v))
}

// NMeasurementUnitContains applies the Contains predicate on the "n_measurement_unit" field.
func NMeasurementUnitContains(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldContains(FieldNMeasurementUnit, v))
}

// NMeasurementUnitHasPrefix applies the HasPrefix predicate on the "n_measurement_unit" field.
func NMeasurementUnitHasPrefix(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldHasPrefix(FieldNMeasurementUnit, v))
}

// NMeasurementUnitHasSuffix applies the HasSuffix predicate on the "n_measurement_unit" field.
func NMeasurementUnitHasSuffix(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldHasSuffix(FieldNMeasurementUnit, v))
}

// NMeasurementUnitEqualFold applies the EqualFold predicate on the "n_measurement_unit" field.
func NMeasurementUnitEqualFold(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldEqualFold(FieldNMeasurementUnit, v))
}

// NMeasurementUnitContainsFold applies the ContainsFold predicate on the "n_measurement_unit" field.
func NMeasurementUnitContainsFold(v string) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(sql.FieldContainsFold(FieldNMeasurementUnit, v))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.NutritionalInformation {
	return predicate.NutritionalInformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNutritionalInformationTable applies the HasEdge predicate on the "nutritional_information_table" edge.
func HasNutritionalInformationTable() predicate.NutritionalInformation {
	return predicate.NutritionalInformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NutritionalInformationTableTable, NutritionalInformationTableColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNutritionalInformationTableWith applies the HasEdge predicate on the "nutritional_information_table" edge with a given conditions (other predicates).
func HasNutritionalInformationTableWith(preds ...predicate.NutritionalInformationTable) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(func(s *sql.Selector) {
		step := newNutritionalInformationTableStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NutritionalInformation) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NutritionalInformation) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NutritionalInformation) predicate.NutritionalInformation {
	return predicate.NutritionalInformation(func(s *sql.Selector) {
		p(s.Not())
	})
}
