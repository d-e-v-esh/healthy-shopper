// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/orderline"
	"healthyshopper/ent/user"
	"healthyshopper/ent/userreview"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserReviewCreate is the builder for creating a UserReview entity.
type UserReviewCreate struct {
	config
	mutation *UserReviewMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (urc *UserReviewCreate) SetUserID(i int) *UserReviewCreate {
	urc.mutation.SetUserID(i)
	return urc
}

// SetOrderedProductID sets the "ordered_product_id" field.
func (urc *UserReviewCreate) SetOrderedProductID(i int) *UserReviewCreate {
	urc.mutation.SetOrderedProductID(i)
	return urc
}

// SetRating sets the "rating" field.
func (urc *UserReviewCreate) SetRating(i int) *UserReviewCreate {
	urc.mutation.SetRating(i)
	return urc
}

// SetReview sets the "review" field.
func (urc *UserReviewCreate) SetReview(s string) *UserReviewCreate {
	urc.mutation.SetReview(s)
	return urc
}

// SetCreatedAt sets the "created_at" field.
func (urc *UserReviewCreate) SetCreatedAt(t time.Time) *UserReviewCreate {
	urc.mutation.SetCreatedAt(t)
	return urc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (urc *UserReviewCreate) SetNillableCreatedAt(t *time.Time) *UserReviewCreate {
	if t != nil {
		urc.SetCreatedAt(*t)
	}
	return urc
}

// SetUpdatedAt sets the "updated_at" field.
func (urc *UserReviewCreate) SetUpdatedAt(t time.Time) *UserReviewCreate {
	urc.mutation.SetUpdatedAt(t)
	return urc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (urc *UserReviewCreate) SetNillableUpdatedAt(t *time.Time) *UserReviewCreate {
	if t != nil {
		urc.SetUpdatedAt(*t)
	}
	return urc
}

// SetUser sets the "user" edge to the User entity.
func (urc *UserReviewCreate) SetUser(u *User) *UserReviewCreate {
	return urc.SetUserID(u.ID)
}

// SetOrderedProduct sets the "ordered_product" edge to the OrderLine entity.
func (urc *UserReviewCreate) SetOrderedProduct(o *OrderLine) *UserReviewCreate {
	return urc.SetOrderedProductID(o.ID)
}

// Mutation returns the UserReviewMutation object of the builder.
func (urc *UserReviewCreate) Mutation() *UserReviewMutation {
	return urc.mutation
}

// Save creates the UserReview in the database.
func (urc *UserReviewCreate) Save(ctx context.Context) (*UserReview, error) {
	urc.defaults()
	return withHooks(ctx, urc.sqlSave, urc.mutation, urc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (urc *UserReviewCreate) SaveX(ctx context.Context) *UserReview {
	v, err := urc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urc *UserReviewCreate) Exec(ctx context.Context) error {
	_, err := urc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urc *UserReviewCreate) ExecX(ctx context.Context) {
	if err := urc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urc *UserReviewCreate) defaults() {
	if _, ok := urc.mutation.CreatedAt(); !ok {
		v := userreview.DefaultCreatedAt()
		urc.mutation.SetCreatedAt(v)
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		v := userreview.DefaultUpdatedAt()
		urc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (urc *UserReviewCreate) check() error {
	if _, ok := urc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserReview.user_id"`)}
	}
	if _, ok := urc.mutation.OrderedProductID(); !ok {
		return &ValidationError{Name: "ordered_product_id", err: errors.New(`ent: missing required field "UserReview.ordered_product_id"`)}
	}
	if _, ok := urc.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "UserReview.rating"`)}
	}
	if v, ok := urc.mutation.Rating(); ok {
		if err := userreview.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "UserReview.rating": %w`, err)}
		}
	}
	if _, ok := urc.mutation.Review(); !ok {
		return &ValidationError{Name: "review", err: errors.New(`ent: missing required field "UserReview.review"`)}
	}
	if v, ok := urc.mutation.Review(); ok {
		if err := userreview.ReviewValidator(v); err != nil {
			return &ValidationError{Name: "review", err: fmt.Errorf(`ent: validator failed for field "UserReview.review": %w`, err)}
		}
	}
	if _, ok := urc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserReview.created_at"`)}
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserReview.updated_at"`)}
	}
	if _, ok := urc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserReview.user"`)}
	}
	if _, ok := urc.mutation.OrderedProductID(); !ok {
		return &ValidationError{Name: "ordered_product", err: errors.New(`ent: missing required edge "UserReview.ordered_product"`)}
	}
	return nil
}

func (urc *UserReviewCreate) sqlSave(ctx context.Context) (*UserReview, error) {
	if err := urc.check(); err != nil {
		return nil, err
	}
	_node, _spec := urc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	urc.mutation.id = &_node.ID
	urc.mutation.done = true
	return _node, nil
}

func (urc *UserReviewCreate) createSpec() (*UserReview, *sqlgraph.CreateSpec) {
	var (
		_node = &UserReview{config: urc.config}
		_spec = sqlgraph.NewCreateSpec(userreview.Table, sqlgraph.NewFieldSpec(userreview.FieldID, field.TypeInt))
	)
	if value, ok := urc.mutation.Rating(); ok {
		_spec.SetField(userreview.FieldRating, field.TypeInt, value)
		_node.Rating = value
	}
	if value, ok := urc.mutation.Review(); ok {
		_spec.SetField(userreview.FieldReview, field.TypeString, value)
		_node.Review = value
	}
	if value, ok := urc.mutation.CreatedAt(); ok {
		_spec.SetField(userreview.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := urc.mutation.UpdatedAt(); ok {
		_spec.SetField(userreview.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := urc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userreview.UserTable,
			Columns: []string{userreview.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := urc.mutation.OrderedProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userreview.OrderedProductTable,
			Columns: []string{userreview.OrderedProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderedProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserReviewCreateBulk is the builder for creating many UserReview entities in bulk.
type UserReviewCreateBulk struct {
	config
	builders []*UserReviewCreate
}

// Save creates the UserReview entities in the database.
func (urcb *UserReviewCreateBulk) Save(ctx context.Context) ([]*UserReview, error) {
	specs := make([]*sqlgraph.CreateSpec, len(urcb.builders))
	nodes := make([]*UserReview, len(urcb.builders))
	mutators := make([]Mutator, len(urcb.builders))
	for i := range urcb.builders {
		func(i int, root context.Context) {
			builder := urcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urcb *UserReviewCreateBulk) SaveX(ctx context.Context) []*UserReview {
	v, err := urcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urcb *UserReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := urcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urcb *UserReviewCreateBulk) ExecX(ctx context.Context) {
	if err := urcb.Exec(ctx); err != nil {
		panic(err)
	}
}
