// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"healthyshopper/ent/migrate"

	"healthyshopper/ent/address"
	"healthyshopper/ent/product"
	"healthyshopper/ent/shoppingcart"
	"healthyshopper/ent/shoppingcartitem"
	"healthyshopper/ent/user"
	"healthyshopper/ent/useraddress"
	"healthyshopper/ent/userreview"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Address is the client for interacting with the Address builders.
	Address *AddressClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ShoppingCart is the client for interacting with the ShoppingCart builders.
	ShoppingCart *ShoppingCartClient
	// ShoppingCartItem is the client for interacting with the ShoppingCartItem builders.
	ShoppingCartItem *ShoppingCartItemClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserAddress is the client for interacting with the UserAddress builders.
	UserAddress *UserAddressClient
	// UserReview is the client for interacting with the UserReview builders.
	UserReview *UserReviewClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Address = NewAddressClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ShoppingCart = NewShoppingCartClient(c.config)
	c.ShoppingCartItem = NewShoppingCartItemClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserAddress = NewUserAddressClient(c.config)
	c.UserReview = NewUserReviewClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Address:          NewAddressClient(cfg),
		Product:          NewProductClient(cfg),
		ShoppingCart:     NewShoppingCartClient(cfg),
		ShoppingCartItem: NewShoppingCartItemClient(cfg),
		User:             NewUserClient(cfg),
		UserAddress:      NewUserAddressClient(cfg),
		UserReview:       NewUserReviewClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Address:          NewAddressClient(cfg),
		Product:          NewProductClient(cfg),
		ShoppingCart:     NewShoppingCartClient(cfg),
		ShoppingCartItem: NewShoppingCartItemClient(cfg),
		User:             NewUserClient(cfg),
		UserAddress:      NewUserAddressClient(cfg),
		UserReview:       NewUserReviewClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Address.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Address, c.Product, c.ShoppingCart, c.ShoppingCartItem, c.User, c.UserAddress,
		c.UserReview,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Address, c.Product, c.ShoppingCart, c.ShoppingCartItem, c.User, c.UserAddress,
		c.UserReview,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AddressMutation:
		return c.Address.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *ShoppingCartMutation:
		return c.ShoppingCart.mutate(ctx, m)
	case *ShoppingCartItemMutation:
		return c.ShoppingCartItem.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserAddressMutation:
		return c.UserAddress.mutate(ctx, m)
	case *UserReviewMutation:
		return c.UserReview.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AddressClient is a client for the Address schema.
type AddressClient struct {
	config
}

// NewAddressClient returns a client for the Address from the given config.
func NewAddressClient(c config) *AddressClient {
	return &AddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `address.Hooks(f(g(h())))`.
func (c *AddressClient) Use(hooks ...Hook) {
	c.hooks.Address = append(c.hooks.Address, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `address.Intercept(f(g(h())))`.
func (c *AddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.Address = append(c.inters.Address, interceptors...)
}

// Create returns a builder for creating a Address entity.
func (c *AddressClient) Create() *AddressCreate {
	mutation := newAddressMutation(c.config, OpCreate)
	return &AddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Address entities.
func (c *AddressClient) CreateBulk(builders ...*AddressCreate) *AddressCreateBulk {
	return &AddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Address.
func (c *AddressClient) Update() *AddressUpdate {
	mutation := newAddressMutation(c.config, OpUpdate)
	return &AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddressClient) UpdateOne(a *Address) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddress(a))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddressClient) UpdateOneID(id int) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddressID(id))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Address.
func (c *AddressClient) Delete() *AddressDelete {
	mutation := newAddressMutation(c.config, OpDelete)
	return &AddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddressClient) DeleteOne(a *Address) *AddressDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AddressClient) DeleteOneID(id int) *AddressDeleteOne {
	builder := c.Delete().Where(address.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddressDeleteOne{builder}
}

// Query returns a query builder for Address.
func (c *AddressClient) Query() *AddressQuery {
	return &AddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a Address entity by its id.
func (c *AddressClient) Get(ctx context.Context, id int) (*Address, error) {
	return c.Query().Where(address.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddressClient) GetX(ctx context.Context, id int) *Address {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserAddress queries the user_address edge of a Address.
func (c *AddressClient) QueryUserAddress(a *Address) *UserAddressQuery {
	query := (&UserAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(useraddress.Table, useraddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.UserAddressTable, address.UserAddressColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddressClient) Hooks() []Hook {
	return c.hooks.Address
}

// Interceptors returns the client interceptors.
func (c *AddressClient) Interceptors() []Interceptor {
	return c.inters.Address
}

func (c *AddressClient) mutate(ctx context.Context, m *AddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Address mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// ShoppingCartClient is a client for the ShoppingCart schema.
type ShoppingCartClient struct {
	config
}

// NewShoppingCartClient returns a client for the ShoppingCart from the given config.
func NewShoppingCartClient(c config) *ShoppingCartClient {
	return &ShoppingCartClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shoppingcart.Hooks(f(g(h())))`.
func (c *ShoppingCartClient) Use(hooks ...Hook) {
	c.hooks.ShoppingCart = append(c.hooks.ShoppingCart, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shoppingcart.Intercept(f(g(h())))`.
func (c *ShoppingCartClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShoppingCart = append(c.inters.ShoppingCart, interceptors...)
}

// Create returns a builder for creating a ShoppingCart entity.
func (c *ShoppingCartClient) Create() *ShoppingCartCreate {
	mutation := newShoppingCartMutation(c.config, OpCreate)
	return &ShoppingCartCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShoppingCart entities.
func (c *ShoppingCartClient) CreateBulk(builders ...*ShoppingCartCreate) *ShoppingCartCreateBulk {
	return &ShoppingCartCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShoppingCart.
func (c *ShoppingCartClient) Update() *ShoppingCartUpdate {
	mutation := newShoppingCartMutation(c.config, OpUpdate)
	return &ShoppingCartUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShoppingCartClient) UpdateOne(sc *ShoppingCart) *ShoppingCartUpdateOne {
	mutation := newShoppingCartMutation(c.config, OpUpdateOne, withShoppingCart(sc))
	return &ShoppingCartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShoppingCartClient) UpdateOneID(id int) *ShoppingCartUpdateOne {
	mutation := newShoppingCartMutation(c.config, OpUpdateOne, withShoppingCartID(id))
	return &ShoppingCartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShoppingCart.
func (c *ShoppingCartClient) Delete() *ShoppingCartDelete {
	mutation := newShoppingCartMutation(c.config, OpDelete)
	return &ShoppingCartDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShoppingCartClient) DeleteOne(sc *ShoppingCart) *ShoppingCartDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShoppingCartClient) DeleteOneID(id int) *ShoppingCartDeleteOne {
	builder := c.Delete().Where(shoppingcart.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShoppingCartDeleteOne{builder}
}

// Query returns a query builder for ShoppingCart.
func (c *ShoppingCartClient) Query() *ShoppingCartQuery {
	return &ShoppingCartQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShoppingCart},
		inters: c.Interceptors(),
	}
}

// Get returns a ShoppingCart entity by its id.
func (c *ShoppingCartClient) Get(ctx context.Context, id int) (*ShoppingCart, error) {
	return c.Query().Where(shoppingcart.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShoppingCartClient) GetX(ctx context.Context, id int) *ShoppingCart {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ShoppingCart.
func (c *ShoppingCartClient) QueryUser(sc *ShoppingCart) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shoppingcart.Table, shoppingcart.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shoppingcart.UserTable, shoppingcart.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShoppingCartItem queries the shopping_cart_item edge of a ShoppingCart.
func (c *ShoppingCartClient) QueryShoppingCartItem(sc *ShoppingCart) *ShoppingCartItemQuery {
	query := (&ShoppingCartItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shoppingcart.Table, shoppingcart.FieldID, id),
			sqlgraph.To(shoppingcartitem.Table, shoppingcartitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shoppingcart.ShoppingCartItemTable, shoppingcart.ShoppingCartItemColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShoppingCartClient) Hooks() []Hook {
	return c.hooks.ShoppingCart
}

// Interceptors returns the client interceptors.
func (c *ShoppingCartClient) Interceptors() []Interceptor {
	return c.inters.ShoppingCart
}

func (c *ShoppingCartClient) mutate(ctx context.Context, m *ShoppingCartMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShoppingCartCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShoppingCartUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShoppingCartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShoppingCartDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShoppingCart mutation op: %q", m.Op())
	}
}

// ShoppingCartItemClient is a client for the ShoppingCartItem schema.
type ShoppingCartItemClient struct {
	config
}

// NewShoppingCartItemClient returns a client for the ShoppingCartItem from the given config.
func NewShoppingCartItemClient(c config) *ShoppingCartItemClient {
	return &ShoppingCartItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shoppingcartitem.Hooks(f(g(h())))`.
func (c *ShoppingCartItemClient) Use(hooks ...Hook) {
	c.hooks.ShoppingCartItem = append(c.hooks.ShoppingCartItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shoppingcartitem.Intercept(f(g(h())))`.
func (c *ShoppingCartItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShoppingCartItem = append(c.inters.ShoppingCartItem, interceptors...)
}

// Create returns a builder for creating a ShoppingCartItem entity.
func (c *ShoppingCartItemClient) Create() *ShoppingCartItemCreate {
	mutation := newShoppingCartItemMutation(c.config, OpCreate)
	return &ShoppingCartItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShoppingCartItem entities.
func (c *ShoppingCartItemClient) CreateBulk(builders ...*ShoppingCartItemCreate) *ShoppingCartItemCreateBulk {
	return &ShoppingCartItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShoppingCartItem.
func (c *ShoppingCartItemClient) Update() *ShoppingCartItemUpdate {
	mutation := newShoppingCartItemMutation(c.config, OpUpdate)
	return &ShoppingCartItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShoppingCartItemClient) UpdateOne(sci *ShoppingCartItem) *ShoppingCartItemUpdateOne {
	mutation := newShoppingCartItemMutation(c.config, OpUpdateOne, withShoppingCartItem(sci))
	return &ShoppingCartItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShoppingCartItemClient) UpdateOneID(id int) *ShoppingCartItemUpdateOne {
	mutation := newShoppingCartItemMutation(c.config, OpUpdateOne, withShoppingCartItemID(id))
	return &ShoppingCartItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShoppingCartItem.
func (c *ShoppingCartItemClient) Delete() *ShoppingCartItemDelete {
	mutation := newShoppingCartItemMutation(c.config, OpDelete)
	return &ShoppingCartItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShoppingCartItemClient) DeleteOne(sci *ShoppingCartItem) *ShoppingCartItemDeleteOne {
	return c.DeleteOneID(sci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShoppingCartItemClient) DeleteOneID(id int) *ShoppingCartItemDeleteOne {
	builder := c.Delete().Where(shoppingcartitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShoppingCartItemDeleteOne{builder}
}

// Query returns a query builder for ShoppingCartItem.
func (c *ShoppingCartItemClient) Query() *ShoppingCartItemQuery {
	return &ShoppingCartItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShoppingCartItem},
		inters: c.Interceptors(),
	}
}

// Get returns a ShoppingCartItem entity by its id.
func (c *ShoppingCartItemClient) Get(ctx context.Context, id int) (*ShoppingCartItem, error) {
	return c.Query().Where(shoppingcartitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShoppingCartItemClient) GetX(ctx context.Context, id int) *ShoppingCartItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShoppingCart queries the shopping_cart edge of a ShoppingCartItem.
func (c *ShoppingCartItemClient) QueryShoppingCart(sci *ShoppingCartItem) *ShoppingCartQuery {
	query := (&ShoppingCartClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shoppingcartitem.Table, shoppingcartitem.FieldID, id),
			sqlgraph.To(shoppingcart.Table, shoppingcart.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shoppingcartitem.ShoppingCartTable, shoppingcartitem.ShoppingCartColumn),
		)
		fromV = sqlgraph.Neighbors(sci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShoppingCartItemClient) Hooks() []Hook {
	return c.hooks.ShoppingCartItem
}

// Interceptors returns the client interceptors.
func (c *ShoppingCartItemClient) Interceptors() []Interceptor {
	return c.inters.ShoppingCartItem
}

func (c *ShoppingCartItemClient) mutate(ctx context.Context, m *ShoppingCartItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShoppingCartItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShoppingCartItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShoppingCartItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShoppingCartItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShoppingCartItem mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserAddress queries the user_address edge of a User.
func (c *UserClient) QueryUserAddress(u *User) *UserAddressQuery {
	query := (&UserAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useraddress.Table, useraddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserAddressTable, user.UserAddressColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserReview queries the user_review edge of a User.
func (c *UserClient) QueryUserReview(u *User) *UserReviewQuery {
	query := (&UserReviewClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userreview.Table, userreview.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserReviewTable, user.UserReviewColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShoppingCart queries the shopping_cart edge of a User.
func (c *UserClient) QueryShoppingCart(u *User) *ShoppingCartQuery {
	query := (&ShoppingCartClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(shoppingcart.Table, shoppingcart.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ShoppingCartTable, user.ShoppingCartColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserAddressClient is a client for the UserAddress schema.
type UserAddressClient struct {
	config
}

// NewUserAddressClient returns a client for the UserAddress from the given config.
func NewUserAddressClient(c config) *UserAddressClient {
	return &UserAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useraddress.Hooks(f(g(h())))`.
func (c *UserAddressClient) Use(hooks ...Hook) {
	c.hooks.UserAddress = append(c.hooks.UserAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `useraddress.Intercept(f(g(h())))`.
func (c *UserAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserAddress = append(c.inters.UserAddress, interceptors...)
}

// Create returns a builder for creating a UserAddress entity.
func (c *UserAddressClient) Create() *UserAddressCreate {
	mutation := newUserAddressMutation(c.config, OpCreate)
	return &UserAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserAddress entities.
func (c *UserAddressClient) CreateBulk(builders ...*UserAddressCreate) *UserAddressCreateBulk {
	return &UserAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserAddress.
func (c *UserAddressClient) Update() *UserAddressUpdate {
	mutation := newUserAddressMutation(c.config, OpUpdate)
	return &UserAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserAddressClient) UpdateOne(ua *UserAddress) *UserAddressUpdateOne {
	mutation := newUserAddressMutation(c.config, OpUpdateOne, withUserAddress(ua))
	return &UserAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserAddressClient) UpdateOneID(id int) *UserAddressUpdateOne {
	mutation := newUserAddressMutation(c.config, OpUpdateOne, withUserAddressID(id))
	return &UserAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserAddress.
func (c *UserAddressClient) Delete() *UserAddressDelete {
	mutation := newUserAddressMutation(c.config, OpDelete)
	return &UserAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserAddressClient) DeleteOne(ua *UserAddress) *UserAddressDeleteOne {
	return c.DeleteOneID(ua.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserAddressClient) DeleteOneID(id int) *UserAddressDeleteOne {
	builder := c.Delete().Where(useraddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserAddressDeleteOne{builder}
}

// Query returns a query builder for UserAddress.
func (c *UserAddressClient) Query() *UserAddressQuery {
	return &UserAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a UserAddress entity by its id.
func (c *UserAddressClient) Get(ctx context.Context, id int) (*UserAddress, error) {
	return c.Query().Where(useraddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserAddressClient) GetX(ctx context.Context, id int) *UserAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserAddress.
func (c *UserAddressClient) QueryUser(ua *UserAddress) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraddress.Table, useraddress.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useraddress.UserTable, useraddress.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddress queries the address edge of a UserAddress.
func (c *UserAddressClient) QueryAddress(ua *UserAddress) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useraddress.Table, useraddress.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, useraddress.AddressTable, useraddress.AddressColumn),
		)
		fromV = sqlgraph.Neighbors(ua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserAddressClient) Hooks() []Hook {
	return c.hooks.UserAddress
}

// Interceptors returns the client interceptors.
func (c *UserAddressClient) Interceptors() []Interceptor {
	return c.inters.UserAddress
}

func (c *UserAddressClient) mutate(ctx context.Context, m *UserAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserAddress mutation op: %q", m.Op())
	}
}

// UserReviewClient is a client for the UserReview schema.
type UserReviewClient struct {
	config
}

// NewUserReviewClient returns a client for the UserReview from the given config.
func NewUserReviewClient(c config) *UserReviewClient {
	return &UserReviewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userreview.Hooks(f(g(h())))`.
func (c *UserReviewClient) Use(hooks ...Hook) {
	c.hooks.UserReview = append(c.hooks.UserReview, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userreview.Intercept(f(g(h())))`.
func (c *UserReviewClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserReview = append(c.inters.UserReview, interceptors...)
}

// Create returns a builder for creating a UserReview entity.
func (c *UserReviewClient) Create() *UserReviewCreate {
	mutation := newUserReviewMutation(c.config, OpCreate)
	return &UserReviewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserReview entities.
func (c *UserReviewClient) CreateBulk(builders ...*UserReviewCreate) *UserReviewCreateBulk {
	return &UserReviewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserReview.
func (c *UserReviewClient) Update() *UserReviewUpdate {
	mutation := newUserReviewMutation(c.config, OpUpdate)
	return &UserReviewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserReviewClient) UpdateOne(ur *UserReview) *UserReviewUpdateOne {
	mutation := newUserReviewMutation(c.config, OpUpdateOne, withUserReview(ur))
	return &UserReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserReviewClient) UpdateOneID(id int) *UserReviewUpdateOne {
	mutation := newUserReviewMutation(c.config, OpUpdateOne, withUserReviewID(id))
	return &UserReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserReview.
func (c *UserReviewClient) Delete() *UserReviewDelete {
	mutation := newUserReviewMutation(c.config, OpDelete)
	return &UserReviewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserReviewClient) DeleteOne(ur *UserReview) *UserReviewDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserReviewClient) DeleteOneID(id int) *UserReviewDeleteOne {
	builder := c.Delete().Where(userreview.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserReviewDeleteOne{builder}
}

// Query returns a query builder for UserReview.
func (c *UserReviewClient) Query() *UserReviewQuery {
	return &UserReviewQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserReview},
		inters: c.Interceptors(),
	}
}

// Get returns a UserReview entity by its id.
func (c *UserReviewClient) Get(ctx context.Context, id int) (*UserReview, error) {
	return c.Query().Where(userreview.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserReviewClient) GetX(ctx context.Context, id int) *UserReview {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserReview.
func (c *UserReviewClient) QueryUser(ur *UserReview) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userreview.Table, userreview.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userreview.UserTable, userreview.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserReviewClient) Hooks() []Hook {
	return c.hooks.UserReview
}

// Interceptors returns the client interceptors.
func (c *UserReviewClient) Interceptors() []Interceptor {
	return c.inters.UserReview
}

func (c *UserReviewClient) mutate(ctx context.Context, m *UserReviewMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserReviewCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserReviewUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserReviewDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserReview mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Address, Product, ShoppingCart, ShoppingCartItem, User, UserAddress,
		UserReview []ent.Hook
	}
	inters struct {
		Address, Product, ShoppingCart, ShoppingCartItem, User, UserAddress,
		UserReview []ent.Interceptor
	}
)
