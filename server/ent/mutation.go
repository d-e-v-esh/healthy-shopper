// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/address"
	"healthyshopper/ent/predicate"
	"healthyshopper/ent/product"
	"healthyshopper/ent/shoppingcart"
	"healthyshopper/ent/shoppingcartitem"
	"healthyshopper/ent/user"
	"healthyshopper/ent/useraddress"
	"healthyshopper/ent/userreview"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAddress          = "Address"
	TypeProduct          = "Product"
	TypeShoppingCart     = "ShoppingCart"
	TypeShoppingCartItem = "ShoppingCartItem"
	TypeUser             = "User"
	TypeUserAddress      = "UserAddress"
	TypeUserReview       = "UserReview"
)

// AddressMutation represents an operation that mutates the Address nodes in the graph.
type AddressMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	phone_number        *string
	address_line1       *string
	address_line2       *string
	city                *string
	state               *string
	country             *string
	postal_code         *string
	clearedFields       map[string]struct{}
	user_address        map[int]struct{}
	removeduser_address map[int]struct{}
	cleareduser_address bool
	done                bool
	oldValue            func(context.Context) (*Address, error)
	predicates          []predicate.Address
}

var _ ent.Mutation = (*AddressMutation)(nil)

// addressOption allows management of the mutation configuration using functional options.
type addressOption func(*AddressMutation)

// newAddressMutation creates new mutation for the Address entity.
func newAddressMutation(c config, op Op, opts ...addressOption) *AddressMutation {
	m := &AddressMutation{
		config:        c,
		op:            op,
		typ:           TypeAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAddressID sets the ID field of the mutation.
func withAddressID(id int) addressOption {
	return func(m *AddressMutation) {
		var (
			err   error
			once  sync.Once
			value *Address
		)
		m.oldValue = func(ctx context.Context) (*Address, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Address.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAddress sets the old Address of the mutation.
func withAddress(node *Address) addressOption {
	return func(m *AddressMutation) {
		m.oldValue = func(context.Context) (*Address, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AddressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AddressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Address.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPhoneNumber sets the "phone_number" field.
func (m *AddressMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *AddressMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *AddressMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetAddressLine1 sets the "address_line1" field.
func (m *AddressMutation) SetAddressLine1(s string) {
	m.address_line1 = &s
}

// AddressLine1 returns the value of the "address_line1" field in the mutation.
func (m *AddressMutation) AddressLine1() (r string, exists bool) {
	v := m.address_line1
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressLine1 returns the old "address_line1" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldAddressLine1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressLine1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressLine1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressLine1: %w", err)
	}
	return oldValue.AddressLine1, nil
}

// ResetAddressLine1 resets all changes to the "address_line1" field.
func (m *AddressMutation) ResetAddressLine1() {
	m.address_line1 = nil
}

// SetAddressLine2 sets the "address_line2" field.
func (m *AddressMutation) SetAddressLine2(s string) {
	m.address_line2 = &s
}

// AddressLine2 returns the value of the "address_line2" field in the mutation.
func (m *AddressMutation) AddressLine2() (r string, exists bool) {
	v := m.address_line2
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressLine2 returns the old "address_line2" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldAddressLine2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressLine2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressLine2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressLine2: %w", err)
	}
	return oldValue.AddressLine2, nil
}

// ClearAddressLine2 clears the value of the "address_line2" field.
func (m *AddressMutation) ClearAddressLine2() {
	m.address_line2 = nil
	m.clearedFields[address.FieldAddressLine2] = struct{}{}
}

// AddressLine2Cleared returns if the "address_line2" field was cleared in this mutation.
func (m *AddressMutation) AddressLine2Cleared() bool {
	_, ok := m.clearedFields[address.FieldAddressLine2]
	return ok
}

// ResetAddressLine2 resets all changes to the "address_line2" field.
func (m *AddressMutation) ResetAddressLine2() {
	m.address_line2 = nil
	delete(m.clearedFields, address.FieldAddressLine2)
}

// SetCity sets the "city" field.
func (m *AddressMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *AddressMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *AddressMutation) ResetCity() {
	m.city = nil
}

// SetState sets the "state" field.
func (m *AddressMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *AddressMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *AddressMutation) ResetState() {
	m.state = nil
}

// SetCountry sets the "country" field.
func (m *AddressMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *AddressMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *AddressMutation) ResetCountry() {
	m.country = nil
}

// SetPostalCode sets the "postal_code" field.
func (m *AddressMutation) SetPostalCode(s string) {
	m.postal_code = &s
}

// PostalCode returns the value of the "postal_code" field in the mutation.
func (m *AddressMutation) PostalCode() (r string, exists bool) {
	v := m.postal_code
	if v == nil {
		return
	}
	return *v, true
}

// OldPostalCode returns the old "postal_code" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldPostalCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostalCode: %w", err)
	}
	return oldValue.PostalCode, nil
}

// ResetPostalCode resets all changes to the "postal_code" field.
func (m *AddressMutation) ResetPostalCode() {
	m.postal_code = nil
}

// AddUserAddresIDs adds the "user_address" edge to the UserAddress entity by ids.
func (m *AddressMutation) AddUserAddresIDs(ids ...int) {
	if m.user_address == nil {
		m.user_address = make(map[int]struct{})
	}
	for i := range ids {
		m.user_address[ids[i]] = struct{}{}
	}
}

// ClearUserAddress clears the "user_address" edge to the UserAddress entity.
func (m *AddressMutation) ClearUserAddress() {
	m.cleareduser_address = true
}

// UserAddressCleared reports if the "user_address" edge to the UserAddress entity was cleared.
func (m *AddressMutation) UserAddressCleared() bool {
	return m.cleareduser_address
}

// RemoveUserAddresIDs removes the "user_address" edge to the UserAddress entity by IDs.
func (m *AddressMutation) RemoveUserAddresIDs(ids ...int) {
	if m.removeduser_address == nil {
		m.removeduser_address = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_address, ids[i])
		m.removeduser_address[ids[i]] = struct{}{}
	}
}

// RemovedUserAddress returns the removed IDs of the "user_address" edge to the UserAddress entity.
func (m *AddressMutation) RemovedUserAddressIDs() (ids []int) {
	for id := range m.removeduser_address {
		ids = append(ids, id)
	}
	return
}

// UserAddressIDs returns the "user_address" edge IDs in the mutation.
func (m *AddressMutation) UserAddressIDs() (ids []int) {
	for id := range m.user_address {
		ids = append(ids, id)
	}
	return
}

// ResetUserAddress resets all changes to the "user_address" edge.
func (m *AddressMutation) ResetUserAddress() {
	m.user_address = nil
	m.cleareduser_address = false
	m.removeduser_address = nil
}

// Where appends a list predicates to the AddressMutation builder.
func (m *AddressMutation) Where(ps ...predicate.Address) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Address, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Address).
func (m *AddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AddressMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.phone_number != nil {
		fields = append(fields, address.FieldPhoneNumber)
	}
	if m.address_line1 != nil {
		fields = append(fields, address.FieldAddressLine1)
	}
	if m.address_line2 != nil {
		fields = append(fields, address.FieldAddressLine2)
	}
	if m.city != nil {
		fields = append(fields, address.FieldCity)
	}
	if m.state != nil {
		fields = append(fields, address.FieldState)
	}
	if m.country != nil {
		fields = append(fields, address.FieldCountry)
	}
	if m.postal_code != nil {
		fields = append(fields, address.FieldPostalCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case address.FieldPhoneNumber:
		return m.PhoneNumber()
	case address.FieldAddressLine1:
		return m.AddressLine1()
	case address.FieldAddressLine2:
		return m.AddressLine2()
	case address.FieldCity:
		return m.City()
	case address.FieldState:
		return m.State()
	case address.FieldCountry:
		return m.Country()
	case address.FieldPostalCode:
		return m.PostalCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case address.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case address.FieldAddressLine1:
		return m.OldAddressLine1(ctx)
	case address.FieldAddressLine2:
		return m.OldAddressLine2(ctx)
	case address.FieldCity:
		return m.OldCity(ctx)
	case address.FieldState:
		return m.OldState(ctx)
	case address.FieldCountry:
		return m.OldCountry(ctx)
	case address.FieldPostalCode:
		return m.OldPostalCode(ctx)
	}
	return nil, fmt.Errorf("unknown Address field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case address.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case address.FieldAddressLine1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressLine1(v)
		return nil
	case address.FieldAddressLine2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressLine2(v)
		return nil
	case address.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case address.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case address.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case address.FieldPostalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostalCode(v)
		return nil
	}
	return fmt.Errorf("unknown Address field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AddressMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AddressMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Address numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AddressMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(address.FieldAddressLine2) {
		fields = append(fields, address.FieldAddressLine2)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AddressMutation) ClearField(name string) error {
	switch name {
	case address.FieldAddressLine2:
		m.ClearAddressLine2()
		return nil
	}
	return fmt.Errorf("unknown Address nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AddressMutation) ResetField(name string) error {
	switch name {
	case address.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case address.FieldAddressLine1:
		m.ResetAddressLine1()
		return nil
	case address.FieldAddressLine2:
		m.ResetAddressLine2()
		return nil
	case address.FieldCity:
		m.ResetCity()
		return nil
	case address.FieldState:
		m.ResetState()
		return nil
	case address.FieldCountry:
		m.ResetCountry()
		return nil
	case address.FieldPostalCode:
		m.ResetPostalCode()
		return nil
	}
	return fmt.Errorf("unknown Address field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user_address != nil {
		edges = append(edges, address.EdgeUserAddress)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case address.EdgeUserAddress:
		ids := make([]ent.Value, 0, len(m.user_address))
		for id := range m.user_address {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeduser_address != nil {
		edges = append(edges, address.EdgeUserAddress)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AddressMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case address.EdgeUserAddress:
		ids := make([]ent.Value, 0, len(m.removeduser_address))
		for id := range m.removeduser_address {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser_address {
		edges = append(edges, address.EdgeUserAddress)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AddressMutation) EdgeCleared(name string) bool {
	switch name {
	case address.EdgeUserAddress:
		return m.cleareduser_address
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AddressMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Address unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AddressMutation) ResetEdge(name string) error {
	switch name {
	case address.EdgeUserAddress:
		m.ResetUserAddress()
		return nil
	}
	return fmt.Errorf("unknown Address edge %s", name)
}

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	name                          *string
	description                   *string
	product_image                 *string
	product_category_id           *int
	addproduct_category_id        *int
	ingredients_list_id           *int
	addingredients_list_id        *int
	nutritional_information_id    *int
	addnutritional_information_id *int
	promotion_id                  *int
	addpromotion_id               *int
	created_at                    *time.Time
	updated_at                    *time.Time
	clearedFields                 map[string]struct{}
	done                          bool
	oldValue                      func(context.Context) (*Product, error)
	predicates                    []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Product.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProductMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProductMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProductMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProductMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProductMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProductMutation) ResetDescription() {
	m.description = nil
}

// SetProductImage sets the "product_image" field.
func (m *ProductMutation) SetProductImage(s string) {
	m.product_image = &s
}

// ProductImage returns the value of the "product_image" field in the mutation.
func (m *ProductMutation) ProductImage() (r string, exists bool) {
	v := m.product_image
	if v == nil {
		return
	}
	return *v, true
}

// OldProductImage returns the old "product_image" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldProductImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductImage: %w", err)
	}
	return oldValue.ProductImage, nil
}

// ResetProductImage resets all changes to the "product_image" field.
func (m *ProductMutation) ResetProductImage() {
	m.product_image = nil
}

// SetProductCategoryID sets the "product_category_id" field.
func (m *ProductMutation) SetProductCategoryID(i int) {
	m.product_category_id = &i
	m.addproduct_category_id = nil
}

// ProductCategoryID returns the value of the "product_category_id" field in the mutation.
func (m *ProductMutation) ProductCategoryID() (r int, exists bool) {
	v := m.product_category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductCategoryID returns the old "product_category_id" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldProductCategoryID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductCategoryID: %w", err)
	}
	return oldValue.ProductCategoryID, nil
}

// AddProductCategoryID adds i to the "product_category_id" field.
func (m *ProductMutation) AddProductCategoryID(i int) {
	if m.addproduct_category_id != nil {
		*m.addproduct_category_id += i
	} else {
		m.addproduct_category_id = &i
	}
}

// AddedProductCategoryID returns the value that was added to the "product_category_id" field in this mutation.
func (m *ProductMutation) AddedProductCategoryID() (r int, exists bool) {
	v := m.addproduct_category_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProductCategoryID resets all changes to the "product_category_id" field.
func (m *ProductMutation) ResetProductCategoryID() {
	m.product_category_id = nil
	m.addproduct_category_id = nil
}

// SetIngredientsListID sets the "ingredients_list_id" field.
func (m *ProductMutation) SetIngredientsListID(i int) {
	m.ingredients_list_id = &i
	m.addingredients_list_id = nil
}

// IngredientsListID returns the value of the "ingredients_list_id" field in the mutation.
func (m *ProductMutation) IngredientsListID() (r int, exists bool) {
	v := m.ingredients_list_id
	if v == nil {
		return
	}
	return *v, true
}

// OldIngredientsListID returns the old "ingredients_list_id" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldIngredientsListID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIngredientsListID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIngredientsListID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIngredientsListID: %w", err)
	}
	return oldValue.IngredientsListID, nil
}

// AddIngredientsListID adds i to the "ingredients_list_id" field.
func (m *ProductMutation) AddIngredientsListID(i int) {
	if m.addingredients_list_id != nil {
		*m.addingredients_list_id += i
	} else {
		m.addingredients_list_id = &i
	}
}

// AddedIngredientsListID returns the value that was added to the "ingredients_list_id" field in this mutation.
func (m *ProductMutation) AddedIngredientsListID() (r int, exists bool) {
	v := m.addingredients_list_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetIngredientsListID resets all changes to the "ingredients_list_id" field.
func (m *ProductMutation) ResetIngredientsListID() {
	m.ingredients_list_id = nil
	m.addingredients_list_id = nil
}

// SetNutritionalInformationID sets the "nutritional_information_id" field.
func (m *ProductMutation) SetNutritionalInformationID(i int) {
	m.nutritional_information_id = &i
	m.addnutritional_information_id = nil
}

// NutritionalInformationID returns the value of the "nutritional_information_id" field in the mutation.
func (m *ProductMutation) NutritionalInformationID() (r int, exists bool) {
	v := m.nutritional_information_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNutritionalInformationID returns the old "nutritional_information_id" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldNutritionalInformationID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNutritionalInformationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNutritionalInformationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNutritionalInformationID: %w", err)
	}
	return oldValue.NutritionalInformationID, nil
}

// AddNutritionalInformationID adds i to the "nutritional_information_id" field.
func (m *ProductMutation) AddNutritionalInformationID(i int) {
	if m.addnutritional_information_id != nil {
		*m.addnutritional_information_id += i
	} else {
		m.addnutritional_information_id = &i
	}
}

// AddedNutritionalInformationID returns the value that was added to the "nutritional_information_id" field in this mutation.
func (m *ProductMutation) AddedNutritionalInformationID() (r int, exists bool) {
	v := m.addnutritional_information_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetNutritionalInformationID resets all changes to the "nutritional_information_id" field.
func (m *ProductMutation) ResetNutritionalInformationID() {
	m.nutritional_information_id = nil
	m.addnutritional_information_id = nil
}

// SetPromotionID sets the "promotion_id" field.
func (m *ProductMutation) SetPromotionID(i int) {
	m.promotion_id = &i
	m.addpromotion_id = nil
}

// PromotionID returns the value of the "promotion_id" field in the mutation.
func (m *ProductMutation) PromotionID() (r int, exists bool) {
	v := m.promotion_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPromotionID returns the old "promotion_id" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldPromotionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPromotionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPromotionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPromotionID: %w", err)
	}
	return oldValue.PromotionID, nil
}

// AddPromotionID adds i to the "promotion_id" field.
func (m *ProductMutation) AddPromotionID(i int) {
	if m.addpromotion_id != nil {
		*m.addpromotion_id += i
	} else {
		m.addpromotion_id = &i
	}
}

// AddedPromotionID returns the value that was added to the "promotion_id" field in this mutation.
func (m *ProductMutation) AddedPromotionID() (r int, exists bool) {
	v := m.addpromotion_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPromotionID resets all changes to the "promotion_id" field.
func (m *ProductMutation) ResetPromotionID() {
	m.promotion_id = nil
	m.addpromotion_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProductMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProductMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProductMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProductMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProductMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ProductMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[product.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ProductMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[product.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProductMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, product.FieldUpdatedAt)
}

// Where appends a list predicates to the ProductMutation builder.
func (m *ProductMutation) Where(ps ...predicate.Product) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Product, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, product.FieldName)
	}
	if m.description != nil {
		fields = append(fields, product.FieldDescription)
	}
	if m.product_image != nil {
		fields = append(fields, product.FieldProductImage)
	}
	if m.product_category_id != nil {
		fields = append(fields, product.FieldProductCategoryID)
	}
	if m.ingredients_list_id != nil {
		fields = append(fields, product.FieldIngredientsListID)
	}
	if m.nutritional_information_id != nil {
		fields = append(fields, product.FieldNutritionalInformationID)
	}
	if m.promotion_id != nil {
		fields = append(fields, product.FieldPromotionID)
	}
	if m.created_at != nil {
		fields = append(fields, product.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, product.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldName:
		return m.Name()
	case product.FieldDescription:
		return m.Description()
	case product.FieldProductImage:
		return m.ProductImage()
	case product.FieldProductCategoryID:
		return m.ProductCategoryID()
	case product.FieldIngredientsListID:
		return m.IngredientsListID()
	case product.FieldNutritionalInformationID:
		return m.NutritionalInformationID()
	case product.FieldPromotionID:
		return m.PromotionID()
	case product.FieldCreatedAt:
		return m.CreatedAt()
	case product.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldName:
		return m.OldName(ctx)
	case product.FieldDescription:
		return m.OldDescription(ctx)
	case product.FieldProductImage:
		return m.OldProductImage(ctx)
	case product.FieldProductCategoryID:
		return m.OldProductCategoryID(ctx)
	case product.FieldIngredientsListID:
		return m.OldIngredientsListID(ctx)
	case product.FieldNutritionalInformationID:
		return m.OldNutritionalInformationID(ctx)
	case product.FieldPromotionID:
		return m.OldPromotionID(ctx)
	case product.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case product.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case product.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case product.FieldProductImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductImage(v)
		return nil
	case product.FieldProductCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductCategoryID(v)
		return nil
	case product.FieldIngredientsListID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIngredientsListID(v)
		return nil
	case product.FieldNutritionalInformationID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNutritionalInformationID(v)
		return nil
	case product.FieldPromotionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPromotionID(v)
		return nil
	case product.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case product.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	var fields []string
	if m.addproduct_category_id != nil {
		fields = append(fields, product.FieldProductCategoryID)
	}
	if m.addingredients_list_id != nil {
		fields = append(fields, product.FieldIngredientsListID)
	}
	if m.addnutritional_information_id != nil {
		fields = append(fields, product.FieldNutritionalInformationID)
	}
	if m.addpromotion_id != nil {
		fields = append(fields, product.FieldPromotionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case product.FieldProductCategoryID:
		return m.AddedProductCategoryID()
	case product.FieldIngredientsListID:
		return m.AddedIngredientsListID()
	case product.FieldNutritionalInformationID:
		return m.AddedNutritionalInformationID()
	case product.FieldPromotionID:
		return m.AddedPromotionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	case product.FieldProductCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductCategoryID(v)
		return nil
	case product.FieldIngredientsListID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIngredientsListID(v)
		return nil
	case product.FieldNutritionalInformationID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNutritionalInformationID(v)
		return nil
	case product.FieldPromotionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPromotionID(v)
		return nil
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(product.FieldUpdatedAt) {
		fields = append(fields, product.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	switch name {
	case product.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldName:
		m.ResetName()
		return nil
	case product.FieldDescription:
		m.ResetDescription()
		return nil
	case product.FieldProductImage:
		m.ResetProductImage()
		return nil
	case product.FieldProductCategoryID:
		m.ResetProductCategoryID()
		return nil
	case product.FieldIngredientsListID:
		m.ResetIngredientsListID()
		return nil
	case product.FieldNutritionalInformationID:
		m.ResetNutritionalInformationID()
		return nil
	case product.FieldPromotionID:
		m.ResetPromotionID()
		return nil
	case product.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case product.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Product edge %s", name)
}

// ShoppingCartMutation represents an operation that mutates the ShoppingCart nodes in the graph.
type ShoppingCartMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	clearedFields             map[string]struct{}
	user                      *int
	cleareduser               bool
	shopping_cart_item        *int
	clearedshopping_cart_item bool
	done                      bool
	oldValue                  func(context.Context) (*ShoppingCart, error)
	predicates                []predicate.ShoppingCart
}

var _ ent.Mutation = (*ShoppingCartMutation)(nil)

// shoppingcartOption allows management of the mutation configuration using functional options.
type shoppingcartOption func(*ShoppingCartMutation)

// newShoppingCartMutation creates new mutation for the ShoppingCart entity.
func newShoppingCartMutation(c config, op Op, opts ...shoppingcartOption) *ShoppingCartMutation {
	m := &ShoppingCartMutation{
		config:        c,
		op:            op,
		typ:           TypeShoppingCart,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingCartID sets the ID field of the mutation.
func withShoppingCartID(id int) shoppingcartOption {
	return func(m *ShoppingCartMutation) {
		var (
			err   error
			once  sync.Once
			value *ShoppingCart
		)
		m.oldValue = func(ctx context.Context) (*ShoppingCart, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShoppingCart.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShoppingCart sets the old ShoppingCart of the mutation.
func withShoppingCart(node *ShoppingCart) shoppingcartOption {
	return func(m *ShoppingCartMutation) {
		m.oldValue = func(context.Context) (*ShoppingCart, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingCartMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingCartMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingCartMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShoppingCartMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ShoppingCart.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *ShoppingCartMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ShoppingCartMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ShoppingCart entity.
// If the ShoppingCart object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingCartMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ShoppingCartMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ShoppingCartMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ShoppingCartMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ShoppingCartMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ShoppingCartMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetShoppingCartItemID sets the "shopping_cart_item" edge to the ShoppingCartItem entity by id.
func (m *ShoppingCartMutation) SetShoppingCartItemID(id int) {
	m.shopping_cart_item = &id
}

// ClearShoppingCartItem clears the "shopping_cart_item" edge to the ShoppingCartItem entity.
func (m *ShoppingCartMutation) ClearShoppingCartItem() {
	m.clearedshopping_cart_item = true
}

// ShoppingCartItemCleared reports if the "shopping_cart_item" edge to the ShoppingCartItem entity was cleared.
func (m *ShoppingCartMutation) ShoppingCartItemCleared() bool {
	return m.clearedshopping_cart_item
}

// ShoppingCartItemID returns the "shopping_cart_item" edge ID in the mutation.
func (m *ShoppingCartMutation) ShoppingCartItemID() (id int, exists bool) {
	if m.shopping_cart_item != nil {
		return *m.shopping_cart_item, true
	}
	return
}

// ShoppingCartItemIDs returns the "shopping_cart_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShoppingCartItemID instead. It exists only for internal usage by the builders.
func (m *ShoppingCartMutation) ShoppingCartItemIDs() (ids []int) {
	if id := m.shopping_cart_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShoppingCartItem resets all changes to the "shopping_cart_item" edge.
func (m *ShoppingCartMutation) ResetShoppingCartItem() {
	m.shopping_cart_item = nil
	m.clearedshopping_cart_item = false
}

// Where appends a list predicates to the ShoppingCartMutation builder.
func (m *ShoppingCartMutation) Where(ps ...predicate.ShoppingCart) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShoppingCartMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShoppingCartMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ShoppingCart, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShoppingCartMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShoppingCartMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ShoppingCart).
func (m *ShoppingCartMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingCartMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.user != nil {
		fields = append(fields, shoppingcart.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingCartMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shoppingcart.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingCartMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shoppingcart.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown ShoppingCart field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingCartMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shoppingcart.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingCart field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingCartMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingCartMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingCartMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ShoppingCart numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingCartMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingCartMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingCartMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShoppingCart nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingCartMutation) ResetField(name string) error {
	switch name {
	case shoppingcart.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCart field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingCartMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, shoppingcart.EdgeUser)
	}
	if m.shopping_cart_item != nil {
		edges = append(edges, shoppingcart.EdgeShoppingCartItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingCartMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shoppingcart.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case shoppingcart.EdgeShoppingCartItem:
		if id := m.shopping_cart_item; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingCartMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingCartMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingCartMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, shoppingcart.EdgeUser)
	}
	if m.clearedshopping_cart_item {
		edges = append(edges, shoppingcart.EdgeShoppingCartItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingCartMutation) EdgeCleared(name string) bool {
	switch name {
	case shoppingcart.EdgeUser:
		return m.cleareduser
	case shoppingcart.EdgeShoppingCartItem:
		return m.clearedshopping_cart_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingCartMutation) ClearEdge(name string) error {
	switch name {
	case shoppingcart.EdgeUser:
		m.ClearUser()
		return nil
	case shoppingcart.EdgeShoppingCartItem:
		m.ClearShoppingCartItem()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCart unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingCartMutation) ResetEdge(name string) error {
	switch name {
	case shoppingcart.EdgeUser:
		m.ResetUser()
		return nil
	case shoppingcart.EdgeShoppingCartItem:
		m.ResetShoppingCartItem()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCart edge %s", name)
}

// ShoppingCartItemMutation represents an operation that mutates the ShoppingCartItem nodes in the graph.
type ShoppingCartItemMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	product_item_id      *int
	addproduct_item_id   *int
	quantity             *int
	addquantity          *int
	clearedFields        map[string]struct{}
	shopping_cart        *int
	clearedshopping_cart bool
	done                 bool
	oldValue             func(context.Context) (*ShoppingCartItem, error)
	predicates           []predicate.ShoppingCartItem
}

var _ ent.Mutation = (*ShoppingCartItemMutation)(nil)

// shoppingcartitemOption allows management of the mutation configuration using functional options.
type shoppingcartitemOption func(*ShoppingCartItemMutation)

// newShoppingCartItemMutation creates new mutation for the ShoppingCartItem entity.
func newShoppingCartItemMutation(c config, op Op, opts ...shoppingcartitemOption) *ShoppingCartItemMutation {
	m := &ShoppingCartItemMutation{
		config:        c,
		op:            op,
		typ:           TypeShoppingCartItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingCartItemID sets the ID field of the mutation.
func withShoppingCartItemID(id int) shoppingcartitemOption {
	return func(m *ShoppingCartItemMutation) {
		var (
			err   error
			once  sync.Once
			value *ShoppingCartItem
		)
		m.oldValue = func(ctx context.Context) (*ShoppingCartItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShoppingCartItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShoppingCartItem sets the old ShoppingCartItem of the mutation.
func withShoppingCartItem(node *ShoppingCartItem) shoppingcartitemOption {
	return func(m *ShoppingCartItemMutation) {
		m.oldValue = func(context.Context) (*ShoppingCartItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingCartItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingCartItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingCartItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShoppingCartItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ShoppingCartItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetShoppingCartID sets the "shopping_cart_id" field.
func (m *ShoppingCartItemMutation) SetShoppingCartID(i int) {
	m.shopping_cart = &i
}

// ShoppingCartID returns the value of the "shopping_cart_id" field in the mutation.
func (m *ShoppingCartItemMutation) ShoppingCartID() (r int, exists bool) {
	v := m.shopping_cart
	if v == nil {
		return
	}
	return *v, true
}

// OldShoppingCartID returns the old "shopping_cart_id" field's value of the ShoppingCartItem entity.
// If the ShoppingCartItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingCartItemMutation) OldShoppingCartID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShoppingCartID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShoppingCartID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShoppingCartID: %w", err)
	}
	return oldValue.ShoppingCartID, nil
}

// ResetShoppingCartID resets all changes to the "shopping_cart_id" field.
func (m *ShoppingCartItemMutation) ResetShoppingCartID() {
	m.shopping_cart = nil
}

// SetProductItemID sets the "product_item_id" field.
func (m *ShoppingCartItemMutation) SetProductItemID(i int) {
	m.product_item_id = &i
	m.addproduct_item_id = nil
}

// ProductItemID returns the value of the "product_item_id" field in the mutation.
func (m *ShoppingCartItemMutation) ProductItemID() (r int, exists bool) {
	v := m.product_item_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductItemID returns the old "product_item_id" field's value of the ShoppingCartItem entity.
// If the ShoppingCartItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingCartItemMutation) OldProductItemID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductItemID: %w", err)
	}
	return oldValue.ProductItemID, nil
}

// AddProductItemID adds i to the "product_item_id" field.
func (m *ShoppingCartItemMutation) AddProductItemID(i int) {
	if m.addproduct_item_id != nil {
		*m.addproduct_item_id += i
	} else {
		m.addproduct_item_id = &i
	}
}

// AddedProductItemID returns the value that was added to the "product_item_id" field in this mutation.
func (m *ShoppingCartItemMutation) AddedProductItemID() (r int, exists bool) {
	v := m.addproduct_item_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProductItemID resets all changes to the "product_item_id" field.
func (m *ShoppingCartItemMutation) ResetProductItemID() {
	m.product_item_id = nil
	m.addproduct_item_id = nil
}

// SetQuantity sets the "quantity" field.
func (m *ShoppingCartItemMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *ShoppingCartItemMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the ShoppingCartItem entity.
// If the ShoppingCartItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingCartItemMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *ShoppingCartItemMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *ShoppingCartItemMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *ShoppingCartItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// ClearShoppingCart clears the "shopping_cart" edge to the ShoppingCart entity.
func (m *ShoppingCartItemMutation) ClearShoppingCart() {
	m.clearedshopping_cart = true
}

// ShoppingCartCleared reports if the "shopping_cart" edge to the ShoppingCart entity was cleared.
func (m *ShoppingCartItemMutation) ShoppingCartCleared() bool {
	return m.clearedshopping_cart
}

// ShoppingCartIDs returns the "shopping_cart" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShoppingCartID instead. It exists only for internal usage by the builders.
func (m *ShoppingCartItemMutation) ShoppingCartIDs() (ids []int) {
	if id := m.shopping_cart; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShoppingCart resets all changes to the "shopping_cart" edge.
func (m *ShoppingCartItemMutation) ResetShoppingCart() {
	m.shopping_cart = nil
	m.clearedshopping_cart = false
}

// Where appends a list predicates to the ShoppingCartItemMutation builder.
func (m *ShoppingCartItemMutation) Where(ps ...predicate.ShoppingCartItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShoppingCartItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShoppingCartItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ShoppingCartItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShoppingCartItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShoppingCartItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ShoppingCartItem).
func (m *ShoppingCartItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingCartItemMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.shopping_cart != nil {
		fields = append(fields, shoppingcartitem.FieldShoppingCartID)
	}
	if m.product_item_id != nil {
		fields = append(fields, shoppingcartitem.FieldProductItemID)
	}
	if m.quantity != nil {
		fields = append(fields, shoppingcartitem.FieldQuantity)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingCartItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shoppingcartitem.FieldShoppingCartID:
		return m.ShoppingCartID()
	case shoppingcartitem.FieldProductItemID:
		return m.ProductItemID()
	case shoppingcartitem.FieldQuantity:
		return m.Quantity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingCartItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shoppingcartitem.FieldShoppingCartID:
		return m.OldShoppingCartID(ctx)
	case shoppingcartitem.FieldProductItemID:
		return m.OldProductItemID(ctx)
	case shoppingcartitem.FieldQuantity:
		return m.OldQuantity(ctx)
	}
	return nil, fmt.Errorf("unknown ShoppingCartItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingCartItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shoppingcartitem.FieldShoppingCartID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShoppingCartID(v)
		return nil
	case shoppingcartitem.FieldProductItemID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductItemID(v)
		return nil
	case shoppingcartitem.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingCartItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingCartItemMutation) AddedFields() []string {
	var fields []string
	if m.addproduct_item_id != nil {
		fields = append(fields, shoppingcartitem.FieldProductItemID)
	}
	if m.addquantity != nil {
		fields = append(fields, shoppingcartitem.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingCartItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shoppingcartitem.FieldProductItemID:
		return m.AddedProductItemID()
	case shoppingcartitem.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingCartItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shoppingcartitem.FieldProductItemID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductItemID(v)
		return nil
	case shoppingcartitem.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingCartItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingCartItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingCartItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingCartItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShoppingCartItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingCartItemMutation) ResetField(name string) error {
	switch name {
	case shoppingcartitem.FieldShoppingCartID:
		m.ResetShoppingCartID()
		return nil
	case shoppingcartitem.FieldProductItemID:
		m.ResetProductItemID()
		return nil
	case shoppingcartitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCartItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingCartItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.shopping_cart != nil {
		edges = append(edges, shoppingcartitem.EdgeShoppingCart)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingCartItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shoppingcartitem.EdgeShoppingCart:
		if id := m.shopping_cart; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingCartItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingCartItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingCartItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedshopping_cart {
		edges = append(edges, shoppingcartitem.EdgeShoppingCart)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingCartItemMutation) EdgeCleared(name string) bool {
	switch name {
	case shoppingcartitem.EdgeShoppingCart:
		return m.clearedshopping_cart
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingCartItemMutation) ClearEdge(name string) error {
	switch name {
	case shoppingcartitem.EdgeShoppingCart:
		m.ClearShoppingCart()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCartItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingCartItemMutation) ResetEdge(name string) error {
	switch name {
	case shoppingcartitem.EdgeShoppingCart:
		m.ResetShoppingCart()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCartItem edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	username             *string
	email_address        *string
	password             *string
	first_name           *string
	last_name            *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	user_address         map[int]struct{}
	removeduser_address  map[int]struct{}
	cleareduser_address  bool
	user_review          map[int]struct{}
	removeduser_review   map[int]struct{}
	cleareduser_review   bool
	shopping_cart        map[int]struct{}
	removedshopping_cart map[int]struct{}
	clearedshopping_cart bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmailAddress sets the "email_address" field.
func (m *UserMutation) SetEmailAddress(s string) {
	m.email_address = &s
}

// EmailAddress returns the value of the "email_address" field in the mutation.
func (m *UserMutation) EmailAddress() (r string, exists bool) {
	v := m.email_address
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailAddress returns the old "email_address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailAddress: %w", err)
	}
	return oldValue.EmailAddress, nil
}

// ResetEmailAddress resets all changes to the "email_address" field.
func (m *UserMutation) ResetEmailAddress() {
	m.email_address = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddUserAddresIDs adds the "user_address" edge to the UserAddress entity by ids.
func (m *UserMutation) AddUserAddresIDs(ids ...int) {
	if m.user_address == nil {
		m.user_address = make(map[int]struct{})
	}
	for i := range ids {
		m.user_address[ids[i]] = struct{}{}
	}
}

// ClearUserAddress clears the "user_address" edge to the UserAddress entity.
func (m *UserMutation) ClearUserAddress() {
	m.cleareduser_address = true
}

// UserAddressCleared reports if the "user_address" edge to the UserAddress entity was cleared.
func (m *UserMutation) UserAddressCleared() bool {
	return m.cleareduser_address
}

// RemoveUserAddresIDs removes the "user_address" edge to the UserAddress entity by IDs.
func (m *UserMutation) RemoveUserAddresIDs(ids ...int) {
	if m.removeduser_address == nil {
		m.removeduser_address = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_address, ids[i])
		m.removeduser_address[ids[i]] = struct{}{}
	}
}

// RemovedUserAddress returns the removed IDs of the "user_address" edge to the UserAddress entity.
func (m *UserMutation) RemovedUserAddressIDs() (ids []int) {
	for id := range m.removeduser_address {
		ids = append(ids, id)
	}
	return
}

// UserAddressIDs returns the "user_address" edge IDs in the mutation.
func (m *UserMutation) UserAddressIDs() (ids []int) {
	for id := range m.user_address {
		ids = append(ids, id)
	}
	return
}

// ResetUserAddress resets all changes to the "user_address" edge.
func (m *UserMutation) ResetUserAddress() {
	m.user_address = nil
	m.cleareduser_address = false
	m.removeduser_address = nil
}

// AddUserReviewIDs adds the "user_review" edge to the UserReview entity by ids.
func (m *UserMutation) AddUserReviewIDs(ids ...int) {
	if m.user_review == nil {
		m.user_review = make(map[int]struct{})
	}
	for i := range ids {
		m.user_review[ids[i]] = struct{}{}
	}
}

// ClearUserReview clears the "user_review" edge to the UserReview entity.
func (m *UserMutation) ClearUserReview() {
	m.cleareduser_review = true
}

// UserReviewCleared reports if the "user_review" edge to the UserReview entity was cleared.
func (m *UserMutation) UserReviewCleared() bool {
	return m.cleareduser_review
}

// RemoveUserReviewIDs removes the "user_review" edge to the UserReview entity by IDs.
func (m *UserMutation) RemoveUserReviewIDs(ids ...int) {
	if m.removeduser_review == nil {
		m.removeduser_review = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_review, ids[i])
		m.removeduser_review[ids[i]] = struct{}{}
	}
}

// RemovedUserReview returns the removed IDs of the "user_review" edge to the UserReview entity.
func (m *UserMutation) RemovedUserReviewIDs() (ids []int) {
	for id := range m.removeduser_review {
		ids = append(ids, id)
	}
	return
}

// UserReviewIDs returns the "user_review" edge IDs in the mutation.
func (m *UserMutation) UserReviewIDs() (ids []int) {
	for id := range m.user_review {
		ids = append(ids, id)
	}
	return
}

// ResetUserReview resets all changes to the "user_review" edge.
func (m *UserMutation) ResetUserReview() {
	m.user_review = nil
	m.cleareduser_review = false
	m.removeduser_review = nil
}

// AddShoppingCartIDs adds the "shopping_cart" edge to the ShoppingCart entity by ids.
func (m *UserMutation) AddShoppingCartIDs(ids ...int) {
	if m.shopping_cart == nil {
		m.shopping_cart = make(map[int]struct{})
	}
	for i := range ids {
		m.shopping_cart[ids[i]] = struct{}{}
	}
}

// ClearShoppingCart clears the "shopping_cart" edge to the ShoppingCart entity.
func (m *UserMutation) ClearShoppingCart() {
	m.clearedshopping_cart = true
}

// ShoppingCartCleared reports if the "shopping_cart" edge to the ShoppingCart entity was cleared.
func (m *UserMutation) ShoppingCartCleared() bool {
	return m.clearedshopping_cart
}

// RemoveShoppingCartIDs removes the "shopping_cart" edge to the ShoppingCart entity by IDs.
func (m *UserMutation) RemoveShoppingCartIDs(ids ...int) {
	if m.removedshopping_cart == nil {
		m.removedshopping_cart = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shopping_cart, ids[i])
		m.removedshopping_cart[ids[i]] = struct{}{}
	}
}

// RemovedShoppingCart returns the removed IDs of the "shopping_cart" edge to the ShoppingCart entity.
func (m *UserMutation) RemovedShoppingCartIDs() (ids []int) {
	for id := range m.removedshopping_cart {
		ids = append(ids, id)
	}
	return
}

// ShoppingCartIDs returns the "shopping_cart" edge IDs in the mutation.
func (m *UserMutation) ShoppingCartIDs() (ids []int) {
	for id := range m.shopping_cart {
		ids = append(ids, id)
	}
	return
}

// ResetShoppingCart resets all changes to the "shopping_cart" edge.
func (m *UserMutation) ResetShoppingCart() {
	m.shopping_cart = nil
	m.clearedshopping_cart = false
	m.removedshopping_cart = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email_address != nil {
		fields = append(fields, user.FieldEmailAddress)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmailAddress:
		return m.EmailAddress()
	case user.FieldPassword:
		return m.Password()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmailAddress:
		return m.OldEmailAddress(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmailAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailAddress(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmailAddress:
		m.ResetEmailAddress()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user_address != nil {
		edges = append(edges, user.EdgeUserAddress)
	}
	if m.user_review != nil {
		edges = append(edges, user.EdgeUserReview)
	}
	if m.shopping_cart != nil {
		edges = append(edges, user.EdgeShoppingCart)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserAddress:
		ids := make([]ent.Value, 0, len(m.user_address))
		for id := range m.user_address {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserReview:
		ids := make([]ent.Value, 0, len(m.user_review))
		for id := range m.user_review {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeShoppingCart:
		ids := make([]ent.Value, 0, len(m.shopping_cart))
		for id := range m.shopping_cart {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeduser_address != nil {
		edges = append(edges, user.EdgeUserAddress)
	}
	if m.removeduser_review != nil {
		edges = append(edges, user.EdgeUserReview)
	}
	if m.removedshopping_cart != nil {
		edges = append(edges, user.EdgeShoppingCart)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserAddress:
		ids := make([]ent.Value, 0, len(m.removeduser_address))
		for id := range m.removeduser_address {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserReview:
		ids := make([]ent.Value, 0, len(m.removeduser_review))
		for id := range m.removeduser_review {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeShoppingCart:
		ids := make([]ent.Value, 0, len(m.removedshopping_cart))
		for id := range m.removedshopping_cart {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser_address {
		edges = append(edges, user.EdgeUserAddress)
	}
	if m.cleareduser_review {
		edges = append(edges, user.EdgeUserReview)
	}
	if m.clearedshopping_cart {
		edges = append(edges, user.EdgeShoppingCart)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserAddress:
		return m.cleareduser_address
	case user.EdgeUserReview:
		return m.cleareduser_review
	case user.EdgeShoppingCart:
		return m.clearedshopping_cart
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserAddress:
		m.ResetUserAddress()
		return nil
	case user.EdgeUserReview:
		m.ResetUserReview()
		return nil
	case user.EdgeShoppingCart:
		m.ResetShoppingCart()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserAddressMutation represents an operation that mutates the UserAddress nodes in the graph.
type UserAddressMutation struct {
	config
	op             Op
	typ            string
	id             *int
	is_default     *bool
	clearedFields  map[string]struct{}
	user           *int
	cleareduser    bool
	address        *int
	clearedaddress bool
	done           bool
	oldValue       func(context.Context) (*UserAddress, error)
	predicates     []predicate.UserAddress
}

var _ ent.Mutation = (*UserAddressMutation)(nil)

// useraddressOption allows management of the mutation configuration using functional options.
type useraddressOption func(*UserAddressMutation)

// newUserAddressMutation creates new mutation for the UserAddress entity.
func newUserAddressMutation(c config, op Op, opts ...useraddressOption) *UserAddressMutation {
	m := &UserAddressMutation{
		config:        c,
		op:            op,
		typ:           TypeUserAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserAddressID sets the ID field of the mutation.
func withUserAddressID(id int) useraddressOption {
	return func(m *UserAddressMutation) {
		var (
			err   error
			once  sync.Once
			value *UserAddress
		)
		m.oldValue = func(ctx context.Context) (*UserAddress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserAddress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserAddress sets the old UserAddress of the mutation.
func withUserAddress(node *UserAddress) useraddressOption {
	return func(m *UserAddressMutation) {
		m.oldValue = func(context.Context) (*UserAddress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserAddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserAddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserAddressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserAddressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserAddress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserAddressMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserAddressMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserAddress entity.
// If the UserAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAddressMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserAddressMutation) ResetUserID() {
	m.user = nil
}

// SetAddressID sets the "address_id" field.
func (m *UserAddressMutation) SetAddressID(i int) {
	m.address = &i
}

// AddressID returns the value of the "address_id" field in the mutation.
func (m *UserAddressMutation) AddressID() (r int, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressID returns the old "address_id" field's value of the UserAddress entity.
// If the UserAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAddressMutation) OldAddressID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressID: %w", err)
	}
	return oldValue.AddressID, nil
}

// ResetAddressID resets all changes to the "address_id" field.
func (m *UserAddressMutation) ResetAddressID() {
	m.address = nil
}

// SetIsDefault sets the "is_default" field.
func (m *UserAddressMutation) SetIsDefault(b bool) {
	m.is_default = &b
}

// IsDefault returns the value of the "is_default" field in the mutation.
func (m *UserAddressMutation) IsDefault() (r bool, exists bool) {
	v := m.is_default
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDefault returns the old "is_default" field's value of the UserAddress entity.
// If the UserAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAddressMutation) OldIsDefault(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDefault: %w", err)
	}
	return oldValue.IsDefault, nil
}

// ResetIsDefault resets all changes to the "is_default" field.
func (m *UserAddressMutation) ResetIsDefault() {
	m.is_default = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserAddressMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserAddressMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserAddressMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserAddressMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearAddress clears the "address" edge to the Address entity.
func (m *UserAddressMutation) ClearAddress() {
	m.clearedaddress = true
}

// AddressCleared reports if the "address" edge to the Address entity was cleared.
func (m *UserAddressMutation) AddressCleared() bool {
	return m.clearedaddress
}

// AddressIDs returns the "address" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AddressID instead. It exists only for internal usage by the builders.
func (m *UserAddressMutation) AddressIDs() (ids []int) {
	if id := m.address; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAddress resets all changes to the "address" edge.
func (m *UserAddressMutation) ResetAddress() {
	m.address = nil
	m.clearedaddress = false
}

// Where appends a list predicates to the UserAddressMutation builder.
func (m *UserAddressMutation) Where(ps ...predicate.UserAddress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserAddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserAddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserAddress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserAddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserAddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserAddress).
func (m *UserAddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserAddressMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, useraddress.FieldUserID)
	}
	if m.address != nil {
		fields = append(fields, useraddress.FieldAddressID)
	}
	if m.is_default != nil {
		fields = append(fields, useraddress.FieldIsDefault)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserAddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case useraddress.FieldUserID:
		return m.UserID()
	case useraddress.FieldAddressID:
		return m.AddressID()
	case useraddress.FieldIsDefault:
		return m.IsDefault()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserAddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case useraddress.FieldUserID:
		return m.OldUserID(ctx)
	case useraddress.FieldAddressID:
		return m.OldAddressID(ctx)
	case useraddress.FieldIsDefault:
		return m.OldIsDefault(ctx)
	}
	return nil, fmt.Errorf("unknown UserAddress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserAddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case useraddress.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case useraddress.FieldAddressID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressID(v)
		return nil
	case useraddress.FieldIsDefault:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDefault(v)
		return nil
	}
	return fmt.Errorf("unknown UserAddress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserAddressMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserAddressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserAddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserAddress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserAddressMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserAddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserAddressMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserAddress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserAddressMutation) ResetField(name string) error {
	switch name {
	case useraddress.FieldUserID:
		m.ResetUserID()
		return nil
	case useraddress.FieldAddressID:
		m.ResetAddressID()
		return nil
	case useraddress.FieldIsDefault:
		m.ResetIsDefault()
		return nil
	}
	return fmt.Errorf("unknown UserAddress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserAddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, useraddress.EdgeUser)
	}
	if m.address != nil {
		edges = append(edges, useraddress.EdgeAddress)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserAddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case useraddress.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case useraddress.EdgeAddress:
		if id := m.address; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserAddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserAddressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserAddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, useraddress.EdgeUser)
	}
	if m.clearedaddress {
		edges = append(edges, useraddress.EdgeAddress)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserAddressMutation) EdgeCleared(name string) bool {
	switch name {
	case useraddress.EdgeUser:
		return m.cleareduser
	case useraddress.EdgeAddress:
		return m.clearedaddress
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserAddressMutation) ClearEdge(name string) error {
	switch name {
	case useraddress.EdgeUser:
		m.ClearUser()
		return nil
	case useraddress.EdgeAddress:
		m.ClearAddress()
		return nil
	}
	return fmt.Errorf("unknown UserAddress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserAddressMutation) ResetEdge(name string) error {
	switch name {
	case useraddress.EdgeUser:
		m.ResetUser()
		return nil
	case useraddress.EdgeAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown UserAddress edge %s", name)
}

// UserReviewMutation represents an operation that mutates the UserReview nodes in the graph.
type UserReviewMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	ordered_product_id    *int
	addordered_product_id *int
	rating                *int
	addrating             *int
	review                *string
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	user                  *int
	cleareduser           bool
	done                  bool
	oldValue              func(context.Context) (*UserReview, error)
	predicates            []predicate.UserReview
}

var _ ent.Mutation = (*UserReviewMutation)(nil)

// userreviewOption allows management of the mutation configuration using functional options.
type userreviewOption func(*UserReviewMutation)

// newUserReviewMutation creates new mutation for the UserReview entity.
func newUserReviewMutation(c config, op Op, opts ...userreviewOption) *UserReviewMutation {
	m := &UserReviewMutation{
		config:        c,
		op:            op,
		typ:           TypeUserReview,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserReviewID sets the ID field of the mutation.
func withUserReviewID(id int) userreviewOption {
	return func(m *UserReviewMutation) {
		var (
			err   error
			once  sync.Once
			value *UserReview
		)
		m.oldValue = func(ctx context.Context) (*UserReview, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserReview.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserReview sets the old UserReview of the mutation.
func withUserReview(node *UserReview) userreviewOption {
	return func(m *UserReviewMutation) {
		m.oldValue = func(context.Context) (*UserReview, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserReviewMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserReviewMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserReviewMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserReviewMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserReview.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserReviewMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserReviewMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserReviewMutation) ResetUserID() {
	m.user = nil
}

// SetOrderedProductID sets the "ordered_product_id" field.
func (m *UserReviewMutation) SetOrderedProductID(i int) {
	m.ordered_product_id = &i
	m.addordered_product_id = nil
}

// OrderedProductID returns the value of the "ordered_product_id" field in the mutation.
func (m *UserReviewMutation) OrderedProductID() (r int, exists bool) {
	v := m.ordered_product_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderedProductID returns the old "ordered_product_id" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldOrderedProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderedProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderedProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderedProductID: %w", err)
	}
	return oldValue.OrderedProductID, nil
}

// AddOrderedProductID adds i to the "ordered_product_id" field.
func (m *UserReviewMutation) AddOrderedProductID(i int) {
	if m.addordered_product_id != nil {
		*m.addordered_product_id += i
	} else {
		m.addordered_product_id = &i
	}
}

// AddedOrderedProductID returns the value that was added to the "ordered_product_id" field in this mutation.
func (m *UserReviewMutation) AddedOrderedProductID() (r int, exists bool) {
	v := m.addordered_product_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderedProductID resets all changes to the "ordered_product_id" field.
func (m *UserReviewMutation) ResetOrderedProductID() {
	m.ordered_product_id = nil
	m.addordered_product_id = nil
}

// SetRating sets the "rating" field.
func (m *UserReviewMutation) SetRating(i int) {
	m.rating = &i
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *UserReviewMutation) Rating() (r int, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldRating(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds i to the "rating" field.
func (m *UserReviewMutation) AddRating(i int) {
	if m.addrating != nil {
		*m.addrating += i
	} else {
		m.addrating = &i
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *UserReviewMutation) AddedRating() (r int, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating resets all changes to the "rating" field.
func (m *UserReviewMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
}

// SetReview sets the "review" field.
func (m *UserReviewMutation) SetReview(s string) {
	m.review = &s
}

// Review returns the value of the "review" field in the mutation.
func (m *UserReviewMutation) Review() (r string, exists bool) {
	v := m.review
	if v == nil {
		return
	}
	return *v, true
}

// OldReview returns the old "review" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldReview(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReview is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReview requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReview: %w", err)
	}
	return oldValue.Review, nil
}

// ResetReview resets all changes to the "review" field.
func (m *UserReviewMutation) ResetReview() {
	m.review = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserReviewMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserReviewMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserReviewMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserReviewMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserReviewMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserReviewMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserReviewMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserReviewMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserReviewMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserReviewMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserReviewMutation builder.
func (m *UserReviewMutation) Where(ps ...predicate.UserReview) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserReviewMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserReviewMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserReview, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserReviewMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserReviewMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserReview).
func (m *UserReviewMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserReviewMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user != nil {
		fields = append(fields, userreview.FieldUserID)
	}
	if m.ordered_product_id != nil {
		fields = append(fields, userreview.FieldOrderedProductID)
	}
	if m.rating != nil {
		fields = append(fields, userreview.FieldRating)
	}
	if m.review != nil {
		fields = append(fields, userreview.FieldReview)
	}
	if m.created_at != nil {
		fields = append(fields, userreview.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userreview.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserReviewMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userreview.FieldUserID:
		return m.UserID()
	case userreview.FieldOrderedProductID:
		return m.OrderedProductID()
	case userreview.FieldRating:
		return m.Rating()
	case userreview.FieldReview:
		return m.Review()
	case userreview.FieldCreatedAt:
		return m.CreatedAt()
	case userreview.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserReviewMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userreview.FieldUserID:
		return m.OldUserID(ctx)
	case userreview.FieldOrderedProductID:
		return m.OldOrderedProductID(ctx)
	case userreview.FieldRating:
		return m.OldRating(ctx)
	case userreview.FieldReview:
		return m.OldReview(ctx)
	case userreview.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userreview.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserReview field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserReviewMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userreview.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userreview.FieldOrderedProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderedProductID(v)
		return nil
	case userreview.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	case userreview.FieldReview:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReview(v)
		return nil
	case userreview.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userreview.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserReview field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserReviewMutation) AddedFields() []string {
	var fields []string
	if m.addordered_product_id != nil {
		fields = append(fields, userreview.FieldOrderedProductID)
	}
	if m.addrating != nil {
		fields = append(fields, userreview.FieldRating)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserReviewMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userreview.FieldOrderedProductID:
		return m.AddedOrderedProductID()
	case userreview.FieldRating:
		return m.AddedRating()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserReviewMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userreview.FieldOrderedProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderedProductID(v)
		return nil
	case userreview.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	}
	return fmt.Errorf("unknown UserReview numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserReviewMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserReviewMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserReviewMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserReview nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserReviewMutation) ResetField(name string) error {
	switch name {
	case userreview.FieldUserID:
		m.ResetUserID()
		return nil
	case userreview.FieldOrderedProductID:
		m.ResetOrderedProductID()
		return nil
	case userreview.FieldRating:
		m.ResetRating()
		return nil
	case userreview.FieldReview:
		m.ResetReview()
		return nil
	case userreview.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userreview.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserReview field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserReviewMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, userreview.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserReviewMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userreview.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserReviewMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserReviewMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserReviewMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, userreview.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserReviewMutation) EdgeCleared(name string) bool {
	switch name {
	case userreview.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserReviewMutation) ClearEdge(name string) error {
	switch name {
	case userreview.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserReview unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserReviewMutation) ResetEdge(name string) error {
	switch name {
	case userreview.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserReview edge %s", name)
}
