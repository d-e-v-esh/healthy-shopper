// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"healthyshopper/ent/address"
	"healthyshopper/ent/ingredientstable"
	"healthyshopper/ent/nutritionalinformation"
	"healthyshopper/ent/nutritionalinformationtable"
	"healthyshopper/ent/orderline"
	"healthyshopper/ent/orderstatus"
	"healthyshopper/ent/predicate"
	"healthyshopper/ent/product"
	"healthyshopper/ent/productitem"
	"healthyshopper/ent/promotion"
	"healthyshopper/ent/shippingaddress"
	"healthyshopper/ent/shippingmethod"
	"healthyshopper/ent/shoporder"
	"healthyshopper/ent/shoppingcart"
	"healthyshopper/ent/shoppingcartitem"
	"healthyshopper/ent/user"
	"healthyshopper/ent/useraddress"
	"healthyshopper/ent/userreview"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAddress                     = "Address"
	TypeIngredientsTable            = "IngredientsTable"
	TypeNutritionalInformation      = "NutritionalInformation"
	TypeNutritionalInformationTable = "NutritionalInformationTable"
	TypeOrderLine                   = "OrderLine"
	TypeOrderStatus                 = "OrderStatus"
	TypeProduct                     = "Product"
	TypeProductItem                 = "ProductItem"
	TypePromotion                   = "Promotion"
	TypeShippingAddress             = "ShippingAddress"
	TypeShippingMethod              = "ShippingMethod"
	TypeShopOrder                   = "ShopOrder"
	TypeShoppingCart                = "ShoppingCart"
	TypeShoppingCartItem            = "ShoppingCartItem"
	TypeUser                        = "User"
	TypeUserAddress                 = "UserAddress"
	TypeUserReview                  = "UserReview"
)

// AddressMutation represents an operation that mutates the Address nodes in the graph.
type AddressMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	phone_number        *string
	address_line1       *string
	address_line2       *string
	city                *string
	state               *string
	country             *string
	postal_code         *string
	clearedFields       map[string]struct{}
	user_address        map[int]struct{}
	removeduser_address map[int]struct{}
	cleareduser_address bool
	done                bool
	oldValue            func(context.Context) (*Address, error)
	predicates          []predicate.Address
}

var _ ent.Mutation = (*AddressMutation)(nil)

// addressOption allows management of the mutation configuration using functional options.
type addressOption func(*AddressMutation)

// newAddressMutation creates new mutation for the Address entity.
func newAddressMutation(c config, op Op, opts ...addressOption) *AddressMutation {
	m := &AddressMutation{
		config:        c,
		op:            op,
		typ:           TypeAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAddressID sets the ID field of the mutation.
func withAddressID(id int) addressOption {
	return func(m *AddressMutation) {
		var (
			err   error
			once  sync.Once
			value *Address
		)
		m.oldValue = func(ctx context.Context) (*Address, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Address.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAddress sets the old Address of the mutation.
func withAddress(node *Address) addressOption {
	return func(m *AddressMutation) {
		m.oldValue = func(context.Context) (*Address, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AddressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AddressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Address.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPhoneNumber sets the "phone_number" field.
func (m *AddressMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *AddressMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *AddressMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetAddressLine1 sets the "address_line1" field.
func (m *AddressMutation) SetAddressLine1(s string) {
	m.address_line1 = &s
}

// AddressLine1 returns the value of the "address_line1" field in the mutation.
func (m *AddressMutation) AddressLine1() (r string, exists bool) {
	v := m.address_line1
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressLine1 returns the old "address_line1" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldAddressLine1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressLine1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressLine1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressLine1: %w", err)
	}
	return oldValue.AddressLine1, nil
}

// ResetAddressLine1 resets all changes to the "address_line1" field.
func (m *AddressMutation) ResetAddressLine1() {
	m.address_line1 = nil
}

// SetAddressLine2 sets the "address_line2" field.
func (m *AddressMutation) SetAddressLine2(s string) {
	m.address_line2 = &s
}

// AddressLine2 returns the value of the "address_line2" field in the mutation.
func (m *AddressMutation) AddressLine2() (r string, exists bool) {
	v := m.address_line2
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressLine2 returns the old "address_line2" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldAddressLine2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressLine2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressLine2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressLine2: %w", err)
	}
	return oldValue.AddressLine2, nil
}

// ClearAddressLine2 clears the value of the "address_line2" field.
func (m *AddressMutation) ClearAddressLine2() {
	m.address_line2 = nil
	m.clearedFields[address.FieldAddressLine2] = struct{}{}
}

// AddressLine2Cleared returns if the "address_line2" field was cleared in this mutation.
func (m *AddressMutation) AddressLine2Cleared() bool {
	_, ok := m.clearedFields[address.FieldAddressLine2]
	return ok
}

// ResetAddressLine2 resets all changes to the "address_line2" field.
func (m *AddressMutation) ResetAddressLine2() {
	m.address_line2 = nil
	delete(m.clearedFields, address.FieldAddressLine2)
}

// SetCity sets the "city" field.
func (m *AddressMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *AddressMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *AddressMutation) ResetCity() {
	m.city = nil
}

// SetState sets the "state" field.
func (m *AddressMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *AddressMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *AddressMutation) ResetState() {
	m.state = nil
}

// SetCountry sets the "country" field.
func (m *AddressMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *AddressMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *AddressMutation) ResetCountry() {
	m.country = nil
}

// SetPostalCode sets the "postal_code" field.
func (m *AddressMutation) SetPostalCode(s string) {
	m.postal_code = &s
}

// PostalCode returns the value of the "postal_code" field in the mutation.
func (m *AddressMutation) PostalCode() (r string, exists bool) {
	v := m.postal_code
	if v == nil {
		return
	}
	return *v, true
}

// OldPostalCode returns the old "postal_code" field's value of the Address entity.
// If the Address object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressMutation) OldPostalCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostalCode: %w", err)
	}
	return oldValue.PostalCode, nil
}

// ResetPostalCode resets all changes to the "postal_code" field.
func (m *AddressMutation) ResetPostalCode() {
	m.postal_code = nil
}

// AddUserAddresIDs adds the "user_address" edge to the UserAddress entity by ids.
func (m *AddressMutation) AddUserAddresIDs(ids ...int) {
	if m.user_address == nil {
		m.user_address = make(map[int]struct{})
	}
	for i := range ids {
		m.user_address[ids[i]] = struct{}{}
	}
}

// ClearUserAddress clears the "user_address" edge to the UserAddress entity.
func (m *AddressMutation) ClearUserAddress() {
	m.cleareduser_address = true
}

// UserAddressCleared reports if the "user_address" edge to the UserAddress entity was cleared.
func (m *AddressMutation) UserAddressCleared() bool {
	return m.cleareduser_address
}

// RemoveUserAddresIDs removes the "user_address" edge to the UserAddress entity by IDs.
func (m *AddressMutation) RemoveUserAddresIDs(ids ...int) {
	if m.removeduser_address == nil {
		m.removeduser_address = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_address, ids[i])
		m.removeduser_address[ids[i]] = struct{}{}
	}
}

// RemovedUserAddress returns the removed IDs of the "user_address" edge to the UserAddress entity.
func (m *AddressMutation) RemovedUserAddressIDs() (ids []int) {
	for id := range m.removeduser_address {
		ids = append(ids, id)
	}
	return
}

// UserAddressIDs returns the "user_address" edge IDs in the mutation.
func (m *AddressMutation) UserAddressIDs() (ids []int) {
	for id := range m.user_address {
		ids = append(ids, id)
	}
	return
}

// ResetUserAddress resets all changes to the "user_address" edge.
func (m *AddressMutation) ResetUserAddress() {
	m.user_address = nil
	m.cleareduser_address = false
	m.removeduser_address = nil
}

// Where appends a list predicates to the AddressMutation builder.
func (m *AddressMutation) Where(ps ...predicate.Address) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Address, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Address).
func (m *AddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AddressMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.phone_number != nil {
		fields = append(fields, address.FieldPhoneNumber)
	}
	if m.address_line1 != nil {
		fields = append(fields, address.FieldAddressLine1)
	}
	if m.address_line2 != nil {
		fields = append(fields, address.FieldAddressLine2)
	}
	if m.city != nil {
		fields = append(fields, address.FieldCity)
	}
	if m.state != nil {
		fields = append(fields, address.FieldState)
	}
	if m.country != nil {
		fields = append(fields, address.FieldCountry)
	}
	if m.postal_code != nil {
		fields = append(fields, address.FieldPostalCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case address.FieldPhoneNumber:
		return m.PhoneNumber()
	case address.FieldAddressLine1:
		return m.AddressLine1()
	case address.FieldAddressLine2:
		return m.AddressLine2()
	case address.FieldCity:
		return m.City()
	case address.FieldState:
		return m.State()
	case address.FieldCountry:
		return m.Country()
	case address.FieldPostalCode:
		return m.PostalCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case address.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case address.FieldAddressLine1:
		return m.OldAddressLine1(ctx)
	case address.FieldAddressLine2:
		return m.OldAddressLine2(ctx)
	case address.FieldCity:
		return m.OldCity(ctx)
	case address.FieldState:
		return m.OldState(ctx)
	case address.FieldCountry:
		return m.OldCountry(ctx)
	case address.FieldPostalCode:
		return m.OldPostalCode(ctx)
	}
	return nil, fmt.Errorf("unknown Address field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case address.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case address.FieldAddressLine1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressLine1(v)
		return nil
	case address.FieldAddressLine2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressLine2(v)
		return nil
	case address.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case address.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case address.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case address.FieldPostalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostalCode(v)
		return nil
	}
	return fmt.Errorf("unknown Address field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AddressMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AddressMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Address numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AddressMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(address.FieldAddressLine2) {
		fields = append(fields, address.FieldAddressLine2)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AddressMutation) ClearField(name string) error {
	switch name {
	case address.FieldAddressLine2:
		m.ClearAddressLine2()
		return nil
	}
	return fmt.Errorf("unknown Address nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AddressMutation) ResetField(name string) error {
	switch name {
	case address.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case address.FieldAddressLine1:
		m.ResetAddressLine1()
		return nil
	case address.FieldAddressLine2:
		m.ResetAddressLine2()
		return nil
	case address.FieldCity:
		m.ResetCity()
		return nil
	case address.FieldState:
		m.ResetState()
		return nil
	case address.FieldCountry:
		m.ResetCountry()
		return nil
	case address.FieldPostalCode:
		m.ResetPostalCode()
		return nil
	}
	return fmt.Errorf("unknown Address field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user_address != nil {
		edges = append(edges, address.EdgeUserAddress)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case address.EdgeUserAddress:
		ids := make([]ent.Value, 0, len(m.user_address))
		for id := range m.user_address {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeduser_address != nil {
		edges = append(edges, address.EdgeUserAddress)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AddressMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case address.EdgeUserAddress:
		ids := make([]ent.Value, 0, len(m.removeduser_address))
		for id := range m.removeduser_address {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser_address {
		edges = append(edges, address.EdgeUserAddress)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AddressMutation) EdgeCleared(name string) bool {
	switch name {
	case address.EdgeUserAddress:
		return m.cleareduser_address
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AddressMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Address unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AddressMutation) ResetEdge(name string) error {
	switch name {
	case address.EdgeUserAddress:
		m.ResetUserAddress()
		return nil
	}
	return fmt.Errorf("unknown Address edge %s", name)
}

// IngredientsTableMutation represents an operation that mutates the IngredientsTable nodes in the graph.
type IngredientsTableMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	description    *string
	clearedFields  map[string]struct{}
	product        map[int]struct{}
	removedproduct map[int]struct{}
	clearedproduct bool
	done           bool
	oldValue       func(context.Context) (*IngredientsTable, error)
	predicates     []predicate.IngredientsTable
}

var _ ent.Mutation = (*IngredientsTableMutation)(nil)

// ingredientstableOption allows management of the mutation configuration using functional options.
type ingredientstableOption func(*IngredientsTableMutation)

// newIngredientsTableMutation creates new mutation for the IngredientsTable entity.
func newIngredientsTableMutation(c config, op Op, opts ...ingredientstableOption) *IngredientsTableMutation {
	m := &IngredientsTableMutation{
		config:        c,
		op:            op,
		typ:           TypeIngredientsTable,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIngredientsTableID sets the ID field of the mutation.
func withIngredientsTableID(id int) ingredientstableOption {
	return func(m *IngredientsTableMutation) {
		var (
			err   error
			once  sync.Once
			value *IngredientsTable
		)
		m.oldValue = func(ctx context.Context) (*IngredientsTable, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IngredientsTable.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIngredientsTable sets the old IngredientsTable of the mutation.
func withIngredientsTable(node *IngredientsTable) ingredientstableOption {
	return func(m *IngredientsTableMutation) {
		m.oldValue = func(context.Context) (*IngredientsTable, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IngredientsTableMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IngredientsTableMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IngredientsTableMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IngredientsTableMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IngredientsTable.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *IngredientsTableMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IngredientsTableMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the IngredientsTable entity.
// If the IngredientsTable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientsTableMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IngredientsTableMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *IngredientsTableMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *IngredientsTableMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the IngredientsTable entity.
// If the IngredientsTable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientsTableMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *IngredientsTableMutation) ResetDescription() {
	m.description = nil
}

// AddProductIDs adds the "product" edge to the Product entity by ids.
func (m *IngredientsTableMutation) AddProductIDs(ids ...int) {
	if m.product == nil {
		m.product = make(map[int]struct{})
	}
	for i := range ids {
		m.product[ids[i]] = struct{}{}
	}
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *IngredientsTableMutation) ClearProduct() {
	m.clearedproduct = true
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *IngredientsTableMutation) ProductCleared() bool {
	return m.clearedproduct
}

// RemoveProductIDs removes the "product" edge to the Product entity by IDs.
func (m *IngredientsTableMutation) RemoveProductIDs(ids ...int) {
	if m.removedproduct == nil {
		m.removedproduct = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.product, ids[i])
		m.removedproduct[ids[i]] = struct{}{}
	}
}

// RemovedProduct returns the removed IDs of the "product" edge to the Product entity.
func (m *IngredientsTableMutation) RemovedProductIDs() (ids []int) {
	for id := range m.removedproduct {
		ids = append(ids, id)
	}
	return
}

// ProductIDs returns the "product" edge IDs in the mutation.
func (m *IngredientsTableMutation) ProductIDs() (ids []int) {
	for id := range m.product {
		ids = append(ids, id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *IngredientsTableMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
	m.removedproduct = nil
}

// Where appends a list predicates to the IngredientsTableMutation builder.
func (m *IngredientsTableMutation) Where(ps ...predicate.IngredientsTable) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IngredientsTableMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IngredientsTableMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IngredientsTable, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IngredientsTableMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IngredientsTableMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IngredientsTable).
func (m *IngredientsTableMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IngredientsTableMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, ingredientstable.FieldName)
	}
	if m.description != nil {
		fields = append(fields, ingredientstable.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IngredientsTableMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ingredientstable.FieldName:
		return m.Name()
	case ingredientstable.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IngredientsTableMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ingredientstable.FieldName:
		return m.OldName(ctx)
	case ingredientstable.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown IngredientsTable field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IngredientsTableMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ingredientstable.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case ingredientstable.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown IngredientsTable field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IngredientsTableMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IngredientsTableMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IngredientsTableMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IngredientsTable numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IngredientsTableMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IngredientsTableMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IngredientsTableMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IngredientsTable nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IngredientsTableMutation) ResetField(name string) error {
	switch name {
	case ingredientstable.FieldName:
		m.ResetName()
		return nil
	case ingredientstable.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown IngredientsTable field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IngredientsTableMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.product != nil {
		edges = append(edges, ingredientstable.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IngredientsTableMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ingredientstable.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.product))
		for id := range m.product {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IngredientsTableMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproduct != nil {
		edges = append(edges, ingredientstable.EdgeProduct)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IngredientsTableMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ingredientstable.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.removedproduct))
		for id := range m.removedproduct {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IngredientsTableMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproduct {
		edges = append(edges, ingredientstable.EdgeProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IngredientsTableMutation) EdgeCleared(name string) bool {
	switch name {
	case ingredientstable.EdgeProduct:
		return m.clearedproduct
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IngredientsTableMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown IngredientsTable unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IngredientsTableMutation) ResetEdge(name string) error {
	switch name {
	case ingredientstable.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown IngredientsTable edge %s", name)
}

// NutritionalInformationMutation represents an operation that mutates the NutritionalInformation nodes in the graph.
type NutritionalInformationMutation struct {
	config
	op                                   Op
	typ                                  string
	id                                   *int
	n_value                              *float64
	addn_value                           *float64
	n_measurement_unit                   *string
	clearedFields                        map[string]struct{}
	product                              map[int]struct{}
	removedproduct                       map[int]struct{}
	clearedproduct                       bool
	nutritional_information_table        *int
	clearednutritional_information_table bool
	done                                 bool
	oldValue                             func(context.Context) (*NutritionalInformation, error)
	predicates                           []predicate.NutritionalInformation
}

var _ ent.Mutation = (*NutritionalInformationMutation)(nil)

// nutritionalinformationOption allows management of the mutation configuration using functional options.
type nutritionalinformationOption func(*NutritionalInformationMutation)

// newNutritionalInformationMutation creates new mutation for the NutritionalInformation entity.
func newNutritionalInformationMutation(c config, op Op, opts ...nutritionalinformationOption) *NutritionalInformationMutation {
	m := &NutritionalInformationMutation{
		config:        c,
		op:            op,
		typ:           TypeNutritionalInformation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNutritionalInformationID sets the ID field of the mutation.
func withNutritionalInformationID(id int) nutritionalinformationOption {
	return func(m *NutritionalInformationMutation) {
		var (
			err   error
			once  sync.Once
			value *NutritionalInformation
		)
		m.oldValue = func(ctx context.Context) (*NutritionalInformation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NutritionalInformation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNutritionalInformation sets the old NutritionalInformation of the mutation.
func withNutritionalInformation(node *NutritionalInformation) nutritionalinformationOption {
	return func(m *NutritionalInformationMutation) {
		m.oldValue = func(context.Context) (*NutritionalInformation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NutritionalInformationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NutritionalInformationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NutritionalInformationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NutritionalInformationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NutritionalInformation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNutritionalInformationTableID sets the "nutritional_information_table_id" field.
func (m *NutritionalInformationMutation) SetNutritionalInformationTableID(i int) {
	m.nutritional_information_table = &i
}

// NutritionalInformationTableID returns the value of the "nutritional_information_table_id" field in the mutation.
func (m *NutritionalInformationMutation) NutritionalInformationTableID() (r int, exists bool) {
	v := m.nutritional_information_table
	if v == nil {
		return
	}
	return *v, true
}

// OldNutritionalInformationTableID returns the old "nutritional_information_table_id" field's value of the NutritionalInformation entity.
// If the NutritionalInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NutritionalInformationMutation) OldNutritionalInformationTableID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNutritionalInformationTableID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNutritionalInformationTableID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNutritionalInformationTableID: %w", err)
	}
	return oldValue.NutritionalInformationTableID, nil
}

// ResetNutritionalInformationTableID resets all changes to the "nutritional_information_table_id" field.
func (m *NutritionalInformationMutation) ResetNutritionalInformationTableID() {
	m.nutritional_information_table = nil
}

// SetNValue sets the "n_value" field.
func (m *NutritionalInformationMutation) SetNValue(f float64) {
	m.n_value = &f
	m.addn_value = nil
}

// NValue returns the value of the "n_value" field in the mutation.
func (m *NutritionalInformationMutation) NValue() (r float64, exists bool) {
	v := m.n_value
	if v == nil {
		return
	}
	return *v, true
}

// OldNValue returns the old "n_value" field's value of the NutritionalInformation entity.
// If the NutritionalInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NutritionalInformationMutation) OldNValue(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNValue: %w", err)
	}
	return oldValue.NValue, nil
}

// AddNValue adds f to the "n_value" field.
func (m *NutritionalInformationMutation) AddNValue(f float64) {
	if m.addn_value != nil {
		*m.addn_value += f
	} else {
		m.addn_value = &f
	}
}

// AddedNValue returns the value that was added to the "n_value" field in this mutation.
func (m *NutritionalInformationMutation) AddedNValue() (r float64, exists bool) {
	v := m.addn_value
	if v == nil {
		return
	}
	return *v, true
}

// ResetNValue resets all changes to the "n_value" field.
func (m *NutritionalInformationMutation) ResetNValue() {
	m.n_value = nil
	m.addn_value = nil
}

// SetNMeasurementUnit sets the "n_measurement_unit" field.
func (m *NutritionalInformationMutation) SetNMeasurementUnit(s string) {
	m.n_measurement_unit = &s
}

// NMeasurementUnit returns the value of the "n_measurement_unit" field in the mutation.
func (m *NutritionalInformationMutation) NMeasurementUnit() (r string, exists bool) {
	v := m.n_measurement_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldNMeasurementUnit returns the old "n_measurement_unit" field's value of the NutritionalInformation entity.
// If the NutritionalInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NutritionalInformationMutation) OldNMeasurementUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNMeasurementUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNMeasurementUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNMeasurementUnit: %w", err)
	}
	return oldValue.NMeasurementUnit, nil
}

// ResetNMeasurementUnit resets all changes to the "n_measurement_unit" field.
func (m *NutritionalInformationMutation) ResetNMeasurementUnit() {
	m.n_measurement_unit = nil
}

// AddProductIDs adds the "product" edge to the Product entity by ids.
func (m *NutritionalInformationMutation) AddProductIDs(ids ...int) {
	if m.product == nil {
		m.product = make(map[int]struct{})
	}
	for i := range ids {
		m.product[ids[i]] = struct{}{}
	}
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *NutritionalInformationMutation) ClearProduct() {
	m.clearedproduct = true
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *NutritionalInformationMutation) ProductCleared() bool {
	return m.clearedproduct
}

// RemoveProductIDs removes the "product" edge to the Product entity by IDs.
func (m *NutritionalInformationMutation) RemoveProductIDs(ids ...int) {
	if m.removedproduct == nil {
		m.removedproduct = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.product, ids[i])
		m.removedproduct[ids[i]] = struct{}{}
	}
}

// RemovedProduct returns the removed IDs of the "product" edge to the Product entity.
func (m *NutritionalInformationMutation) RemovedProductIDs() (ids []int) {
	for id := range m.removedproduct {
		ids = append(ids, id)
	}
	return
}

// ProductIDs returns the "product" edge IDs in the mutation.
func (m *NutritionalInformationMutation) ProductIDs() (ids []int) {
	for id := range m.product {
		ids = append(ids, id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *NutritionalInformationMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
	m.removedproduct = nil
}

// ClearNutritionalInformationTable clears the "nutritional_information_table" edge to the NutritionalInformationTable entity.
func (m *NutritionalInformationMutation) ClearNutritionalInformationTable() {
	m.clearednutritional_information_table = true
}

// NutritionalInformationTableCleared reports if the "nutritional_information_table" edge to the NutritionalInformationTable entity was cleared.
func (m *NutritionalInformationMutation) NutritionalInformationTableCleared() bool {
	return m.clearednutritional_information_table
}

// NutritionalInformationTableIDs returns the "nutritional_information_table" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NutritionalInformationTableID instead. It exists only for internal usage by the builders.
func (m *NutritionalInformationMutation) NutritionalInformationTableIDs() (ids []int) {
	if id := m.nutritional_information_table; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNutritionalInformationTable resets all changes to the "nutritional_information_table" edge.
func (m *NutritionalInformationMutation) ResetNutritionalInformationTable() {
	m.nutritional_information_table = nil
	m.clearednutritional_information_table = false
}

// Where appends a list predicates to the NutritionalInformationMutation builder.
func (m *NutritionalInformationMutation) Where(ps ...predicate.NutritionalInformation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NutritionalInformationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NutritionalInformationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NutritionalInformation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NutritionalInformationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NutritionalInformationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NutritionalInformation).
func (m *NutritionalInformationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NutritionalInformationMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.nutritional_information_table != nil {
		fields = append(fields, nutritionalinformation.FieldNutritionalInformationTableID)
	}
	if m.n_value != nil {
		fields = append(fields, nutritionalinformation.FieldNValue)
	}
	if m.n_measurement_unit != nil {
		fields = append(fields, nutritionalinformation.FieldNMeasurementUnit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NutritionalInformationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nutritionalinformation.FieldNutritionalInformationTableID:
		return m.NutritionalInformationTableID()
	case nutritionalinformation.FieldNValue:
		return m.NValue()
	case nutritionalinformation.FieldNMeasurementUnit:
		return m.NMeasurementUnit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NutritionalInformationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nutritionalinformation.FieldNutritionalInformationTableID:
		return m.OldNutritionalInformationTableID(ctx)
	case nutritionalinformation.FieldNValue:
		return m.OldNValue(ctx)
	case nutritionalinformation.FieldNMeasurementUnit:
		return m.OldNMeasurementUnit(ctx)
	}
	return nil, fmt.Errorf("unknown NutritionalInformation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NutritionalInformationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nutritionalinformation.FieldNutritionalInformationTableID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNutritionalInformationTableID(v)
		return nil
	case nutritionalinformation.FieldNValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNValue(v)
		return nil
	case nutritionalinformation.FieldNMeasurementUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNMeasurementUnit(v)
		return nil
	}
	return fmt.Errorf("unknown NutritionalInformation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NutritionalInformationMutation) AddedFields() []string {
	var fields []string
	if m.addn_value != nil {
		fields = append(fields, nutritionalinformation.FieldNValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NutritionalInformationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case nutritionalinformation.FieldNValue:
		return m.AddedNValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NutritionalInformationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case nutritionalinformation.FieldNValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNValue(v)
		return nil
	}
	return fmt.Errorf("unknown NutritionalInformation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NutritionalInformationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NutritionalInformationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NutritionalInformationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NutritionalInformation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NutritionalInformationMutation) ResetField(name string) error {
	switch name {
	case nutritionalinformation.FieldNutritionalInformationTableID:
		m.ResetNutritionalInformationTableID()
		return nil
	case nutritionalinformation.FieldNValue:
		m.ResetNValue()
		return nil
	case nutritionalinformation.FieldNMeasurementUnit:
		m.ResetNMeasurementUnit()
		return nil
	}
	return fmt.Errorf("unknown NutritionalInformation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NutritionalInformationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.product != nil {
		edges = append(edges, nutritionalinformation.EdgeProduct)
	}
	if m.nutritional_information_table != nil {
		edges = append(edges, nutritionalinformation.EdgeNutritionalInformationTable)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NutritionalInformationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nutritionalinformation.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.product))
		for id := range m.product {
			ids = append(ids, id)
		}
		return ids
	case nutritionalinformation.EdgeNutritionalInformationTable:
		if id := m.nutritional_information_table; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NutritionalInformationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedproduct != nil {
		edges = append(edges, nutritionalinformation.EdgeProduct)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NutritionalInformationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nutritionalinformation.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.removedproduct))
		for id := range m.removedproduct {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NutritionalInformationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproduct {
		edges = append(edges, nutritionalinformation.EdgeProduct)
	}
	if m.clearednutritional_information_table {
		edges = append(edges, nutritionalinformation.EdgeNutritionalInformationTable)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NutritionalInformationMutation) EdgeCleared(name string) bool {
	switch name {
	case nutritionalinformation.EdgeProduct:
		return m.clearedproduct
	case nutritionalinformation.EdgeNutritionalInformationTable:
		return m.clearednutritional_information_table
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NutritionalInformationMutation) ClearEdge(name string) error {
	switch name {
	case nutritionalinformation.EdgeNutritionalInformationTable:
		m.ClearNutritionalInformationTable()
		return nil
	}
	return fmt.Errorf("unknown NutritionalInformation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NutritionalInformationMutation) ResetEdge(name string) error {
	switch name {
	case nutritionalinformation.EdgeProduct:
		m.ResetProduct()
		return nil
	case nutritionalinformation.EdgeNutritionalInformationTable:
		m.ResetNutritionalInformationTable()
		return nil
	}
	return fmt.Errorf("unknown NutritionalInformation edge %s", name)
}

// NutritionalInformationTableMutation represents an operation that mutates the NutritionalInformationTable nodes in the graph.
type NutritionalInformationTableMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	parameter                      *string
	value                          *float64
	addvalue                       *float64
	measurement_unit               *string
	clearedFields                  map[string]struct{}
	nutritional_information        map[int]struct{}
	removednutritional_information map[int]struct{}
	clearednutritional_information bool
	done                           bool
	oldValue                       func(context.Context) (*NutritionalInformationTable, error)
	predicates                     []predicate.NutritionalInformationTable
}

var _ ent.Mutation = (*NutritionalInformationTableMutation)(nil)

// nutritionalinformationtableOption allows management of the mutation configuration using functional options.
type nutritionalinformationtableOption func(*NutritionalInformationTableMutation)

// newNutritionalInformationTableMutation creates new mutation for the NutritionalInformationTable entity.
func newNutritionalInformationTableMutation(c config, op Op, opts ...nutritionalinformationtableOption) *NutritionalInformationTableMutation {
	m := &NutritionalInformationTableMutation{
		config:        c,
		op:            op,
		typ:           TypeNutritionalInformationTable,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNutritionalInformationTableID sets the ID field of the mutation.
func withNutritionalInformationTableID(id int) nutritionalinformationtableOption {
	return func(m *NutritionalInformationTableMutation) {
		var (
			err   error
			once  sync.Once
			value *NutritionalInformationTable
		)
		m.oldValue = func(ctx context.Context) (*NutritionalInformationTable, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NutritionalInformationTable.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNutritionalInformationTable sets the old NutritionalInformationTable of the mutation.
func withNutritionalInformationTable(node *NutritionalInformationTable) nutritionalinformationtableOption {
	return func(m *NutritionalInformationTableMutation) {
		m.oldValue = func(context.Context) (*NutritionalInformationTable, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NutritionalInformationTableMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NutritionalInformationTableMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NutritionalInformationTableMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NutritionalInformationTableMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NutritionalInformationTable.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetParameter sets the "parameter" field.
func (m *NutritionalInformationTableMutation) SetParameter(s string) {
	m.parameter = &s
}

// Parameter returns the value of the "parameter" field in the mutation.
func (m *NutritionalInformationTableMutation) Parameter() (r string, exists bool) {
	v := m.parameter
	if v == nil {
		return
	}
	return *v, true
}

// OldParameter returns the old "parameter" field's value of the NutritionalInformationTable entity.
// If the NutritionalInformationTable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NutritionalInformationTableMutation) OldParameter(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParameter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParameter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParameter: %w", err)
	}
	return oldValue.Parameter, nil
}

// ResetParameter resets all changes to the "parameter" field.
func (m *NutritionalInformationTableMutation) ResetParameter() {
	m.parameter = nil
}

// SetValue sets the "value" field.
func (m *NutritionalInformationTableMutation) SetValue(f float64) {
	m.value = &f
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *NutritionalInformationTableMutation) Value() (r float64, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the NutritionalInformationTable entity.
// If the NutritionalInformationTable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NutritionalInformationTableMutation) OldValue(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds f to the "value" field.
func (m *NutritionalInformationTableMutation) AddValue(f float64) {
	if m.addvalue != nil {
		*m.addvalue += f
	} else {
		m.addvalue = &f
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *NutritionalInformationTableMutation) AddedValue() (r float64, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *NutritionalInformationTableMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetMeasurementUnit sets the "measurement_unit" field.
func (m *NutritionalInformationTableMutation) SetMeasurementUnit(s string) {
	m.measurement_unit = &s
}

// MeasurementUnit returns the value of the "measurement_unit" field in the mutation.
func (m *NutritionalInformationTableMutation) MeasurementUnit() (r string, exists bool) {
	v := m.measurement_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldMeasurementUnit returns the old "measurement_unit" field's value of the NutritionalInformationTable entity.
// If the NutritionalInformationTable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NutritionalInformationTableMutation) OldMeasurementUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeasurementUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeasurementUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeasurementUnit: %w", err)
	}
	return oldValue.MeasurementUnit, nil
}

// ResetMeasurementUnit resets all changes to the "measurement_unit" field.
func (m *NutritionalInformationTableMutation) ResetMeasurementUnit() {
	m.measurement_unit = nil
}

// AddNutritionalInformationIDs adds the "nutritional_information" edge to the NutritionalInformation entity by ids.
func (m *NutritionalInformationTableMutation) AddNutritionalInformationIDs(ids ...int) {
	if m.nutritional_information == nil {
		m.nutritional_information = make(map[int]struct{})
	}
	for i := range ids {
		m.nutritional_information[ids[i]] = struct{}{}
	}
}

// ClearNutritionalInformation clears the "nutritional_information" edge to the NutritionalInformation entity.
func (m *NutritionalInformationTableMutation) ClearNutritionalInformation() {
	m.clearednutritional_information = true
}

// NutritionalInformationCleared reports if the "nutritional_information" edge to the NutritionalInformation entity was cleared.
func (m *NutritionalInformationTableMutation) NutritionalInformationCleared() bool {
	return m.clearednutritional_information
}

// RemoveNutritionalInformationIDs removes the "nutritional_information" edge to the NutritionalInformation entity by IDs.
func (m *NutritionalInformationTableMutation) RemoveNutritionalInformationIDs(ids ...int) {
	if m.removednutritional_information == nil {
		m.removednutritional_information = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.nutritional_information, ids[i])
		m.removednutritional_information[ids[i]] = struct{}{}
	}
}

// RemovedNutritionalInformation returns the removed IDs of the "nutritional_information" edge to the NutritionalInformation entity.
func (m *NutritionalInformationTableMutation) RemovedNutritionalInformationIDs() (ids []int) {
	for id := range m.removednutritional_information {
		ids = append(ids, id)
	}
	return
}

// NutritionalInformationIDs returns the "nutritional_information" edge IDs in the mutation.
func (m *NutritionalInformationTableMutation) NutritionalInformationIDs() (ids []int) {
	for id := range m.nutritional_information {
		ids = append(ids, id)
	}
	return
}

// ResetNutritionalInformation resets all changes to the "nutritional_information" edge.
func (m *NutritionalInformationTableMutation) ResetNutritionalInformation() {
	m.nutritional_information = nil
	m.clearednutritional_information = false
	m.removednutritional_information = nil
}

// Where appends a list predicates to the NutritionalInformationTableMutation builder.
func (m *NutritionalInformationTableMutation) Where(ps ...predicate.NutritionalInformationTable) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NutritionalInformationTableMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NutritionalInformationTableMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NutritionalInformationTable, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NutritionalInformationTableMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NutritionalInformationTableMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NutritionalInformationTable).
func (m *NutritionalInformationTableMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NutritionalInformationTableMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.parameter != nil {
		fields = append(fields, nutritionalinformationtable.FieldParameter)
	}
	if m.value != nil {
		fields = append(fields, nutritionalinformationtable.FieldValue)
	}
	if m.measurement_unit != nil {
		fields = append(fields, nutritionalinformationtable.FieldMeasurementUnit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NutritionalInformationTableMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nutritionalinformationtable.FieldParameter:
		return m.Parameter()
	case nutritionalinformationtable.FieldValue:
		return m.Value()
	case nutritionalinformationtable.FieldMeasurementUnit:
		return m.MeasurementUnit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NutritionalInformationTableMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nutritionalinformationtable.FieldParameter:
		return m.OldParameter(ctx)
	case nutritionalinformationtable.FieldValue:
		return m.OldValue(ctx)
	case nutritionalinformationtable.FieldMeasurementUnit:
		return m.OldMeasurementUnit(ctx)
	}
	return nil, fmt.Errorf("unknown NutritionalInformationTable field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NutritionalInformationTableMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nutritionalinformationtable.FieldParameter:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParameter(v)
		return nil
	case nutritionalinformationtable.FieldValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case nutritionalinformationtable.FieldMeasurementUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeasurementUnit(v)
		return nil
	}
	return fmt.Errorf("unknown NutritionalInformationTable field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NutritionalInformationTableMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, nutritionalinformationtable.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NutritionalInformationTableMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case nutritionalinformationtable.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NutritionalInformationTableMutation) AddField(name string, value ent.Value) error {
	switch name {
	case nutritionalinformationtable.FieldValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown NutritionalInformationTable numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NutritionalInformationTableMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NutritionalInformationTableMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NutritionalInformationTableMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NutritionalInformationTable nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NutritionalInformationTableMutation) ResetField(name string) error {
	switch name {
	case nutritionalinformationtable.FieldParameter:
		m.ResetParameter()
		return nil
	case nutritionalinformationtable.FieldValue:
		m.ResetValue()
		return nil
	case nutritionalinformationtable.FieldMeasurementUnit:
		m.ResetMeasurementUnit()
		return nil
	}
	return fmt.Errorf("unknown NutritionalInformationTable field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NutritionalInformationTableMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.nutritional_information != nil {
		edges = append(edges, nutritionalinformationtable.EdgeNutritionalInformation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NutritionalInformationTableMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nutritionalinformationtable.EdgeNutritionalInformation:
		ids := make([]ent.Value, 0, len(m.nutritional_information))
		for id := range m.nutritional_information {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NutritionalInformationTableMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removednutritional_information != nil {
		edges = append(edges, nutritionalinformationtable.EdgeNutritionalInformation)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NutritionalInformationTableMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nutritionalinformationtable.EdgeNutritionalInformation:
		ids := make([]ent.Value, 0, len(m.removednutritional_information))
		for id := range m.removednutritional_information {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NutritionalInformationTableMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednutritional_information {
		edges = append(edges, nutritionalinformationtable.EdgeNutritionalInformation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NutritionalInformationTableMutation) EdgeCleared(name string) bool {
	switch name {
	case nutritionalinformationtable.EdgeNutritionalInformation:
		return m.clearednutritional_information
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NutritionalInformationTableMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown NutritionalInformationTable unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NutritionalInformationTableMutation) ResetEdge(name string) error {
	switch name {
	case nutritionalinformationtable.EdgeNutritionalInformation:
		m.ResetNutritionalInformation()
		return nil
	}
	return fmt.Errorf("unknown NutritionalInformationTable edge %s", name)
}

// OrderLineMutation represents an operation that mutates the OrderLine nodes in the graph.
type OrderLineMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	shop_order_id       *int
	addshop_order_id    *int
	quantity            *int
	addquantity         *int
	price               *float64
	addprice            *float64
	clearedFields       map[string]struct{}
	product_item        *int
	clearedproduct_item bool
	user_review         map[int]struct{}
	removeduser_review  map[int]struct{}
	cleareduser_review  bool
	done                bool
	oldValue            func(context.Context) (*OrderLine, error)
	predicates          []predicate.OrderLine
}

var _ ent.Mutation = (*OrderLineMutation)(nil)

// orderlineOption allows management of the mutation configuration using functional options.
type orderlineOption func(*OrderLineMutation)

// newOrderLineMutation creates new mutation for the OrderLine entity.
func newOrderLineMutation(c config, op Op, opts ...orderlineOption) *OrderLineMutation {
	m := &OrderLineMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderLine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderLineID sets the ID field of the mutation.
func withOrderLineID(id int) orderlineOption {
	return func(m *OrderLineMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderLine
		)
		m.oldValue = func(ctx context.Context) (*OrderLine, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderLine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderLine sets the old OrderLine of the mutation.
func withOrderLine(node *OrderLine) orderlineOption {
	return func(m *OrderLineMutation) {
		m.oldValue = func(context.Context) (*OrderLine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderLineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderLineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderLineMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderLineMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderLine.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProductItemID sets the "product_item_id" field.
func (m *OrderLineMutation) SetProductItemID(i int) {
	m.product_item = &i
}

// ProductItemID returns the value of the "product_item_id" field in the mutation.
func (m *OrderLineMutation) ProductItemID() (r int, exists bool) {
	v := m.product_item
	if v == nil {
		return
	}
	return *v, true
}

// OldProductItemID returns the old "product_item_id" field's value of the OrderLine entity.
// If the OrderLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderLineMutation) OldProductItemID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductItemID: %w", err)
	}
	return oldValue.ProductItemID, nil
}

// ResetProductItemID resets all changes to the "product_item_id" field.
func (m *OrderLineMutation) ResetProductItemID() {
	m.product_item = nil
}

// SetShopOrderID sets the "shop_order_id" field.
func (m *OrderLineMutation) SetShopOrderID(i int) {
	m.shop_order_id = &i
	m.addshop_order_id = nil
}

// ShopOrderID returns the value of the "shop_order_id" field in the mutation.
func (m *OrderLineMutation) ShopOrderID() (r int, exists bool) {
	v := m.shop_order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShopOrderID returns the old "shop_order_id" field's value of the OrderLine entity.
// If the OrderLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderLineMutation) OldShopOrderID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopOrderID: %w", err)
	}
	return oldValue.ShopOrderID, nil
}

// AddShopOrderID adds i to the "shop_order_id" field.
func (m *OrderLineMutation) AddShopOrderID(i int) {
	if m.addshop_order_id != nil {
		*m.addshop_order_id += i
	} else {
		m.addshop_order_id = &i
	}
}

// AddedShopOrderID returns the value that was added to the "shop_order_id" field in this mutation.
func (m *OrderLineMutation) AddedShopOrderID() (r int, exists bool) {
	v := m.addshop_order_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetShopOrderID resets all changes to the "shop_order_id" field.
func (m *OrderLineMutation) ResetShopOrderID() {
	m.shop_order_id = nil
	m.addshop_order_id = nil
}

// SetQuantity sets the "quantity" field.
func (m *OrderLineMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *OrderLineMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the OrderLine entity.
// If the OrderLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderLineMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *OrderLineMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *OrderLineMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *OrderLineMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetPrice sets the "price" field.
func (m *OrderLineMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *OrderLineMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the OrderLine entity.
// If the OrderLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderLineMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *OrderLineMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *OrderLineMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *OrderLineMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// ClearProductItem clears the "product_item" edge to the ProductItem entity.
func (m *OrderLineMutation) ClearProductItem() {
	m.clearedproduct_item = true
}

// ProductItemCleared reports if the "product_item" edge to the ProductItem entity was cleared.
func (m *OrderLineMutation) ProductItemCleared() bool {
	return m.clearedproduct_item
}

// ProductItemIDs returns the "product_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductItemID instead. It exists only for internal usage by the builders.
func (m *OrderLineMutation) ProductItemIDs() (ids []int) {
	if id := m.product_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProductItem resets all changes to the "product_item" edge.
func (m *OrderLineMutation) ResetProductItem() {
	m.product_item = nil
	m.clearedproduct_item = false
}

// AddUserReviewIDs adds the "user_review" edge to the UserReview entity by ids.
func (m *OrderLineMutation) AddUserReviewIDs(ids ...int) {
	if m.user_review == nil {
		m.user_review = make(map[int]struct{})
	}
	for i := range ids {
		m.user_review[ids[i]] = struct{}{}
	}
}

// ClearUserReview clears the "user_review" edge to the UserReview entity.
func (m *OrderLineMutation) ClearUserReview() {
	m.cleareduser_review = true
}

// UserReviewCleared reports if the "user_review" edge to the UserReview entity was cleared.
func (m *OrderLineMutation) UserReviewCleared() bool {
	return m.cleareduser_review
}

// RemoveUserReviewIDs removes the "user_review" edge to the UserReview entity by IDs.
func (m *OrderLineMutation) RemoveUserReviewIDs(ids ...int) {
	if m.removeduser_review == nil {
		m.removeduser_review = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_review, ids[i])
		m.removeduser_review[ids[i]] = struct{}{}
	}
}

// RemovedUserReview returns the removed IDs of the "user_review" edge to the UserReview entity.
func (m *OrderLineMutation) RemovedUserReviewIDs() (ids []int) {
	for id := range m.removeduser_review {
		ids = append(ids, id)
	}
	return
}

// UserReviewIDs returns the "user_review" edge IDs in the mutation.
func (m *OrderLineMutation) UserReviewIDs() (ids []int) {
	for id := range m.user_review {
		ids = append(ids, id)
	}
	return
}

// ResetUserReview resets all changes to the "user_review" edge.
func (m *OrderLineMutation) ResetUserReview() {
	m.user_review = nil
	m.cleareduser_review = false
	m.removeduser_review = nil
}

// Where appends a list predicates to the OrderLineMutation builder.
func (m *OrderLineMutation) Where(ps ...predicate.OrderLine) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrderLineMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrderLineMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OrderLine, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrderLineMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrderLineMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OrderLine).
func (m *OrderLineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderLineMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.product_item != nil {
		fields = append(fields, orderline.FieldProductItemID)
	}
	if m.shop_order_id != nil {
		fields = append(fields, orderline.FieldShopOrderID)
	}
	if m.quantity != nil {
		fields = append(fields, orderline.FieldQuantity)
	}
	if m.price != nil {
		fields = append(fields, orderline.FieldPrice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderLineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderline.FieldProductItemID:
		return m.ProductItemID()
	case orderline.FieldShopOrderID:
		return m.ShopOrderID()
	case orderline.FieldQuantity:
		return m.Quantity()
	case orderline.FieldPrice:
		return m.Price()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderLineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderline.FieldProductItemID:
		return m.OldProductItemID(ctx)
	case orderline.FieldShopOrderID:
		return m.OldShopOrderID(ctx)
	case orderline.FieldQuantity:
		return m.OldQuantity(ctx)
	case orderline.FieldPrice:
		return m.OldPrice(ctx)
	}
	return nil, fmt.Errorf("unknown OrderLine field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderLineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderline.FieldProductItemID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductItemID(v)
		return nil
	case orderline.FieldShopOrderID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopOrderID(v)
		return nil
	case orderline.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case orderline.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	}
	return fmt.Errorf("unknown OrderLine field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderLineMutation) AddedFields() []string {
	var fields []string
	if m.addshop_order_id != nil {
		fields = append(fields, orderline.FieldShopOrderID)
	}
	if m.addquantity != nil {
		fields = append(fields, orderline.FieldQuantity)
	}
	if m.addprice != nil {
		fields = append(fields, orderline.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderLineMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderline.FieldShopOrderID:
		return m.AddedShopOrderID()
	case orderline.FieldQuantity:
		return m.AddedQuantity()
	case orderline.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderLineMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderline.FieldShopOrderID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShopOrderID(v)
		return nil
	case orderline.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case orderline.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown OrderLine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderLineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderLineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderLineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OrderLine nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderLineMutation) ResetField(name string) error {
	switch name {
	case orderline.FieldProductItemID:
		m.ResetProductItemID()
		return nil
	case orderline.FieldShopOrderID:
		m.ResetShopOrderID()
		return nil
	case orderline.FieldQuantity:
		m.ResetQuantity()
		return nil
	case orderline.FieldPrice:
		m.ResetPrice()
		return nil
	}
	return fmt.Errorf("unknown OrderLine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderLineMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.product_item != nil {
		edges = append(edges, orderline.EdgeProductItem)
	}
	if m.user_review != nil {
		edges = append(edges, orderline.EdgeUserReview)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderLineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orderline.EdgeProductItem:
		if id := m.product_item; id != nil {
			return []ent.Value{*id}
		}
	case orderline.EdgeUserReview:
		ids := make([]ent.Value, 0, len(m.user_review))
		for id := range m.user_review {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderLineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser_review != nil {
		edges = append(edges, orderline.EdgeUserReview)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderLineMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case orderline.EdgeUserReview:
		ids := make([]ent.Value, 0, len(m.removeduser_review))
		for id := range m.removeduser_review {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderLineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproduct_item {
		edges = append(edges, orderline.EdgeProductItem)
	}
	if m.cleareduser_review {
		edges = append(edges, orderline.EdgeUserReview)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderLineMutation) EdgeCleared(name string) bool {
	switch name {
	case orderline.EdgeProductItem:
		return m.clearedproduct_item
	case orderline.EdgeUserReview:
		return m.cleareduser_review
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderLineMutation) ClearEdge(name string) error {
	switch name {
	case orderline.EdgeProductItem:
		m.ClearProductItem()
		return nil
	}
	return fmt.Errorf("unknown OrderLine unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderLineMutation) ResetEdge(name string) error {
	switch name {
	case orderline.EdgeProductItem:
		m.ResetProductItem()
		return nil
	case orderline.EdgeUserReview:
		m.ResetUserReview()
		return nil
	}
	return fmt.Errorf("unknown OrderLine edge %s", name)
}

// OrderStatusMutation represents an operation that mutates the OrderStatus nodes in the graph.
type OrderStatusMutation struct {
	config
	op                Op
	typ               string
	id                *int
	status            *string
	clearedFields     map[string]struct{}
	shop_order        map[int]struct{}
	removedshop_order map[int]struct{}
	clearedshop_order bool
	done              bool
	oldValue          func(context.Context) (*OrderStatus, error)
	predicates        []predicate.OrderStatus
}

var _ ent.Mutation = (*OrderStatusMutation)(nil)

// orderstatusOption allows management of the mutation configuration using functional options.
type orderstatusOption func(*OrderStatusMutation)

// newOrderStatusMutation creates new mutation for the OrderStatus entity.
func newOrderStatusMutation(c config, op Op, opts ...orderstatusOption) *OrderStatusMutation {
	m := &OrderStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderStatusID sets the ID field of the mutation.
func withOrderStatusID(id int) orderstatusOption {
	return func(m *OrderStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderStatus
		)
		m.oldValue = func(ctx context.Context) (*OrderStatus, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderStatus sets the old OrderStatus of the mutation.
func withOrderStatus(node *OrderStatus) orderstatusOption {
	return func(m *OrderStatusMutation) {
		m.oldValue = func(context.Context) (*OrderStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderStatusMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderStatus.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *OrderStatusMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *OrderStatusMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the OrderStatus entity.
// If the OrderStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderStatusMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *OrderStatusMutation) ResetStatus() {
	m.status = nil
}

// AddShopOrderIDs adds the "shop_order" edge to the ShopOrder entity by ids.
func (m *OrderStatusMutation) AddShopOrderIDs(ids ...int) {
	if m.shop_order == nil {
		m.shop_order = make(map[int]struct{})
	}
	for i := range ids {
		m.shop_order[ids[i]] = struct{}{}
	}
}

// ClearShopOrder clears the "shop_order" edge to the ShopOrder entity.
func (m *OrderStatusMutation) ClearShopOrder() {
	m.clearedshop_order = true
}

// ShopOrderCleared reports if the "shop_order" edge to the ShopOrder entity was cleared.
func (m *OrderStatusMutation) ShopOrderCleared() bool {
	return m.clearedshop_order
}

// RemoveShopOrderIDs removes the "shop_order" edge to the ShopOrder entity by IDs.
func (m *OrderStatusMutation) RemoveShopOrderIDs(ids ...int) {
	if m.removedshop_order == nil {
		m.removedshop_order = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shop_order, ids[i])
		m.removedshop_order[ids[i]] = struct{}{}
	}
}

// RemovedShopOrder returns the removed IDs of the "shop_order" edge to the ShopOrder entity.
func (m *OrderStatusMutation) RemovedShopOrderIDs() (ids []int) {
	for id := range m.removedshop_order {
		ids = append(ids, id)
	}
	return
}

// ShopOrderIDs returns the "shop_order" edge IDs in the mutation.
func (m *OrderStatusMutation) ShopOrderIDs() (ids []int) {
	for id := range m.shop_order {
		ids = append(ids, id)
	}
	return
}

// ResetShopOrder resets all changes to the "shop_order" edge.
func (m *OrderStatusMutation) ResetShopOrder() {
	m.shop_order = nil
	m.clearedshop_order = false
	m.removedshop_order = nil
}

// Where appends a list predicates to the OrderStatusMutation builder.
func (m *OrderStatusMutation) Where(ps ...predicate.OrderStatus) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrderStatusMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrderStatusMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OrderStatus, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrderStatusMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrderStatusMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OrderStatus).
func (m *OrderStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderStatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.status != nil {
		fields = append(fields, orderstatus.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderstatus.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderstatus.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown OrderStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderstatus.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown OrderStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OrderStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OrderStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderStatusMutation) ResetField(name string) error {
	switch name {
	case orderstatus.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown OrderStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.shop_order != nil {
		edges = append(edges, orderstatus.EdgeShopOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orderstatus.EdgeShopOrder:
		ids := make([]ent.Value, 0, len(m.shop_order))
		for id := range m.shop_order {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedshop_order != nil {
		edges = append(edges, orderstatus.EdgeShopOrder)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case orderstatus.EdgeShopOrder:
		ids := make([]ent.Value, 0, len(m.removedshop_order))
		for id := range m.removedshop_order {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedshop_order {
		edges = append(edges, orderstatus.EdgeShopOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderStatusMutation) EdgeCleared(name string) bool {
	switch name {
	case orderstatus.EdgeShopOrder:
		return m.clearedshop_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderStatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown OrderStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderStatusMutation) ResetEdge(name string) error {
	switch name {
	case orderstatus.EdgeShopOrder:
		m.ResetShopOrder()
		return nil
	}
	return fmt.Errorf("unknown OrderStatus edge %s", name)
}

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	name                           *string
	description                    *string
	product_image                  *string
	product_category_id            *int
	addproduct_category_id         *int
	created_at                     *time.Time
	updated_at                     *time.Time
	clearedFields                  map[string]struct{}
	product_item                   *int
	clearedproduct_item            bool
	promotion                      *int
	clearedpromotion               bool
	ingredients_table              *int
	clearedingredients_table       bool
	nutritional_information        *int
	clearednutritional_information bool
	done                           bool
	oldValue                       func(context.Context) (*Product, error)
	predicates                     []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Product.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProductMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProductMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProductMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProductMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProductMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProductMutation) ResetDescription() {
	m.description = nil
}

// SetProductImage sets the "product_image" field.
func (m *ProductMutation) SetProductImage(s string) {
	m.product_image = &s
}

// ProductImage returns the value of the "product_image" field in the mutation.
func (m *ProductMutation) ProductImage() (r string, exists bool) {
	v := m.product_image
	if v == nil {
		return
	}
	return *v, true
}

// OldProductImage returns the old "product_image" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldProductImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductImage: %w", err)
	}
	return oldValue.ProductImage, nil
}

// ResetProductImage resets all changes to the "product_image" field.
func (m *ProductMutation) ResetProductImage() {
	m.product_image = nil
}

// SetIngredientsTableID sets the "ingredients_table_id" field.
func (m *ProductMutation) SetIngredientsTableID(i int) {
	m.ingredients_table = &i
}

// IngredientsTableID returns the value of the "ingredients_table_id" field in the mutation.
func (m *ProductMutation) IngredientsTableID() (r int, exists bool) {
	v := m.ingredients_table
	if v == nil {
		return
	}
	return *v, true
}

// OldIngredientsTableID returns the old "ingredients_table_id" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldIngredientsTableID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIngredientsTableID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIngredientsTableID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIngredientsTableID: %w", err)
	}
	return oldValue.IngredientsTableID, nil
}

// ClearIngredientsTableID clears the value of the "ingredients_table_id" field.
func (m *ProductMutation) ClearIngredientsTableID() {
	m.ingredients_table = nil
	m.clearedFields[product.FieldIngredientsTableID] = struct{}{}
}

// IngredientsTableIDCleared returns if the "ingredients_table_id" field was cleared in this mutation.
func (m *ProductMutation) IngredientsTableIDCleared() bool {
	_, ok := m.clearedFields[product.FieldIngredientsTableID]
	return ok
}

// ResetIngredientsTableID resets all changes to the "ingredients_table_id" field.
func (m *ProductMutation) ResetIngredientsTableID() {
	m.ingredients_table = nil
	delete(m.clearedFields, product.FieldIngredientsTableID)
}

// SetProductCategoryID sets the "product_category_id" field.
func (m *ProductMutation) SetProductCategoryID(i int) {
	m.product_category_id = &i
	m.addproduct_category_id = nil
}

// ProductCategoryID returns the value of the "product_category_id" field in the mutation.
func (m *ProductMutation) ProductCategoryID() (r int, exists bool) {
	v := m.product_category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProductCategoryID returns the old "product_category_id" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldProductCategoryID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductCategoryID: %w", err)
	}
	return oldValue.ProductCategoryID, nil
}

// AddProductCategoryID adds i to the "product_category_id" field.
func (m *ProductMutation) AddProductCategoryID(i int) {
	if m.addproduct_category_id != nil {
		*m.addproduct_category_id += i
	} else {
		m.addproduct_category_id = &i
	}
}

// AddedProductCategoryID returns the value that was added to the "product_category_id" field in this mutation.
func (m *ProductMutation) AddedProductCategoryID() (r int, exists bool) {
	v := m.addproduct_category_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProductCategoryID clears the value of the "product_category_id" field.
func (m *ProductMutation) ClearProductCategoryID() {
	m.product_category_id = nil
	m.addproduct_category_id = nil
	m.clearedFields[product.FieldProductCategoryID] = struct{}{}
}

// ProductCategoryIDCleared returns if the "product_category_id" field was cleared in this mutation.
func (m *ProductMutation) ProductCategoryIDCleared() bool {
	_, ok := m.clearedFields[product.FieldProductCategoryID]
	return ok
}

// ResetProductCategoryID resets all changes to the "product_category_id" field.
func (m *ProductMutation) ResetProductCategoryID() {
	m.product_category_id = nil
	m.addproduct_category_id = nil
	delete(m.clearedFields, product.FieldProductCategoryID)
}

// SetNutritionalInformationID sets the "nutritional_information_id" field.
func (m *ProductMutation) SetNutritionalInformationID(i int) {
	m.nutritional_information = &i
}

// NutritionalInformationID returns the value of the "nutritional_information_id" field in the mutation.
func (m *ProductMutation) NutritionalInformationID() (r int, exists bool) {
	v := m.nutritional_information
	if v == nil {
		return
	}
	return *v, true
}

// OldNutritionalInformationID returns the old "nutritional_information_id" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldNutritionalInformationID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNutritionalInformationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNutritionalInformationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNutritionalInformationID: %w", err)
	}
	return oldValue.NutritionalInformationID, nil
}

// ClearNutritionalInformationID clears the value of the "nutritional_information_id" field.
func (m *ProductMutation) ClearNutritionalInformationID() {
	m.nutritional_information = nil
	m.clearedFields[product.FieldNutritionalInformationID] = struct{}{}
}

// NutritionalInformationIDCleared returns if the "nutritional_information_id" field was cleared in this mutation.
func (m *ProductMutation) NutritionalInformationIDCleared() bool {
	_, ok := m.clearedFields[product.FieldNutritionalInformationID]
	return ok
}

// ResetNutritionalInformationID resets all changes to the "nutritional_information_id" field.
func (m *ProductMutation) ResetNutritionalInformationID() {
	m.nutritional_information = nil
	delete(m.clearedFields, product.FieldNutritionalInformationID)
}

// SetPromotionID sets the "promotion_id" field.
func (m *ProductMutation) SetPromotionID(i int) {
	m.promotion = &i
}

// PromotionID returns the value of the "promotion_id" field in the mutation.
func (m *ProductMutation) PromotionID() (r int, exists bool) {
	v := m.promotion
	if v == nil {
		return
	}
	return *v, true
}

// OldPromotionID returns the old "promotion_id" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldPromotionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPromotionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPromotionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPromotionID: %w", err)
	}
	return oldValue.PromotionID, nil
}

// ClearPromotionID clears the value of the "promotion_id" field.
func (m *ProductMutation) ClearPromotionID() {
	m.promotion = nil
	m.clearedFields[product.FieldPromotionID] = struct{}{}
}

// PromotionIDCleared returns if the "promotion_id" field was cleared in this mutation.
func (m *ProductMutation) PromotionIDCleared() bool {
	_, ok := m.clearedFields[product.FieldPromotionID]
	return ok
}

// ResetPromotionID resets all changes to the "promotion_id" field.
func (m *ProductMutation) ResetPromotionID() {
	m.promotion = nil
	delete(m.clearedFields, product.FieldPromotionID)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProductMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProductMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProductMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProductMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProductMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ProductMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[product.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ProductMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[product.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProductMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, product.FieldUpdatedAt)
}

// SetProductItemID sets the "product_item" edge to the ProductItem entity by id.
func (m *ProductMutation) SetProductItemID(id int) {
	m.product_item = &id
}

// ClearProductItem clears the "product_item" edge to the ProductItem entity.
func (m *ProductMutation) ClearProductItem() {
	m.clearedproduct_item = true
}

// ProductItemCleared reports if the "product_item" edge to the ProductItem entity was cleared.
func (m *ProductMutation) ProductItemCleared() bool {
	return m.clearedproduct_item
}

// ProductItemID returns the "product_item" edge ID in the mutation.
func (m *ProductMutation) ProductItemID() (id int, exists bool) {
	if m.product_item != nil {
		return *m.product_item, true
	}
	return
}

// ProductItemIDs returns the "product_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductItemID instead. It exists only for internal usage by the builders.
func (m *ProductMutation) ProductItemIDs() (ids []int) {
	if id := m.product_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProductItem resets all changes to the "product_item" edge.
func (m *ProductMutation) ResetProductItem() {
	m.product_item = nil
	m.clearedproduct_item = false
}

// ClearPromotion clears the "promotion" edge to the Promotion entity.
func (m *ProductMutation) ClearPromotion() {
	m.clearedpromotion = true
}

// PromotionCleared reports if the "promotion" edge to the Promotion entity was cleared.
func (m *ProductMutation) PromotionCleared() bool {
	return m.PromotionIDCleared() || m.clearedpromotion
}

// PromotionIDs returns the "promotion" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PromotionID instead. It exists only for internal usage by the builders.
func (m *ProductMutation) PromotionIDs() (ids []int) {
	if id := m.promotion; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPromotion resets all changes to the "promotion" edge.
func (m *ProductMutation) ResetPromotion() {
	m.promotion = nil
	m.clearedpromotion = false
}

// ClearIngredientsTable clears the "ingredients_table" edge to the IngredientsTable entity.
func (m *ProductMutation) ClearIngredientsTable() {
	m.clearedingredients_table = true
}

// IngredientsTableCleared reports if the "ingredients_table" edge to the IngredientsTable entity was cleared.
func (m *ProductMutation) IngredientsTableCleared() bool {
	return m.IngredientsTableIDCleared() || m.clearedingredients_table
}

// IngredientsTableIDs returns the "ingredients_table" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IngredientsTableID instead. It exists only for internal usage by the builders.
func (m *ProductMutation) IngredientsTableIDs() (ids []int) {
	if id := m.ingredients_table; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIngredientsTable resets all changes to the "ingredients_table" edge.
func (m *ProductMutation) ResetIngredientsTable() {
	m.ingredients_table = nil
	m.clearedingredients_table = false
}

// ClearNutritionalInformation clears the "nutritional_information" edge to the NutritionalInformation entity.
func (m *ProductMutation) ClearNutritionalInformation() {
	m.clearednutritional_information = true
}

// NutritionalInformationCleared reports if the "nutritional_information" edge to the NutritionalInformation entity was cleared.
func (m *ProductMutation) NutritionalInformationCleared() bool {
	return m.NutritionalInformationIDCleared() || m.clearednutritional_information
}

// NutritionalInformationIDs returns the "nutritional_information" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NutritionalInformationID instead. It exists only for internal usage by the builders.
func (m *ProductMutation) NutritionalInformationIDs() (ids []int) {
	if id := m.nutritional_information; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNutritionalInformation resets all changes to the "nutritional_information" edge.
func (m *ProductMutation) ResetNutritionalInformation() {
	m.nutritional_information = nil
	m.clearednutritional_information = false
}

// Where appends a list predicates to the ProductMutation builder.
func (m *ProductMutation) Where(ps ...predicate.Product) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Product, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, product.FieldName)
	}
	if m.description != nil {
		fields = append(fields, product.FieldDescription)
	}
	if m.product_image != nil {
		fields = append(fields, product.FieldProductImage)
	}
	if m.ingredients_table != nil {
		fields = append(fields, product.FieldIngredientsTableID)
	}
	if m.product_category_id != nil {
		fields = append(fields, product.FieldProductCategoryID)
	}
	if m.nutritional_information != nil {
		fields = append(fields, product.FieldNutritionalInformationID)
	}
	if m.promotion != nil {
		fields = append(fields, product.FieldPromotionID)
	}
	if m.created_at != nil {
		fields = append(fields, product.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, product.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldName:
		return m.Name()
	case product.FieldDescription:
		return m.Description()
	case product.FieldProductImage:
		return m.ProductImage()
	case product.FieldIngredientsTableID:
		return m.IngredientsTableID()
	case product.FieldProductCategoryID:
		return m.ProductCategoryID()
	case product.FieldNutritionalInformationID:
		return m.NutritionalInformationID()
	case product.FieldPromotionID:
		return m.PromotionID()
	case product.FieldCreatedAt:
		return m.CreatedAt()
	case product.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldName:
		return m.OldName(ctx)
	case product.FieldDescription:
		return m.OldDescription(ctx)
	case product.FieldProductImage:
		return m.OldProductImage(ctx)
	case product.FieldIngredientsTableID:
		return m.OldIngredientsTableID(ctx)
	case product.FieldProductCategoryID:
		return m.OldProductCategoryID(ctx)
	case product.FieldNutritionalInformationID:
		return m.OldNutritionalInformationID(ctx)
	case product.FieldPromotionID:
		return m.OldPromotionID(ctx)
	case product.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case product.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case product.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case product.FieldProductImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductImage(v)
		return nil
	case product.FieldIngredientsTableID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIngredientsTableID(v)
		return nil
	case product.FieldProductCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductCategoryID(v)
		return nil
	case product.FieldNutritionalInformationID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNutritionalInformationID(v)
		return nil
	case product.FieldPromotionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPromotionID(v)
		return nil
	case product.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case product.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	var fields []string
	if m.addproduct_category_id != nil {
		fields = append(fields, product.FieldProductCategoryID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case product.FieldProductCategoryID:
		return m.AddedProductCategoryID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	case product.FieldProductCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductCategoryID(v)
		return nil
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(product.FieldIngredientsTableID) {
		fields = append(fields, product.FieldIngredientsTableID)
	}
	if m.FieldCleared(product.FieldProductCategoryID) {
		fields = append(fields, product.FieldProductCategoryID)
	}
	if m.FieldCleared(product.FieldNutritionalInformationID) {
		fields = append(fields, product.FieldNutritionalInformationID)
	}
	if m.FieldCleared(product.FieldPromotionID) {
		fields = append(fields, product.FieldPromotionID)
	}
	if m.FieldCleared(product.FieldUpdatedAt) {
		fields = append(fields, product.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	switch name {
	case product.FieldIngredientsTableID:
		m.ClearIngredientsTableID()
		return nil
	case product.FieldProductCategoryID:
		m.ClearProductCategoryID()
		return nil
	case product.FieldNutritionalInformationID:
		m.ClearNutritionalInformationID()
		return nil
	case product.FieldPromotionID:
		m.ClearPromotionID()
		return nil
	case product.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldName:
		m.ResetName()
		return nil
	case product.FieldDescription:
		m.ResetDescription()
		return nil
	case product.FieldProductImage:
		m.ResetProductImage()
		return nil
	case product.FieldIngredientsTableID:
		m.ResetIngredientsTableID()
		return nil
	case product.FieldProductCategoryID:
		m.ResetProductCategoryID()
		return nil
	case product.FieldNutritionalInformationID:
		m.ResetNutritionalInformationID()
		return nil
	case product.FieldPromotionID:
		m.ResetPromotionID()
		return nil
	case product.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case product.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.product_item != nil {
		edges = append(edges, product.EdgeProductItem)
	}
	if m.promotion != nil {
		edges = append(edges, product.EdgePromotion)
	}
	if m.ingredients_table != nil {
		edges = append(edges, product.EdgeIngredientsTable)
	}
	if m.nutritional_information != nil {
		edges = append(edges, product.EdgeNutritionalInformation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeProductItem:
		if id := m.product_item; id != nil {
			return []ent.Value{*id}
		}
	case product.EdgePromotion:
		if id := m.promotion; id != nil {
			return []ent.Value{*id}
		}
	case product.EdgeIngredientsTable:
		if id := m.ingredients_table; id != nil {
			return []ent.Value{*id}
		}
	case product.EdgeNutritionalInformation:
		if id := m.nutritional_information; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedproduct_item {
		edges = append(edges, product.EdgeProductItem)
	}
	if m.clearedpromotion {
		edges = append(edges, product.EdgePromotion)
	}
	if m.clearedingredients_table {
		edges = append(edges, product.EdgeIngredientsTable)
	}
	if m.clearednutritional_information {
		edges = append(edges, product.EdgeNutritionalInformation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	switch name {
	case product.EdgeProductItem:
		return m.clearedproduct_item
	case product.EdgePromotion:
		return m.clearedpromotion
	case product.EdgeIngredientsTable:
		return m.clearedingredients_table
	case product.EdgeNutritionalInformation:
		return m.clearednutritional_information
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	switch name {
	case product.EdgeProductItem:
		m.ClearProductItem()
		return nil
	case product.EdgePromotion:
		m.ClearPromotion()
		return nil
	case product.EdgeIngredientsTable:
		m.ClearIngredientsTable()
		return nil
	case product.EdgeNutritionalInformation:
		m.ClearNutritionalInformation()
		return nil
	}
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	switch name {
	case product.EdgeProductItem:
		m.ResetProductItem()
		return nil
	case product.EdgePromotion:
		m.ResetPromotion()
		return nil
	case product.EdgeIngredientsTable:
		m.ResetIngredientsTable()
		return nil
	case product.EdgeNutritionalInformation:
		m.ResetNutritionalInformation()
		return nil
	}
	return fmt.Errorf("unknown Product edge %s", name)
}

// ProductItemMutation represents an operation that mutates the ProductItem nodes in the graph.
type ProductItemMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	stock_keeping_unit        *string
	quantity_in_stock         *int
	addquantity_in_stock      *int
	product_image             *string
	price                     *float32
	addprice                  *float32
	created_at                *time.Time
	updated_at                *time.Time
	clearedFields             map[string]struct{}
	product                   *int
	clearedproduct            bool
	order_line                map[int]struct{}
	removedorder_line         map[int]struct{}
	clearedorder_line         bool
	shopping_cart_item        map[int]struct{}
	removedshopping_cart_item map[int]struct{}
	clearedshopping_cart_item bool
	done                      bool
	oldValue                  func(context.Context) (*ProductItem, error)
	predicates                []predicate.ProductItem
}

var _ ent.Mutation = (*ProductItemMutation)(nil)

// productitemOption allows management of the mutation configuration using functional options.
type productitemOption func(*ProductItemMutation)

// newProductItemMutation creates new mutation for the ProductItem entity.
func newProductItemMutation(c config, op Op, opts ...productitemOption) *ProductItemMutation {
	m := &ProductItemMutation{
		config:        c,
		op:            op,
		typ:           TypeProductItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductItemID sets the ID field of the mutation.
func withProductItemID(id int) productitemOption {
	return func(m *ProductItemMutation) {
		var (
			err   error
			once  sync.Once
			value *ProductItem
		)
		m.oldValue = func(ctx context.Context) (*ProductItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProductItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProductItem sets the old ProductItem of the mutation.
func withProductItem(node *ProductItem) productitemOption {
	return func(m *ProductItemMutation) {
		m.oldValue = func(context.Context) (*ProductItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProductItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProductID sets the "product_id" field.
func (m *ProductItemMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *ProductItemMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the ProductItem entity.
// If the ProductItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductItemMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *ProductItemMutation) ResetProductID() {
	m.product = nil
}

// SetStockKeepingUnit sets the "stock_keeping_unit" field.
func (m *ProductItemMutation) SetStockKeepingUnit(s string) {
	m.stock_keeping_unit = &s
}

// StockKeepingUnit returns the value of the "stock_keeping_unit" field in the mutation.
func (m *ProductItemMutation) StockKeepingUnit() (r string, exists bool) {
	v := m.stock_keeping_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldStockKeepingUnit returns the old "stock_keeping_unit" field's value of the ProductItem entity.
// If the ProductItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductItemMutation) OldStockKeepingUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStockKeepingUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStockKeepingUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStockKeepingUnit: %w", err)
	}
	return oldValue.StockKeepingUnit, nil
}

// ResetStockKeepingUnit resets all changes to the "stock_keeping_unit" field.
func (m *ProductItemMutation) ResetStockKeepingUnit() {
	m.stock_keeping_unit = nil
}

// SetQuantityInStock sets the "quantity_in_stock" field.
func (m *ProductItemMutation) SetQuantityInStock(i int) {
	m.quantity_in_stock = &i
	m.addquantity_in_stock = nil
}

// QuantityInStock returns the value of the "quantity_in_stock" field in the mutation.
func (m *ProductItemMutation) QuantityInStock() (r int, exists bool) {
	v := m.quantity_in_stock
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantityInStock returns the old "quantity_in_stock" field's value of the ProductItem entity.
// If the ProductItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductItemMutation) OldQuantityInStock(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantityInStock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantityInStock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantityInStock: %w", err)
	}
	return oldValue.QuantityInStock, nil
}

// AddQuantityInStock adds i to the "quantity_in_stock" field.
func (m *ProductItemMutation) AddQuantityInStock(i int) {
	if m.addquantity_in_stock != nil {
		*m.addquantity_in_stock += i
	} else {
		m.addquantity_in_stock = &i
	}
}

// AddedQuantityInStock returns the value that was added to the "quantity_in_stock" field in this mutation.
func (m *ProductItemMutation) AddedQuantityInStock() (r int, exists bool) {
	v := m.addquantity_in_stock
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantityInStock resets all changes to the "quantity_in_stock" field.
func (m *ProductItemMutation) ResetQuantityInStock() {
	m.quantity_in_stock = nil
	m.addquantity_in_stock = nil
}

// SetProductImage sets the "product_image" field.
func (m *ProductItemMutation) SetProductImage(s string) {
	m.product_image = &s
}

// ProductImage returns the value of the "product_image" field in the mutation.
func (m *ProductItemMutation) ProductImage() (r string, exists bool) {
	v := m.product_image
	if v == nil {
		return
	}
	return *v, true
}

// OldProductImage returns the old "product_image" field's value of the ProductItem entity.
// If the ProductItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductItemMutation) OldProductImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductImage: %w", err)
	}
	return oldValue.ProductImage, nil
}

// ResetProductImage resets all changes to the "product_image" field.
func (m *ProductItemMutation) ResetProductImage() {
	m.product_image = nil
}

// SetPrice sets the "price" field.
func (m *ProductItemMutation) SetPrice(f float32) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *ProductItemMutation) Price() (r float32, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the ProductItem entity.
// If the ProductItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductItemMutation) OldPrice(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *ProductItemMutation) AddPrice(f float32) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *ProductItemMutation) AddedPrice() (r float32, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *ProductItemMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProductItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProductItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProductItem entity.
// If the ProductItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProductItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProductItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProductItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProductItem entity.
// If the ProductItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ProductItemMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[productitem.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ProductItemMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[productitem.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProductItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, productitem.FieldUpdatedAt)
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *ProductItemMutation) ClearProduct() {
	m.clearedproduct = true
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *ProductItemMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *ProductItemMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *ProductItemMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// AddOrderLineIDs adds the "order_line" edge to the OrderLine entity by ids.
func (m *ProductItemMutation) AddOrderLineIDs(ids ...int) {
	if m.order_line == nil {
		m.order_line = make(map[int]struct{})
	}
	for i := range ids {
		m.order_line[ids[i]] = struct{}{}
	}
}

// ClearOrderLine clears the "order_line" edge to the OrderLine entity.
func (m *ProductItemMutation) ClearOrderLine() {
	m.clearedorder_line = true
}

// OrderLineCleared reports if the "order_line" edge to the OrderLine entity was cleared.
func (m *ProductItemMutation) OrderLineCleared() bool {
	return m.clearedorder_line
}

// RemoveOrderLineIDs removes the "order_line" edge to the OrderLine entity by IDs.
func (m *ProductItemMutation) RemoveOrderLineIDs(ids ...int) {
	if m.removedorder_line == nil {
		m.removedorder_line = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.order_line, ids[i])
		m.removedorder_line[ids[i]] = struct{}{}
	}
}

// RemovedOrderLine returns the removed IDs of the "order_line" edge to the OrderLine entity.
func (m *ProductItemMutation) RemovedOrderLineIDs() (ids []int) {
	for id := range m.removedorder_line {
		ids = append(ids, id)
	}
	return
}

// OrderLineIDs returns the "order_line" edge IDs in the mutation.
func (m *ProductItemMutation) OrderLineIDs() (ids []int) {
	for id := range m.order_line {
		ids = append(ids, id)
	}
	return
}

// ResetOrderLine resets all changes to the "order_line" edge.
func (m *ProductItemMutation) ResetOrderLine() {
	m.order_line = nil
	m.clearedorder_line = false
	m.removedorder_line = nil
}

// AddShoppingCartItemIDs adds the "shopping_cart_item" edge to the ShoppingCartItem entity by ids.
func (m *ProductItemMutation) AddShoppingCartItemIDs(ids ...int) {
	if m.shopping_cart_item == nil {
		m.shopping_cart_item = make(map[int]struct{})
	}
	for i := range ids {
		m.shopping_cart_item[ids[i]] = struct{}{}
	}
}

// ClearShoppingCartItem clears the "shopping_cart_item" edge to the ShoppingCartItem entity.
func (m *ProductItemMutation) ClearShoppingCartItem() {
	m.clearedshopping_cart_item = true
}

// ShoppingCartItemCleared reports if the "shopping_cart_item" edge to the ShoppingCartItem entity was cleared.
func (m *ProductItemMutation) ShoppingCartItemCleared() bool {
	return m.clearedshopping_cart_item
}

// RemoveShoppingCartItemIDs removes the "shopping_cart_item" edge to the ShoppingCartItem entity by IDs.
func (m *ProductItemMutation) RemoveShoppingCartItemIDs(ids ...int) {
	if m.removedshopping_cart_item == nil {
		m.removedshopping_cart_item = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shopping_cart_item, ids[i])
		m.removedshopping_cart_item[ids[i]] = struct{}{}
	}
}

// RemovedShoppingCartItem returns the removed IDs of the "shopping_cart_item" edge to the ShoppingCartItem entity.
func (m *ProductItemMutation) RemovedShoppingCartItemIDs() (ids []int) {
	for id := range m.removedshopping_cart_item {
		ids = append(ids, id)
	}
	return
}

// ShoppingCartItemIDs returns the "shopping_cart_item" edge IDs in the mutation.
func (m *ProductItemMutation) ShoppingCartItemIDs() (ids []int) {
	for id := range m.shopping_cart_item {
		ids = append(ids, id)
	}
	return
}

// ResetShoppingCartItem resets all changes to the "shopping_cart_item" edge.
func (m *ProductItemMutation) ResetShoppingCartItem() {
	m.shopping_cart_item = nil
	m.clearedshopping_cart_item = false
	m.removedshopping_cart_item = nil
}

// Where appends a list predicates to the ProductItemMutation builder.
func (m *ProductItemMutation) Where(ps ...predicate.ProductItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProductItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProductItem).
func (m *ProductItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductItemMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.product != nil {
		fields = append(fields, productitem.FieldProductID)
	}
	if m.stock_keeping_unit != nil {
		fields = append(fields, productitem.FieldStockKeepingUnit)
	}
	if m.quantity_in_stock != nil {
		fields = append(fields, productitem.FieldQuantityInStock)
	}
	if m.product_image != nil {
		fields = append(fields, productitem.FieldProductImage)
	}
	if m.price != nil {
		fields = append(fields, productitem.FieldPrice)
	}
	if m.created_at != nil {
		fields = append(fields, productitem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, productitem.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case productitem.FieldProductID:
		return m.ProductID()
	case productitem.FieldStockKeepingUnit:
		return m.StockKeepingUnit()
	case productitem.FieldQuantityInStock:
		return m.QuantityInStock()
	case productitem.FieldProductImage:
		return m.ProductImage()
	case productitem.FieldPrice:
		return m.Price()
	case productitem.FieldCreatedAt:
		return m.CreatedAt()
	case productitem.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case productitem.FieldProductID:
		return m.OldProductID(ctx)
	case productitem.FieldStockKeepingUnit:
		return m.OldStockKeepingUnit(ctx)
	case productitem.FieldQuantityInStock:
		return m.OldQuantityInStock(ctx)
	case productitem.FieldProductImage:
		return m.OldProductImage(ctx)
	case productitem.FieldPrice:
		return m.OldPrice(ctx)
	case productitem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case productitem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProductItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case productitem.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case productitem.FieldStockKeepingUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStockKeepingUnit(v)
		return nil
	case productitem.FieldQuantityInStock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantityInStock(v)
		return nil
	case productitem.FieldProductImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductImage(v)
		return nil
	case productitem.FieldPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case productitem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case productitem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProductItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductItemMutation) AddedFields() []string {
	var fields []string
	if m.addquantity_in_stock != nil {
		fields = append(fields, productitem.FieldQuantityInStock)
	}
	if m.addprice != nil {
		fields = append(fields, productitem.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case productitem.FieldQuantityInStock:
		return m.AddedQuantityInStock()
	case productitem.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case productitem.FieldQuantityInStock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantityInStock(v)
		return nil
	case productitem.FieldPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown ProductItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(productitem.FieldUpdatedAt) {
		fields = append(fields, productitem.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductItemMutation) ClearField(name string) error {
	switch name {
	case productitem.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProductItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductItemMutation) ResetField(name string) error {
	switch name {
	case productitem.FieldProductID:
		m.ResetProductID()
		return nil
	case productitem.FieldStockKeepingUnit:
		m.ResetStockKeepingUnit()
		return nil
	case productitem.FieldQuantityInStock:
		m.ResetQuantityInStock()
		return nil
	case productitem.FieldProductImage:
		m.ResetProductImage()
		return nil
	case productitem.FieldPrice:
		m.ResetPrice()
		return nil
	case productitem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case productitem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProductItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.product != nil {
		edges = append(edges, productitem.EdgeProduct)
	}
	if m.order_line != nil {
		edges = append(edges, productitem.EdgeOrderLine)
	}
	if m.shopping_cart_item != nil {
		edges = append(edges, productitem.EdgeShoppingCartItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case productitem.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	case productitem.EdgeOrderLine:
		ids := make([]ent.Value, 0, len(m.order_line))
		for id := range m.order_line {
			ids = append(ids, id)
		}
		return ids
	case productitem.EdgeShoppingCartItem:
		ids := make([]ent.Value, 0, len(m.shopping_cart_item))
		for id := range m.shopping_cart_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedorder_line != nil {
		edges = append(edges, productitem.EdgeOrderLine)
	}
	if m.removedshopping_cart_item != nil {
		edges = append(edges, productitem.EdgeShoppingCartItem)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case productitem.EdgeOrderLine:
		ids := make([]ent.Value, 0, len(m.removedorder_line))
		for id := range m.removedorder_line {
			ids = append(ids, id)
		}
		return ids
	case productitem.EdgeShoppingCartItem:
		ids := make([]ent.Value, 0, len(m.removedshopping_cart_item))
		for id := range m.removedshopping_cart_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedproduct {
		edges = append(edges, productitem.EdgeProduct)
	}
	if m.clearedorder_line {
		edges = append(edges, productitem.EdgeOrderLine)
	}
	if m.clearedshopping_cart_item {
		edges = append(edges, productitem.EdgeShoppingCartItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductItemMutation) EdgeCleared(name string) bool {
	switch name {
	case productitem.EdgeProduct:
		return m.clearedproduct
	case productitem.EdgeOrderLine:
		return m.clearedorder_line
	case productitem.EdgeShoppingCartItem:
		return m.clearedshopping_cart_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductItemMutation) ClearEdge(name string) error {
	switch name {
	case productitem.EdgeProduct:
		m.ClearProduct()
		return nil
	}
	return fmt.Errorf("unknown ProductItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductItemMutation) ResetEdge(name string) error {
	switch name {
	case productitem.EdgeProduct:
		m.ResetProduct()
		return nil
	case productitem.EdgeOrderLine:
		m.ResetOrderLine()
		return nil
	case productitem.EdgeShoppingCartItem:
		m.ResetShoppingCartItem()
		return nil
	}
	return fmt.Errorf("unknown ProductItem edge %s", name)
}

// PromotionMutation represents an operation that mutates the Promotion nodes in the graph.
type PromotionMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	description            *string
	discount_percentage    *int
	adddiscount_percentage *int
	start_date             *time.Time
	end_date               *time.Time
	clearedFields          map[string]struct{}
	product                map[int]struct{}
	removedproduct         map[int]struct{}
	clearedproduct         bool
	done                   bool
	oldValue               func(context.Context) (*Promotion, error)
	predicates             []predicate.Promotion
}

var _ ent.Mutation = (*PromotionMutation)(nil)

// promotionOption allows management of the mutation configuration using functional options.
type promotionOption func(*PromotionMutation)

// newPromotionMutation creates new mutation for the Promotion entity.
func newPromotionMutation(c config, op Op, opts ...promotionOption) *PromotionMutation {
	m := &PromotionMutation{
		config:        c,
		op:            op,
		typ:           TypePromotion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPromotionID sets the ID field of the mutation.
func withPromotionID(id int) promotionOption {
	return func(m *PromotionMutation) {
		var (
			err   error
			once  sync.Once
			value *Promotion
		)
		m.oldValue = func(ctx context.Context) (*Promotion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Promotion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPromotion sets the old Promotion of the mutation.
func withPromotion(node *Promotion) promotionOption {
	return func(m *PromotionMutation) {
		m.oldValue = func(context.Context) (*Promotion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PromotionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PromotionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PromotionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PromotionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Promotion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PromotionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PromotionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Promotion entity.
// If the Promotion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromotionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PromotionMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PromotionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PromotionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Promotion entity.
// If the Promotion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromotionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PromotionMutation) ResetDescription() {
	m.description = nil
}

// SetDiscountPercentage sets the "discount_percentage" field.
func (m *PromotionMutation) SetDiscountPercentage(i int) {
	m.discount_percentage = &i
	m.adddiscount_percentage = nil
}

// DiscountPercentage returns the value of the "discount_percentage" field in the mutation.
func (m *PromotionMutation) DiscountPercentage() (r int, exists bool) {
	v := m.discount_percentage
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountPercentage returns the old "discount_percentage" field's value of the Promotion entity.
// If the Promotion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromotionMutation) OldDiscountPercentage(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountPercentage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountPercentage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountPercentage: %w", err)
	}
	return oldValue.DiscountPercentage, nil
}

// AddDiscountPercentage adds i to the "discount_percentage" field.
func (m *PromotionMutation) AddDiscountPercentage(i int) {
	if m.adddiscount_percentage != nil {
		*m.adddiscount_percentage += i
	} else {
		m.adddiscount_percentage = &i
	}
}

// AddedDiscountPercentage returns the value that was added to the "discount_percentage" field in this mutation.
func (m *PromotionMutation) AddedDiscountPercentage() (r int, exists bool) {
	v := m.adddiscount_percentage
	if v == nil {
		return
	}
	return *v, true
}

// ResetDiscountPercentage resets all changes to the "discount_percentage" field.
func (m *PromotionMutation) ResetDiscountPercentage() {
	m.discount_percentage = nil
	m.adddiscount_percentage = nil
}

// SetStartDate sets the "start_date" field.
func (m *PromotionMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *PromotionMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Promotion entity.
// If the Promotion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromotionMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *PromotionMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *PromotionMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *PromotionMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Promotion entity.
// If the Promotion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PromotionMutation) OldEndDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *PromotionMutation) ResetEndDate() {
	m.end_date = nil
}

// AddProductIDs adds the "product" edge to the Product entity by ids.
func (m *PromotionMutation) AddProductIDs(ids ...int) {
	if m.product == nil {
		m.product = make(map[int]struct{})
	}
	for i := range ids {
		m.product[ids[i]] = struct{}{}
	}
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *PromotionMutation) ClearProduct() {
	m.clearedproduct = true
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *PromotionMutation) ProductCleared() bool {
	return m.clearedproduct
}

// RemoveProductIDs removes the "product" edge to the Product entity by IDs.
func (m *PromotionMutation) RemoveProductIDs(ids ...int) {
	if m.removedproduct == nil {
		m.removedproduct = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.product, ids[i])
		m.removedproduct[ids[i]] = struct{}{}
	}
}

// RemovedProduct returns the removed IDs of the "product" edge to the Product entity.
func (m *PromotionMutation) RemovedProductIDs() (ids []int) {
	for id := range m.removedproduct {
		ids = append(ids, id)
	}
	return
}

// ProductIDs returns the "product" edge IDs in the mutation.
func (m *PromotionMutation) ProductIDs() (ids []int) {
	for id := range m.product {
		ids = append(ids, id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *PromotionMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
	m.removedproduct = nil
}

// Where appends a list predicates to the PromotionMutation builder.
func (m *PromotionMutation) Where(ps ...predicate.Promotion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PromotionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PromotionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Promotion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PromotionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PromotionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Promotion).
func (m *PromotionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PromotionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, promotion.FieldName)
	}
	if m.description != nil {
		fields = append(fields, promotion.FieldDescription)
	}
	if m.discount_percentage != nil {
		fields = append(fields, promotion.FieldDiscountPercentage)
	}
	if m.start_date != nil {
		fields = append(fields, promotion.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, promotion.FieldEndDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PromotionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case promotion.FieldName:
		return m.Name()
	case promotion.FieldDescription:
		return m.Description()
	case promotion.FieldDiscountPercentage:
		return m.DiscountPercentage()
	case promotion.FieldStartDate:
		return m.StartDate()
	case promotion.FieldEndDate:
		return m.EndDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PromotionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case promotion.FieldName:
		return m.OldName(ctx)
	case promotion.FieldDescription:
		return m.OldDescription(ctx)
	case promotion.FieldDiscountPercentage:
		return m.OldDiscountPercentage(ctx)
	case promotion.FieldStartDate:
		return m.OldStartDate(ctx)
	case promotion.FieldEndDate:
		return m.OldEndDate(ctx)
	}
	return nil, fmt.Errorf("unknown Promotion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PromotionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case promotion.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case promotion.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case promotion.FieldDiscountPercentage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountPercentage(v)
		return nil
	case promotion.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case promotion.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	}
	return fmt.Errorf("unknown Promotion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PromotionMutation) AddedFields() []string {
	var fields []string
	if m.adddiscount_percentage != nil {
		fields = append(fields, promotion.FieldDiscountPercentage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PromotionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case promotion.FieldDiscountPercentage:
		return m.AddedDiscountPercentage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PromotionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case promotion.FieldDiscountPercentage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiscountPercentage(v)
		return nil
	}
	return fmt.Errorf("unknown Promotion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PromotionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PromotionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PromotionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Promotion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PromotionMutation) ResetField(name string) error {
	switch name {
	case promotion.FieldName:
		m.ResetName()
		return nil
	case promotion.FieldDescription:
		m.ResetDescription()
		return nil
	case promotion.FieldDiscountPercentage:
		m.ResetDiscountPercentage()
		return nil
	case promotion.FieldStartDate:
		m.ResetStartDate()
		return nil
	case promotion.FieldEndDate:
		m.ResetEndDate()
		return nil
	}
	return fmt.Errorf("unknown Promotion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PromotionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.product != nil {
		edges = append(edges, promotion.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PromotionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case promotion.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.product))
		for id := range m.product {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PromotionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproduct != nil {
		edges = append(edges, promotion.EdgeProduct)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PromotionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case promotion.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.removedproduct))
		for id := range m.removedproduct {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PromotionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproduct {
		edges = append(edges, promotion.EdgeProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PromotionMutation) EdgeCleared(name string) bool {
	switch name {
	case promotion.EdgeProduct:
		return m.clearedproduct
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PromotionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Promotion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PromotionMutation) ResetEdge(name string) error {
	switch name {
	case promotion.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown Promotion edge %s", name)
}

// ShippingAddressMutation represents an operation that mutates the ShippingAddress nodes in the graph.
type ShippingAddressMutation struct {
	config
	op                Op
	typ               string
	id                *int
	phone_number      *string
	address_line1     *string
	address_line2     *string
	city              *string
	state             *string
	country           *string
	postal_code       *string
	clearedFields     map[string]struct{}
	shop_order        map[int]struct{}
	removedshop_order map[int]struct{}
	clearedshop_order bool
	done              bool
	oldValue          func(context.Context) (*ShippingAddress, error)
	predicates        []predicate.ShippingAddress
}

var _ ent.Mutation = (*ShippingAddressMutation)(nil)

// shippingaddressOption allows management of the mutation configuration using functional options.
type shippingaddressOption func(*ShippingAddressMutation)

// newShippingAddressMutation creates new mutation for the ShippingAddress entity.
func newShippingAddressMutation(c config, op Op, opts ...shippingaddressOption) *ShippingAddressMutation {
	m := &ShippingAddressMutation{
		config:        c,
		op:            op,
		typ:           TypeShippingAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShippingAddressID sets the ID field of the mutation.
func withShippingAddressID(id int) shippingaddressOption {
	return func(m *ShippingAddressMutation) {
		var (
			err   error
			once  sync.Once
			value *ShippingAddress
		)
		m.oldValue = func(ctx context.Context) (*ShippingAddress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShippingAddress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShippingAddress sets the old ShippingAddress of the mutation.
func withShippingAddress(node *ShippingAddress) shippingaddressOption {
	return func(m *ShippingAddressMutation) {
		m.oldValue = func(context.Context) (*ShippingAddress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShippingAddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShippingAddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShippingAddressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShippingAddressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ShippingAddress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPhoneNumber sets the "phone_number" field.
func (m *ShippingAddressMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *ShippingAddressMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the ShippingAddress entity.
// If the ShippingAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShippingAddressMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *ShippingAddressMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetAddressLine1 sets the "address_line1" field.
func (m *ShippingAddressMutation) SetAddressLine1(s string) {
	m.address_line1 = &s
}

// AddressLine1 returns the value of the "address_line1" field in the mutation.
func (m *ShippingAddressMutation) AddressLine1() (r string, exists bool) {
	v := m.address_line1
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressLine1 returns the old "address_line1" field's value of the ShippingAddress entity.
// If the ShippingAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShippingAddressMutation) OldAddressLine1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressLine1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressLine1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressLine1: %w", err)
	}
	return oldValue.AddressLine1, nil
}

// ResetAddressLine1 resets all changes to the "address_line1" field.
func (m *ShippingAddressMutation) ResetAddressLine1() {
	m.address_line1 = nil
}

// SetAddressLine2 sets the "address_line2" field.
func (m *ShippingAddressMutation) SetAddressLine2(s string) {
	m.address_line2 = &s
}

// AddressLine2 returns the value of the "address_line2" field in the mutation.
func (m *ShippingAddressMutation) AddressLine2() (r string, exists bool) {
	v := m.address_line2
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressLine2 returns the old "address_line2" field's value of the ShippingAddress entity.
// If the ShippingAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShippingAddressMutation) OldAddressLine2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressLine2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressLine2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressLine2: %w", err)
	}
	return oldValue.AddressLine2, nil
}

// ClearAddressLine2 clears the value of the "address_line2" field.
func (m *ShippingAddressMutation) ClearAddressLine2() {
	m.address_line2 = nil
	m.clearedFields[shippingaddress.FieldAddressLine2] = struct{}{}
}

// AddressLine2Cleared returns if the "address_line2" field was cleared in this mutation.
func (m *ShippingAddressMutation) AddressLine2Cleared() bool {
	_, ok := m.clearedFields[shippingaddress.FieldAddressLine2]
	return ok
}

// ResetAddressLine2 resets all changes to the "address_line2" field.
func (m *ShippingAddressMutation) ResetAddressLine2() {
	m.address_line2 = nil
	delete(m.clearedFields, shippingaddress.FieldAddressLine2)
}

// SetCity sets the "city" field.
func (m *ShippingAddressMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *ShippingAddressMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the ShippingAddress entity.
// If the ShippingAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShippingAddressMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *ShippingAddressMutation) ResetCity() {
	m.city = nil
}

// SetState sets the "state" field.
func (m *ShippingAddressMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *ShippingAddressMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the ShippingAddress entity.
// If the ShippingAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShippingAddressMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *ShippingAddressMutation) ResetState() {
	m.state = nil
}

// SetCountry sets the "country" field.
func (m *ShippingAddressMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *ShippingAddressMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the ShippingAddress entity.
// If the ShippingAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShippingAddressMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *ShippingAddressMutation) ResetCountry() {
	m.country = nil
}

// SetPostalCode sets the "postal_code" field.
func (m *ShippingAddressMutation) SetPostalCode(s string) {
	m.postal_code = &s
}

// PostalCode returns the value of the "postal_code" field in the mutation.
func (m *ShippingAddressMutation) PostalCode() (r string, exists bool) {
	v := m.postal_code
	if v == nil {
		return
	}
	return *v, true
}

// OldPostalCode returns the old "postal_code" field's value of the ShippingAddress entity.
// If the ShippingAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShippingAddressMutation) OldPostalCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostalCode: %w", err)
	}
	return oldValue.PostalCode, nil
}

// ResetPostalCode resets all changes to the "postal_code" field.
func (m *ShippingAddressMutation) ResetPostalCode() {
	m.postal_code = nil
}

// AddShopOrderIDs adds the "shop_order" edge to the ShopOrder entity by ids.
func (m *ShippingAddressMutation) AddShopOrderIDs(ids ...int) {
	if m.shop_order == nil {
		m.shop_order = make(map[int]struct{})
	}
	for i := range ids {
		m.shop_order[ids[i]] = struct{}{}
	}
}

// ClearShopOrder clears the "shop_order" edge to the ShopOrder entity.
func (m *ShippingAddressMutation) ClearShopOrder() {
	m.clearedshop_order = true
}

// ShopOrderCleared reports if the "shop_order" edge to the ShopOrder entity was cleared.
func (m *ShippingAddressMutation) ShopOrderCleared() bool {
	return m.clearedshop_order
}

// RemoveShopOrderIDs removes the "shop_order" edge to the ShopOrder entity by IDs.
func (m *ShippingAddressMutation) RemoveShopOrderIDs(ids ...int) {
	if m.removedshop_order == nil {
		m.removedshop_order = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shop_order, ids[i])
		m.removedshop_order[ids[i]] = struct{}{}
	}
}

// RemovedShopOrder returns the removed IDs of the "shop_order" edge to the ShopOrder entity.
func (m *ShippingAddressMutation) RemovedShopOrderIDs() (ids []int) {
	for id := range m.removedshop_order {
		ids = append(ids, id)
	}
	return
}

// ShopOrderIDs returns the "shop_order" edge IDs in the mutation.
func (m *ShippingAddressMutation) ShopOrderIDs() (ids []int) {
	for id := range m.shop_order {
		ids = append(ids, id)
	}
	return
}

// ResetShopOrder resets all changes to the "shop_order" edge.
func (m *ShippingAddressMutation) ResetShopOrder() {
	m.shop_order = nil
	m.clearedshop_order = false
	m.removedshop_order = nil
}

// Where appends a list predicates to the ShippingAddressMutation builder.
func (m *ShippingAddressMutation) Where(ps ...predicate.ShippingAddress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShippingAddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShippingAddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ShippingAddress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShippingAddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShippingAddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ShippingAddress).
func (m *ShippingAddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShippingAddressMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.phone_number != nil {
		fields = append(fields, shippingaddress.FieldPhoneNumber)
	}
	if m.address_line1 != nil {
		fields = append(fields, shippingaddress.FieldAddressLine1)
	}
	if m.address_line2 != nil {
		fields = append(fields, shippingaddress.FieldAddressLine2)
	}
	if m.city != nil {
		fields = append(fields, shippingaddress.FieldCity)
	}
	if m.state != nil {
		fields = append(fields, shippingaddress.FieldState)
	}
	if m.country != nil {
		fields = append(fields, shippingaddress.FieldCountry)
	}
	if m.postal_code != nil {
		fields = append(fields, shippingaddress.FieldPostalCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShippingAddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shippingaddress.FieldPhoneNumber:
		return m.PhoneNumber()
	case shippingaddress.FieldAddressLine1:
		return m.AddressLine1()
	case shippingaddress.FieldAddressLine2:
		return m.AddressLine2()
	case shippingaddress.FieldCity:
		return m.City()
	case shippingaddress.FieldState:
		return m.State()
	case shippingaddress.FieldCountry:
		return m.Country()
	case shippingaddress.FieldPostalCode:
		return m.PostalCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShippingAddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shippingaddress.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case shippingaddress.FieldAddressLine1:
		return m.OldAddressLine1(ctx)
	case shippingaddress.FieldAddressLine2:
		return m.OldAddressLine2(ctx)
	case shippingaddress.FieldCity:
		return m.OldCity(ctx)
	case shippingaddress.FieldState:
		return m.OldState(ctx)
	case shippingaddress.FieldCountry:
		return m.OldCountry(ctx)
	case shippingaddress.FieldPostalCode:
		return m.OldPostalCode(ctx)
	}
	return nil, fmt.Errorf("unknown ShippingAddress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShippingAddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shippingaddress.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case shippingaddress.FieldAddressLine1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressLine1(v)
		return nil
	case shippingaddress.FieldAddressLine2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressLine2(v)
		return nil
	case shippingaddress.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case shippingaddress.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case shippingaddress.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case shippingaddress.FieldPostalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostalCode(v)
		return nil
	}
	return fmt.Errorf("unknown ShippingAddress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShippingAddressMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShippingAddressMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShippingAddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ShippingAddress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShippingAddressMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(shippingaddress.FieldAddressLine2) {
		fields = append(fields, shippingaddress.FieldAddressLine2)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShippingAddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShippingAddressMutation) ClearField(name string) error {
	switch name {
	case shippingaddress.FieldAddressLine2:
		m.ClearAddressLine2()
		return nil
	}
	return fmt.Errorf("unknown ShippingAddress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShippingAddressMutation) ResetField(name string) error {
	switch name {
	case shippingaddress.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case shippingaddress.FieldAddressLine1:
		m.ResetAddressLine1()
		return nil
	case shippingaddress.FieldAddressLine2:
		m.ResetAddressLine2()
		return nil
	case shippingaddress.FieldCity:
		m.ResetCity()
		return nil
	case shippingaddress.FieldState:
		m.ResetState()
		return nil
	case shippingaddress.FieldCountry:
		m.ResetCountry()
		return nil
	case shippingaddress.FieldPostalCode:
		m.ResetPostalCode()
		return nil
	}
	return fmt.Errorf("unknown ShippingAddress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShippingAddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.shop_order != nil {
		edges = append(edges, shippingaddress.EdgeShopOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShippingAddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shippingaddress.EdgeShopOrder:
		ids := make([]ent.Value, 0, len(m.shop_order))
		for id := range m.shop_order {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShippingAddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedshop_order != nil {
		edges = append(edges, shippingaddress.EdgeShopOrder)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShippingAddressMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shippingaddress.EdgeShopOrder:
		ids := make([]ent.Value, 0, len(m.removedshop_order))
		for id := range m.removedshop_order {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShippingAddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedshop_order {
		edges = append(edges, shippingaddress.EdgeShopOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShippingAddressMutation) EdgeCleared(name string) bool {
	switch name {
	case shippingaddress.EdgeShopOrder:
		return m.clearedshop_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShippingAddressMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ShippingAddress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShippingAddressMutation) ResetEdge(name string) error {
	switch name {
	case shippingaddress.EdgeShopOrder:
		m.ResetShopOrder()
		return nil
	}
	return fmt.Errorf("unknown ShippingAddress edge %s", name)
}

// ShippingMethodMutation represents an operation that mutates the ShippingMethod nodes in the graph.
type ShippingMethodMutation struct {
	config
	op                Op
	typ               string
	id                *int
	shipping_method   *string
	shipping_cost     *float64
	addshipping_cost  *float64
	clearedFields     map[string]struct{}
	shop_order        map[int]struct{}
	removedshop_order map[int]struct{}
	clearedshop_order bool
	done              bool
	oldValue          func(context.Context) (*ShippingMethod, error)
	predicates        []predicate.ShippingMethod
}

var _ ent.Mutation = (*ShippingMethodMutation)(nil)

// shippingmethodOption allows management of the mutation configuration using functional options.
type shippingmethodOption func(*ShippingMethodMutation)

// newShippingMethodMutation creates new mutation for the ShippingMethod entity.
func newShippingMethodMutation(c config, op Op, opts ...shippingmethodOption) *ShippingMethodMutation {
	m := &ShippingMethodMutation{
		config:        c,
		op:            op,
		typ:           TypeShippingMethod,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShippingMethodID sets the ID field of the mutation.
func withShippingMethodID(id int) shippingmethodOption {
	return func(m *ShippingMethodMutation) {
		var (
			err   error
			once  sync.Once
			value *ShippingMethod
		)
		m.oldValue = func(ctx context.Context) (*ShippingMethod, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShippingMethod.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShippingMethod sets the old ShippingMethod of the mutation.
func withShippingMethod(node *ShippingMethod) shippingmethodOption {
	return func(m *ShippingMethodMutation) {
		m.oldValue = func(context.Context) (*ShippingMethod, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShippingMethodMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShippingMethodMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShippingMethodMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShippingMethodMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ShippingMethod.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetShippingMethod sets the "shipping_method" field.
func (m *ShippingMethodMutation) SetShippingMethod(s string) {
	m.shipping_method = &s
}

// ShippingMethod returns the value of the "shipping_method" field in the mutation.
func (m *ShippingMethodMutation) ShippingMethod() (r string, exists bool) {
	v := m.shipping_method
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingMethod returns the old "shipping_method" field's value of the ShippingMethod entity.
// If the ShippingMethod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShippingMethodMutation) OldShippingMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingMethod: %w", err)
	}
	return oldValue.ShippingMethod, nil
}

// ResetShippingMethod resets all changes to the "shipping_method" field.
func (m *ShippingMethodMutation) ResetShippingMethod() {
	m.shipping_method = nil
}

// SetShippingCost sets the "shipping_cost" field.
func (m *ShippingMethodMutation) SetShippingCost(f float64) {
	m.shipping_cost = &f
	m.addshipping_cost = nil
}

// ShippingCost returns the value of the "shipping_cost" field in the mutation.
func (m *ShippingMethodMutation) ShippingCost() (r float64, exists bool) {
	v := m.shipping_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingCost returns the old "shipping_cost" field's value of the ShippingMethod entity.
// If the ShippingMethod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShippingMethodMutation) OldShippingCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingCost: %w", err)
	}
	return oldValue.ShippingCost, nil
}

// AddShippingCost adds f to the "shipping_cost" field.
func (m *ShippingMethodMutation) AddShippingCost(f float64) {
	if m.addshipping_cost != nil {
		*m.addshipping_cost += f
	} else {
		m.addshipping_cost = &f
	}
}

// AddedShippingCost returns the value that was added to the "shipping_cost" field in this mutation.
func (m *ShippingMethodMutation) AddedShippingCost() (r float64, exists bool) {
	v := m.addshipping_cost
	if v == nil {
		return
	}
	return *v, true
}

// ResetShippingCost resets all changes to the "shipping_cost" field.
func (m *ShippingMethodMutation) ResetShippingCost() {
	m.shipping_cost = nil
	m.addshipping_cost = nil
}

// AddShopOrderIDs adds the "shop_order" edge to the ShopOrder entity by ids.
func (m *ShippingMethodMutation) AddShopOrderIDs(ids ...int) {
	if m.shop_order == nil {
		m.shop_order = make(map[int]struct{})
	}
	for i := range ids {
		m.shop_order[ids[i]] = struct{}{}
	}
}

// ClearShopOrder clears the "shop_order" edge to the ShopOrder entity.
func (m *ShippingMethodMutation) ClearShopOrder() {
	m.clearedshop_order = true
}

// ShopOrderCleared reports if the "shop_order" edge to the ShopOrder entity was cleared.
func (m *ShippingMethodMutation) ShopOrderCleared() bool {
	return m.clearedshop_order
}

// RemoveShopOrderIDs removes the "shop_order" edge to the ShopOrder entity by IDs.
func (m *ShippingMethodMutation) RemoveShopOrderIDs(ids ...int) {
	if m.removedshop_order == nil {
		m.removedshop_order = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shop_order, ids[i])
		m.removedshop_order[ids[i]] = struct{}{}
	}
}

// RemovedShopOrder returns the removed IDs of the "shop_order" edge to the ShopOrder entity.
func (m *ShippingMethodMutation) RemovedShopOrderIDs() (ids []int) {
	for id := range m.removedshop_order {
		ids = append(ids, id)
	}
	return
}

// ShopOrderIDs returns the "shop_order" edge IDs in the mutation.
func (m *ShippingMethodMutation) ShopOrderIDs() (ids []int) {
	for id := range m.shop_order {
		ids = append(ids, id)
	}
	return
}

// ResetShopOrder resets all changes to the "shop_order" edge.
func (m *ShippingMethodMutation) ResetShopOrder() {
	m.shop_order = nil
	m.clearedshop_order = false
	m.removedshop_order = nil
}

// Where appends a list predicates to the ShippingMethodMutation builder.
func (m *ShippingMethodMutation) Where(ps ...predicate.ShippingMethod) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShippingMethodMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShippingMethodMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ShippingMethod, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShippingMethodMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShippingMethodMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ShippingMethod).
func (m *ShippingMethodMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShippingMethodMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.shipping_method != nil {
		fields = append(fields, shippingmethod.FieldShippingMethod)
	}
	if m.shipping_cost != nil {
		fields = append(fields, shippingmethod.FieldShippingCost)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShippingMethodMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shippingmethod.FieldShippingMethod:
		return m.ShippingMethod()
	case shippingmethod.FieldShippingCost:
		return m.ShippingCost()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShippingMethodMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shippingmethod.FieldShippingMethod:
		return m.OldShippingMethod(ctx)
	case shippingmethod.FieldShippingCost:
		return m.OldShippingCost(ctx)
	}
	return nil, fmt.Errorf("unknown ShippingMethod field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShippingMethodMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shippingmethod.FieldShippingMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingMethod(v)
		return nil
	case shippingmethod.FieldShippingCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingCost(v)
		return nil
	}
	return fmt.Errorf("unknown ShippingMethod field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShippingMethodMutation) AddedFields() []string {
	var fields []string
	if m.addshipping_cost != nil {
		fields = append(fields, shippingmethod.FieldShippingCost)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShippingMethodMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shippingmethod.FieldShippingCost:
		return m.AddedShippingCost()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShippingMethodMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shippingmethod.FieldShippingCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShippingCost(v)
		return nil
	}
	return fmt.Errorf("unknown ShippingMethod numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShippingMethodMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShippingMethodMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShippingMethodMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShippingMethod nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShippingMethodMutation) ResetField(name string) error {
	switch name {
	case shippingmethod.FieldShippingMethod:
		m.ResetShippingMethod()
		return nil
	case shippingmethod.FieldShippingCost:
		m.ResetShippingCost()
		return nil
	}
	return fmt.Errorf("unknown ShippingMethod field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShippingMethodMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.shop_order != nil {
		edges = append(edges, shippingmethod.EdgeShopOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShippingMethodMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shippingmethod.EdgeShopOrder:
		ids := make([]ent.Value, 0, len(m.shop_order))
		for id := range m.shop_order {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShippingMethodMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedshop_order != nil {
		edges = append(edges, shippingmethod.EdgeShopOrder)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShippingMethodMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shippingmethod.EdgeShopOrder:
		ids := make([]ent.Value, 0, len(m.removedshop_order))
		for id := range m.removedshop_order {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShippingMethodMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedshop_order {
		edges = append(edges, shippingmethod.EdgeShopOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShippingMethodMutation) EdgeCleared(name string) bool {
	switch name {
	case shippingmethod.EdgeShopOrder:
		return m.clearedshop_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShippingMethodMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ShippingMethod unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShippingMethodMutation) ResetEdge(name string) error {
	switch name {
	case shippingmethod.EdgeShopOrder:
		m.ResetShopOrder()
		return nil
	}
	return fmt.Errorf("unknown ShippingMethod edge %s", name)
}

// ShopOrderMutation represents an operation that mutates the ShopOrder nodes in the graph.
type ShopOrderMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	order_date_and_time     *time.Time
	payment_method          *string
	total_price             *float64
	addtotal_price          *float64
	clearedFields           map[string]struct{}
	user                    *int
	cleareduser             bool
	shipping_method         *int
	clearedshipping_method  bool
	order_status            *int
	clearedorder_status     bool
	shipping_address        *int
	clearedshipping_address bool
	done                    bool
	oldValue                func(context.Context) (*ShopOrder, error)
	predicates              []predicate.ShopOrder
}

var _ ent.Mutation = (*ShopOrderMutation)(nil)

// shoporderOption allows management of the mutation configuration using functional options.
type shoporderOption func(*ShopOrderMutation)

// newShopOrderMutation creates new mutation for the ShopOrder entity.
func newShopOrderMutation(c config, op Op, opts ...shoporderOption) *ShopOrderMutation {
	m := &ShopOrderMutation{
		config:        c,
		op:            op,
		typ:           TypeShopOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShopOrderID sets the ID field of the mutation.
func withShopOrderID(id int) shoporderOption {
	return func(m *ShopOrderMutation) {
		var (
			err   error
			once  sync.Once
			value *ShopOrder
		)
		m.oldValue = func(ctx context.Context) (*ShopOrder, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShopOrder.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShopOrder sets the old ShopOrder of the mutation.
func withShopOrder(node *ShopOrder) shoporderOption {
	return func(m *ShopOrderMutation) {
		m.oldValue = func(context.Context) (*ShopOrder, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShopOrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShopOrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShopOrderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShopOrderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ShopOrder.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOrderDateAndTime sets the "order_date_and_time" field.
func (m *ShopOrderMutation) SetOrderDateAndTime(t time.Time) {
	m.order_date_and_time = &t
}

// OrderDateAndTime returns the value of the "order_date_and_time" field in the mutation.
func (m *ShopOrderMutation) OrderDateAndTime() (r time.Time, exists bool) {
	v := m.order_date_and_time
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderDateAndTime returns the old "order_date_and_time" field's value of the ShopOrder entity.
// If the ShopOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopOrderMutation) OldOrderDateAndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderDateAndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderDateAndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderDateAndTime: %w", err)
	}
	return oldValue.OrderDateAndTime, nil
}

// ResetOrderDateAndTime resets all changes to the "order_date_and_time" field.
func (m *ShopOrderMutation) ResetOrderDateAndTime() {
	m.order_date_and_time = nil
}

// SetPaymentMethod sets the "payment_method" field.
func (m *ShopOrderMutation) SetPaymentMethod(s string) {
	m.payment_method = &s
}

// PaymentMethod returns the value of the "payment_method" field in the mutation.
func (m *ShopOrderMutation) PaymentMethod() (r string, exists bool) {
	v := m.payment_method
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentMethod returns the old "payment_method" field's value of the ShopOrder entity.
// If the ShopOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopOrderMutation) OldPaymentMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentMethod: %w", err)
	}
	return oldValue.PaymentMethod, nil
}

// ResetPaymentMethod resets all changes to the "payment_method" field.
func (m *ShopOrderMutation) ResetPaymentMethod() {
	m.payment_method = nil
}

// SetTotalPrice sets the "total_price" field.
func (m *ShopOrderMutation) SetTotalPrice(f float64) {
	m.total_price = &f
	m.addtotal_price = nil
}

// TotalPrice returns the value of the "total_price" field in the mutation.
func (m *ShopOrderMutation) TotalPrice() (r float64, exists bool) {
	v := m.total_price
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalPrice returns the old "total_price" field's value of the ShopOrder entity.
// If the ShopOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopOrderMutation) OldTotalPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalPrice: %w", err)
	}
	return oldValue.TotalPrice, nil
}

// AddTotalPrice adds f to the "total_price" field.
func (m *ShopOrderMutation) AddTotalPrice(f float64) {
	if m.addtotal_price != nil {
		*m.addtotal_price += f
	} else {
		m.addtotal_price = &f
	}
}

// AddedTotalPrice returns the value that was added to the "total_price" field in this mutation.
func (m *ShopOrderMutation) AddedTotalPrice() (r float64, exists bool) {
	v := m.addtotal_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalPrice resets all changes to the "total_price" field.
func (m *ShopOrderMutation) ResetTotalPrice() {
	m.total_price = nil
	m.addtotal_price = nil
}

// SetUserID sets the "user_id" field.
func (m *ShopOrderMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ShopOrderMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ShopOrder entity.
// If the ShopOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopOrderMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ShopOrderMutation) ResetUserID() {
	m.user = nil
}

// SetShippingAddressID sets the "shipping_address_id" field.
func (m *ShopOrderMutation) SetShippingAddressID(i int) {
	m.shipping_address = &i
}

// ShippingAddressID returns the value of the "shipping_address_id" field in the mutation.
func (m *ShopOrderMutation) ShippingAddressID() (r int, exists bool) {
	v := m.shipping_address
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingAddressID returns the old "shipping_address_id" field's value of the ShopOrder entity.
// If the ShopOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopOrderMutation) OldShippingAddressID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingAddressID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingAddressID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingAddressID: %w", err)
	}
	return oldValue.ShippingAddressID, nil
}

// ResetShippingAddressID resets all changes to the "shipping_address_id" field.
func (m *ShopOrderMutation) ResetShippingAddressID() {
	m.shipping_address = nil
}

// SetShippingMethodID sets the "shipping_method_id" field.
func (m *ShopOrderMutation) SetShippingMethodID(i int) {
	m.shipping_method = &i
}

// ShippingMethodID returns the value of the "shipping_method_id" field in the mutation.
func (m *ShopOrderMutation) ShippingMethodID() (r int, exists bool) {
	v := m.shipping_method
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingMethodID returns the old "shipping_method_id" field's value of the ShopOrder entity.
// If the ShopOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopOrderMutation) OldShippingMethodID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingMethodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingMethodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingMethodID: %w", err)
	}
	return oldValue.ShippingMethodID, nil
}

// ResetShippingMethodID resets all changes to the "shipping_method_id" field.
func (m *ShopOrderMutation) ResetShippingMethodID() {
	m.shipping_method = nil
}

// SetOrderStatusID sets the "order_status_id" field.
func (m *ShopOrderMutation) SetOrderStatusID(i int) {
	m.order_status = &i
}

// OrderStatusID returns the value of the "order_status_id" field in the mutation.
func (m *ShopOrderMutation) OrderStatusID() (r int, exists bool) {
	v := m.order_status
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderStatusID returns the old "order_status_id" field's value of the ShopOrder entity.
// If the ShopOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopOrderMutation) OldOrderStatusID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderStatusID: %w", err)
	}
	return oldValue.OrderStatusID, nil
}

// ResetOrderStatusID resets all changes to the "order_status_id" field.
func (m *ShopOrderMutation) ResetOrderStatusID() {
	m.order_status = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ShopOrderMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ShopOrderMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ShopOrderMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ShopOrderMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearShippingMethod clears the "shipping_method" edge to the ShippingMethod entity.
func (m *ShopOrderMutation) ClearShippingMethod() {
	m.clearedshipping_method = true
}

// ShippingMethodCleared reports if the "shipping_method" edge to the ShippingMethod entity was cleared.
func (m *ShopOrderMutation) ShippingMethodCleared() bool {
	return m.clearedshipping_method
}

// ShippingMethodIDs returns the "shipping_method" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShippingMethodID instead. It exists only for internal usage by the builders.
func (m *ShopOrderMutation) ShippingMethodIDs() (ids []int) {
	if id := m.shipping_method; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShippingMethod resets all changes to the "shipping_method" edge.
func (m *ShopOrderMutation) ResetShippingMethod() {
	m.shipping_method = nil
	m.clearedshipping_method = false
}

// ClearOrderStatus clears the "order_status" edge to the OrderStatus entity.
func (m *ShopOrderMutation) ClearOrderStatus() {
	m.clearedorder_status = true
}

// OrderStatusCleared reports if the "order_status" edge to the OrderStatus entity was cleared.
func (m *ShopOrderMutation) OrderStatusCleared() bool {
	return m.clearedorder_status
}

// OrderStatusIDs returns the "order_status" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderStatusID instead. It exists only for internal usage by the builders.
func (m *ShopOrderMutation) OrderStatusIDs() (ids []int) {
	if id := m.order_status; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderStatus resets all changes to the "order_status" edge.
func (m *ShopOrderMutation) ResetOrderStatus() {
	m.order_status = nil
	m.clearedorder_status = false
}

// ClearShippingAddress clears the "shipping_address" edge to the ShippingAddress entity.
func (m *ShopOrderMutation) ClearShippingAddress() {
	m.clearedshipping_address = true
}

// ShippingAddressCleared reports if the "shipping_address" edge to the ShippingAddress entity was cleared.
func (m *ShopOrderMutation) ShippingAddressCleared() bool {
	return m.clearedshipping_address
}

// ShippingAddressIDs returns the "shipping_address" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShippingAddressID instead. It exists only for internal usage by the builders.
func (m *ShopOrderMutation) ShippingAddressIDs() (ids []int) {
	if id := m.shipping_address; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShippingAddress resets all changes to the "shipping_address" edge.
func (m *ShopOrderMutation) ResetShippingAddress() {
	m.shipping_address = nil
	m.clearedshipping_address = false
}

// Where appends a list predicates to the ShopOrderMutation builder.
func (m *ShopOrderMutation) Where(ps ...predicate.ShopOrder) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShopOrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShopOrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ShopOrder, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShopOrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShopOrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ShopOrder).
func (m *ShopOrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShopOrderMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.order_date_and_time != nil {
		fields = append(fields, shoporder.FieldOrderDateAndTime)
	}
	if m.payment_method != nil {
		fields = append(fields, shoporder.FieldPaymentMethod)
	}
	if m.total_price != nil {
		fields = append(fields, shoporder.FieldTotalPrice)
	}
	if m.user != nil {
		fields = append(fields, shoporder.FieldUserID)
	}
	if m.shipping_address != nil {
		fields = append(fields, shoporder.FieldShippingAddressID)
	}
	if m.shipping_method != nil {
		fields = append(fields, shoporder.FieldShippingMethodID)
	}
	if m.order_status != nil {
		fields = append(fields, shoporder.FieldOrderStatusID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShopOrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shoporder.FieldOrderDateAndTime:
		return m.OrderDateAndTime()
	case shoporder.FieldPaymentMethod:
		return m.PaymentMethod()
	case shoporder.FieldTotalPrice:
		return m.TotalPrice()
	case shoporder.FieldUserID:
		return m.UserID()
	case shoporder.FieldShippingAddressID:
		return m.ShippingAddressID()
	case shoporder.FieldShippingMethodID:
		return m.ShippingMethodID()
	case shoporder.FieldOrderStatusID:
		return m.OrderStatusID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShopOrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shoporder.FieldOrderDateAndTime:
		return m.OldOrderDateAndTime(ctx)
	case shoporder.FieldPaymentMethod:
		return m.OldPaymentMethod(ctx)
	case shoporder.FieldTotalPrice:
		return m.OldTotalPrice(ctx)
	case shoporder.FieldUserID:
		return m.OldUserID(ctx)
	case shoporder.FieldShippingAddressID:
		return m.OldShippingAddressID(ctx)
	case shoporder.FieldShippingMethodID:
		return m.OldShippingMethodID(ctx)
	case shoporder.FieldOrderStatusID:
		return m.OldOrderStatusID(ctx)
	}
	return nil, fmt.Errorf("unknown ShopOrder field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShopOrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shoporder.FieldOrderDateAndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderDateAndTime(v)
		return nil
	case shoporder.FieldPaymentMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentMethod(v)
		return nil
	case shoporder.FieldTotalPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalPrice(v)
		return nil
	case shoporder.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case shoporder.FieldShippingAddressID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingAddressID(v)
		return nil
	case shoporder.FieldShippingMethodID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingMethodID(v)
		return nil
	case shoporder.FieldOrderStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderStatusID(v)
		return nil
	}
	return fmt.Errorf("unknown ShopOrder field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShopOrderMutation) AddedFields() []string {
	var fields []string
	if m.addtotal_price != nil {
		fields = append(fields, shoporder.FieldTotalPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShopOrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shoporder.FieldTotalPrice:
		return m.AddedTotalPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShopOrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shoporder.FieldTotalPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalPrice(v)
		return nil
	}
	return fmt.Errorf("unknown ShopOrder numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShopOrderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShopOrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShopOrderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShopOrder nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShopOrderMutation) ResetField(name string) error {
	switch name {
	case shoporder.FieldOrderDateAndTime:
		m.ResetOrderDateAndTime()
		return nil
	case shoporder.FieldPaymentMethod:
		m.ResetPaymentMethod()
		return nil
	case shoporder.FieldTotalPrice:
		m.ResetTotalPrice()
		return nil
	case shoporder.FieldUserID:
		m.ResetUserID()
		return nil
	case shoporder.FieldShippingAddressID:
		m.ResetShippingAddressID()
		return nil
	case shoporder.FieldShippingMethodID:
		m.ResetShippingMethodID()
		return nil
	case shoporder.FieldOrderStatusID:
		m.ResetOrderStatusID()
		return nil
	}
	return fmt.Errorf("unknown ShopOrder field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShopOrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user != nil {
		edges = append(edges, shoporder.EdgeUser)
	}
	if m.shipping_method != nil {
		edges = append(edges, shoporder.EdgeShippingMethod)
	}
	if m.order_status != nil {
		edges = append(edges, shoporder.EdgeOrderStatus)
	}
	if m.shipping_address != nil {
		edges = append(edges, shoporder.EdgeShippingAddress)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShopOrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shoporder.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case shoporder.EdgeShippingMethod:
		if id := m.shipping_method; id != nil {
			return []ent.Value{*id}
		}
	case shoporder.EdgeOrderStatus:
		if id := m.order_status; id != nil {
			return []ent.Value{*id}
		}
	case shoporder.EdgeShippingAddress:
		if id := m.shipping_address; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShopOrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShopOrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShopOrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser {
		edges = append(edges, shoporder.EdgeUser)
	}
	if m.clearedshipping_method {
		edges = append(edges, shoporder.EdgeShippingMethod)
	}
	if m.clearedorder_status {
		edges = append(edges, shoporder.EdgeOrderStatus)
	}
	if m.clearedshipping_address {
		edges = append(edges, shoporder.EdgeShippingAddress)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShopOrderMutation) EdgeCleared(name string) bool {
	switch name {
	case shoporder.EdgeUser:
		return m.cleareduser
	case shoporder.EdgeShippingMethod:
		return m.clearedshipping_method
	case shoporder.EdgeOrderStatus:
		return m.clearedorder_status
	case shoporder.EdgeShippingAddress:
		return m.clearedshipping_address
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShopOrderMutation) ClearEdge(name string) error {
	switch name {
	case shoporder.EdgeUser:
		m.ClearUser()
		return nil
	case shoporder.EdgeShippingMethod:
		m.ClearShippingMethod()
		return nil
	case shoporder.EdgeOrderStatus:
		m.ClearOrderStatus()
		return nil
	case shoporder.EdgeShippingAddress:
		m.ClearShippingAddress()
		return nil
	}
	return fmt.Errorf("unknown ShopOrder unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShopOrderMutation) ResetEdge(name string) error {
	switch name {
	case shoporder.EdgeUser:
		m.ResetUser()
		return nil
	case shoporder.EdgeShippingMethod:
		m.ResetShippingMethod()
		return nil
	case shoporder.EdgeOrderStatus:
		m.ResetOrderStatus()
		return nil
	case shoporder.EdgeShippingAddress:
		m.ResetShippingAddress()
		return nil
	}
	return fmt.Errorf("unknown ShopOrder edge %s", name)
}

// ShoppingCartMutation represents an operation that mutates the ShoppingCart nodes in the graph.
type ShoppingCartMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	clearedFields             map[string]struct{}
	user                      *int
	cleareduser               bool
	shopping_cart_item        *int
	clearedshopping_cart_item bool
	done                      bool
	oldValue                  func(context.Context) (*ShoppingCart, error)
	predicates                []predicate.ShoppingCart
}

var _ ent.Mutation = (*ShoppingCartMutation)(nil)

// shoppingcartOption allows management of the mutation configuration using functional options.
type shoppingcartOption func(*ShoppingCartMutation)

// newShoppingCartMutation creates new mutation for the ShoppingCart entity.
func newShoppingCartMutation(c config, op Op, opts ...shoppingcartOption) *ShoppingCartMutation {
	m := &ShoppingCartMutation{
		config:        c,
		op:            op,
		typ:           TypeShoppingCart,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingCartID sets the ID field of the mutation.
func withShoppingCartID(id int) shoppingcartOption {
	return func(m *ShoppingCartMutation) {
		var (
			err   error
			once  sync.Once
			value *ShoppingCart
		)
		m.oldValue = func(ctx context.Context) (*ShoppingCart, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShoppingCart.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShoppingCart sets the old ShoppingCart of the mutation.
func withShoppingCart(node *ShoppingCart) shoppingcartOption {
	return func(m *ShoppingCartMutation) {
		m.oldValue = func(context.Context) (*ShoppingCart, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingCartMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingCartMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingCartMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShoppingCartMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ShoppingCart.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *ShoppingCartMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ShoppingCartMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ShoppingCart entity.
// If the ShoppingCart object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingCartMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ShoppingCartMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ShoppingCartMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ShoppingCartMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ShoppingCartMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ShoppingCartMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetShoppingCartItemID sets the "shopping_cart_item" edge to the ShoppingCartItem entity by id.
func (m *ShoppingCartMutation) SetShoppingCartItemID(id int) {
	m.shopping_cart_item = &id
}

// ClearShoppingCartItem clears the "shopping_cart_item" edge to the ShoppingCartItem entity.
func (m *ShoppingCartMutation) ClearShoppingCartItem() {
	m.clearedshopping_cart_item = true
}

// ShoppingCartItemCleared reports if the "shopping_cart_item" edge to the ShoppingCartItem entity was cleared.
func (m *ShoppingCartMutation) ShoppingCartItemCleared() bool {
	return m.clearedshopping_cart_item
}

// ShoppingCartItemID returns the "shopping_cart_item" edge ID in the mutation.
func (m *ShoppingCartMutation) ShoppingCartItemID() (id int, exists bool) {
	if m.shopping_cart_item != nil {
		return *m.shopping_cart_item, true
	}
	return
}

// ShoppingCartItemIDs returns the "shopping_cart_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShoppingCartItemID instead. It exists only for internal usage by the builders.
func (m *ShoppingCartMutation) ShoppingCartItemIDs() (ids []int) {
	if id := m.shopping_cart_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShoppingCartItem resets all changes to the "shopping_cart_item" edge.
func (m *ShoppingCartMutation) ResetShoppingCartItem() {
	m.shopping_cart_item = nil
	m.clearedshopping_cart_item = false
}

// Where appends a list predicates to the ShoppingCartMutation builder.
func (m *ShoppingCartMutation) Where(ps ...predicate.ShoppingCart) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShoppingCartMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShoppingCartMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ShoppingCart, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShoppingCartMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShoppingCartMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ShoppingCart).
func (m *ShoppingCartMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingCartMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.user != nil {
		fields = append(fields, shoppingcart.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingCartMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shoppingcart.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingCartMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shoppingcart.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown ShoppingCart field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingCartMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shoppingcart.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingCart field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingCartMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingCartMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingCartMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ShoppingCart numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingCartMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingCartMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingCartMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShoppingCart nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingCartMutation) ResetField(name string) error {
	switch name {
	case shoppingcart.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCart field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingCartMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, shoppingcart.EdgeUser)
	}
	if m.shopping_cart_item != nil {
		edges = append(edges, shoppingcart.EdgeShoppingCartItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingCartMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shoppingcart.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case shoppingcart.EdgeShoppingCartItem:
		if id := m.shopping_cart_item; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingCartMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingCartMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingCartMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, shoppingcart.EdgeUser)
	}
	if m.clearedshopping_cart_item {
		edges = append(edges, shoppingcart.EdgeShoppingCartItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingCartMutation) EdgeCleared(name string) bool {
	switch name {
	case shoppingcart.EdgeUser:
		return m.cleareduser
	case shoppingcart.EdgeShoppingCartItem:
		return m.clearedshopping_cart_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingCartMutation) ClearEdge(name string) error {
	switch name {
	case shoppingcart.EdgeUser:
		m.ClearUser()
		return nil
	case shoppingcart.EdgeShoppingCartItem:
		m.ClearShoppingCartItem()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCart unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingCartMutation) ResetEdge(name string) error {
	switch name {
	case shoppingcart.EdgeUser:
		m.ResetUser()
		return nil
	case shoppingcart.EdgeShoppingCartItem:
		m.ResetShoppingCartItem()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCart edge %s", name)
}

// ShoppingCartItemMutation represents an operation that mutates the ShoppingCartItem nodes in the graph.
type ShoppingCartItemMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	quantity             *int
	addquantity          *int
	clearedFields        map[string]struct{}
	shopping_cart        *int
	clearedshopping_cart bool
	product_item         *int
	clearedproduct_item  bool
	done                 bool
	oldValue             func(context.Context) (*ShoppingCartItem, error)
	predicates           []predicate.ShoppingCartItem
}

var _ ent.Mutation = (*ShoppingCartItemMutation)(nil)

// shoppingcartitemOption allows management of the mutation configuration using functional options.
type shoppingcartitemOption func(*ShoppingCartItemMutation)

// newShoppingCartItemMutation creates new mutation for the ShoppingCartItem entity.
func newShoppingCartItemMutation(c config, op Op, opts ...shoppingcartitemOption) *ShoppingCartItemMutation {
	m := &ShoppingCartItemMutation{
		config:        c,
		op:            op,
		typ:           TypeShoppingCartItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingCartItemID sets the ID field of the mutation.
func withShoppingCartItemID(id int) shoppingcartitemOption {
	return func(m *ShoppingCartItemMutation) {
		var (
			err   error
			once  sync.Once
			value *ShoppingCartItem
		)
		m.oldValue = func(ctx context.Context) (*ShoppingCartItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShoppingCartItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShoppingCartItem sets the old ShoppingCartItem of the mutation.
func withShoppingCartItem(node *ShoppingCartItem) shoppingcartitemOption {
	return func(m *ShoppingCartItemMutation) {
		m.oldValue = func(context.Context) (*ShoppingCartItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingCartItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingCartItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingCartItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShoppingCartItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ShoppingCartItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetShoppingCartID sets the "shopping_cart_id" field.
func (m *ShoppingCartItemMutation) SetShoppingCartID(i int) {
	m.shopping_cart = &i
}

// ShoppingCartID returns the value of the "shopping_cart_id" field in the mutation.
func (m *ShoppingCartItemMutation) ShoppingCartID() (r int, exists bool) {
	v := m.shopping_cart
	if v == nil {
		return
	}
	return *v, true
}

// OldShoppingCartID returns the old "shopping_cart_id" field's value of the ShoppingCartItem entity.
// If the ShoppingCartItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingCartItemMutation) OldShoppingCartID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShoppingCartID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShoppingCartID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShoppingCartID: %w", err)
	}
	return oldValue.ShoppingCartID, nil
}

// ResetShoppingCartID resets all changes to the "shopping_cart_id" field.
func (m *ShoppingCartItemMutation) ResetShoppingCartID() {
	m.shopping_cart = nil
}

// SetProductItemID sets the "product_item_id" field.
func (m *ShoppingCartItemMutation) SetProductItemID(i int) {
	m.product_item = &i
}

// ProductItemID returns the value of the "product_item_id" field in the mutation.
func (m *ShoppingCartItemMutation) ProductItemID() (r int, exists bool) {
	v := m.product_item
	if v == nil {
		return
	}
	return *v, true
}

// OldProductItemID returns the old "product_item_id" field's value of the ShoppingCartItem entity.
// If the ShoppingCartItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingCartItemMutation) OldProductItemID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductItemID: %w", err)
	}
	return oldValue.ProductItemID, nil
}

// ResetProductItemID resets all changes to the "product_item_id" field.
func (m *ShoppingCartItemMutation) ResetProductItemID() {
	m.product_item = nil
}

// SetQuantity sets the "quantity" field.
func (m *ShoppingCartItemMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *ShoppingCartItemMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the ShoppingCartItem entity.
// If the ShoppingCartItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingCartItemMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *ShoppingCartItemMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *ShoppingCartItemMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *ShoppingCartItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// ClearShoppingCart clears the "shopping_cart" edge to the ShoppingCart entity.
func (m *ShoppingCartItemMutation) ClearShoppingCart() {
	m.clearedshopping_cart = true
}

// ShoppingCartCleared reports if the "shopping_cart" edge to the ShoppingCart entity was cleared.
func (m *ShoppingCartItemMutation) ShoppingCartCleared() bool {
	return m.clearedshopping_cart
}

// ShoppingCartIDs returns the "shopping_cart" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShoppingCartID instead. It exists only for internal usage by the builders.
func (m *ShoppingCartItemMutation) ShoppingCartIDs() (ids []int) {
	if id := m.shopping_cart; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShoppingCart resets all changes to the "shopping_cart" edge.
func (m *ShoppingCartItemMutation) ResetShoppingCart() {
	m.shopping_cart = nil
	m.clearedshopping_cart = false
}

// ClearProductItem clears the "product_item" edge to the ProductItem entity.
func (m *ShoppingCartItemMutation) ClearProductItem() {
	m.clearedproduct_item = true
}

// ProductItemCleared reports if the "product_item" edge to the ProductItem entity was cleared.
func (m *ShoppingCartItemMutation) ProductItemCleared() bool {
	return m.clearedproduct_item
}

// ProductItemIDs returns the "product_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductItemID instead. It exists only for internal usage by the builders.
func (m *ShoppingCartItemMutation) ProductItemIDs() (ids []int) {
	if id := m.product_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProductItem resets all changes to the "product_item" edge.
func (m *ShoppingCartItemMutation) ResetProductItem() {
	m.product_item = nil
	m.clearedproduct_item = false
}

// Where appends a list predicates to the ShoppingCartItemMutation builder.
func (m *ShoppingCartItemMutation) Where(ps ...predicate.ShoppingCartItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShoppingCartItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShoppingCartItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ShoppingCartItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShoppingCartItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShoppingCartItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ShoppingCartItem).
func (m *ShoppingCartItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingCartItemMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.shopping_cart != nil {
		fields = append(fields, shoppingcartitem.FieldShoppingCartID)
	}
	if m.product_item != nil {
		fields = append(fields, shoppingcartitem.FieldProductItemID)
	}
	if m.quantity != nil {
		fields = append(fields, shoppingcartitem.FieldQuantity)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingCartItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shoppingcartitem.FieldShoppingCartID:
		return m.ShoppingCartID()
	case shoppingcartitem.FieldProductItemID:
		return m.ProductItemID()
	case shoppingcartitem.FieldQuantity:
		return m.Quantity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingCartItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shoppingcartitem.FieldShoppingCartID:
		return m.OldShoppingCartID(ctx)
	case shoppingcartitem.FieldProductItemID:
		return m.OldProductItemID(ctx)
	case shoppingcartitem.FieldQuantity:
		return m.OldQuantity(ctx)
	}
	return nil, fmt.Errorf("unknown ShoppingCartItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingCartItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shoppingcartitem.FieldShoppingCartID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShoppingCartID(v)
		return nil
	case shoppingcartitem.FieldProductItemID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductItemID(v)
		return nil
	case shoppingcartitem.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingCartItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingCartItemMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, shoppingcartitem.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingCartItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shoppingcartitem.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingCartItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shoppingcartitem.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingCartItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingCartItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingCartItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingCartItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShoppingCartItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingCartItemMutation) ResetField(name string) error {
	switch name {
	case shoppingcartitem.FieldShoppingCartID:
		m.ResetShoppingCartID()
		return nil
	case shoppingcartitem.FieldProductItemID:
		m.ResetProductItemID()
		return nil
	case shoppingcartitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCartItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingCartItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.shopping_cart != nil {
		edges = append(edges, shoppingcartitem.EdgeShoppingCart)
	}
	if m.product_item != nil {
		edges = append(edges, shoppingcartitem.EdgeProductItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingCartItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shoppingcartitem.EdgeShoppingCart:
		if id := m.shopping_cart; id != nil {
			return []ent.Value{*id}
		}
	case shoppingcartitem.EdgeProductItem:
		if id := m.product_item; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingCartItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingCartItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingCartItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedshopping_cart {
		edges = append(edges, shoppingcartitem.EdgeShoppingCart)
	}
	if m.clearedproduct_item {
		edges = append(edges, shoppingcartitem.EdgeProductItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingCartItemMutation) EdgeCleared(name string) bool {
	switch name {
	case shoppingcartitem.EdgeShoppingCart:
		return m.clearedshopping_cart
	case shoppingcartitem.EdgeProductItem:
		return m.clearedproduct_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingCartItemMutation) ClearEdge(name string) error {
	switch name {
	case shoppingcartitem.EdgeShoppingCart:
		m.ClearShoppingCart()
		return nil
	case shoppingcartitem.EdgeProductItem:
		m.ClearProductItem()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCartItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingCartItemMutation) ResetEdge(name string) error {
	switch name {
	case shoppingcartitem.EdgeShoppingCart:
		m.ResetShoppingCart()
		return nil
	case shoppingcartitem.EdgeProductItem:
		m.ResetProductItem()
		return nil
	}
	return fmt.Errorf("unknown ShoppingCartItem edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	username             *string
	email_address        *string
	password             *string
	first_name           *string
	last_name            *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	user_address         map[int]struct{}
	removeduser_address  map[int]struct{}
	cleareduser_address  bool
	user_review          map[int]struct{}
	removeduser_review   map[int]struct{}
	cleareduser_review   bool
	shopping_cart        map[int]struct{}
	removedshopping_cart map[int]struct{}
	clearedshopping_cart bool
	shop_order           map[int]struct{}
	removedshop_order    map[int]struct{}
	clearedshop_order    bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmailAddress sets the "email_address" field.
func (m *UserMutation) SetEmailAddress(s string) {
	m.email_address = &s
}

// EmailAddress returns the value of the "email_address" field in the mutation.
func (m *UserMutation) EmailAddress() (r string, exists bool) {
	v := m.email_address
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailAddress returns the old "email_address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailAddress: %w", err)
	}
	return oldValue.EmailAddress, nil
}

// ResetEmailAddress resets all changes to the "email_address" field.
func (m *UserMutation) ResetEmailAddress() {
	m.email_address = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddUserAddresIDs adds the "user_address" edge to the UserAddress entity by ids.
func (m *UserMutation) AddUserAddresIDs(ids ...int) {
	if m.user_address == nil {
		m.user_address = make(map[int]struct{})
	}
	for i := range ids {
		m.user_address[ids[i]] = struct{}{}
	}
}

// ClearUserAddress clears the "user_address" edge to the UserAddress entity.
func (m *UserMutation) ClearUserAddress() {
	m.cleareduser_address = true
}

// UserAddressCleared reports if the "user_address" edge to the UserAddress entity was cleared.
func (m *UserMutation) UserAddressCleared() bool {
	return m.cleareduser_address
}

// RemoveUserAddresIDs removes the "user_address" edge to the UserAddress entity by IDs.
func (m *UserMutation) RemoveUserAddresIDs(ids ...int) {
	if m.removeduser_address == nil {
		m.removeduser_address = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_address, ids[i])
		m.removeduser_address[ids[i]] = struct{}{}
	}
}

// RemovedUserAddress returns the removed IDs of the "user_address" edge to the UserAddress entity.
func (m *UserMutation) RemovedUserAddressIDs() (ids []int) {
	for id := range m.removeduser_address {
		ids = append(ids, id)
	}
	return
}

// UserAddressIDs returns the "user_address" edge IDs in the mutation.
func (m *UserMutation) UserAddressIDs() (ids []int) {
	for id := range m.user_address {
		ids = append(ids, id)
	}
	return
}

// ResetUserAddress resets all changes to the "user_address" edge.
func (m *UserMutation) ResetUserAddress() {
	m.user_address = nil
	m.cleareduser_address = false
	m.removeduser_address = nil
}

// AddUserReviewIDs adds the "user_review" edge to the UserReview entity by ids.
func (m *UserMutation) AddUserReviewIDs(ids ...int) {
	if m.user_review == nil {
		m.user_review = make(map[int]struct{})
	}
	for i := range ids {
		m.user_review[ids[i]] = struct{}{}
	}
}

// ClearUserReview clears the "user_review" edge to the UserReview entity.
func (m *UserMutation) ClearUserReview() {
	m.cleareduser_review = true
}

// UserReviewCleared reports if the "user_review" edge to the UserReview entity was cleared.
func (m *UserMutation) UserReviewCleared() bool {
	return m.cleareduser_review
}

// RemoveUserReviewIDs removes the "user_review" edge to the UserReview entity by IDs.
func (m *UserMutation) RemoveUserReviewIDs(ids ...int) {
	if m.removeduser_review == nil {
		m.removeduser_review = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_review, ids[i])
		m.removeduser_review[ids[i]] = struct{}{}
	}
}

// RemovedUserReview returns the removed IDs of the "user_review" edge to the UserReview entity.
func (m *UserMutation) RemovedUserReviewIDs() (ids []int) {
	for id := range m.removeduser_review {
		ids = append(ids, id)
	}
	return
}

// UserReviewIDs returns the "user_review" edge IDs in the mutation.
func (m *UserMutation) UserReviewIDs() (ids []int) {
	for id := range m.user_review {
		ids = append(ids, id)
	}
	return
}

// ResetUserReview resets all changes to the "user_review" edge.
func (m *UserMutation) ResetUserReview() {
	m.user_review = nil
	m.cleareduser_review = false
	m.removeduser_review = nil
}

// AddShoppingCartIDs adds the "shopping_cart" edge to the ShoppingCart entity by ids.
func (m *UserMutation) AddShoppingCartIDs(ids ...int) {
	if m.shopping_cart == nil {
		m.shopping_cart = make(map[int]struct{})
	}
	for i := range ids {
		m.shopping_cart[ids[i]] = struct{}{}
	}
}

// ClearShoppingCart clears the "shopping_cart" edge to the ShoppingCart entity.
func (m *UserMutation) ClearShoppingCart() {
	m.clearedshopping_cart = true
}

// ShoppingCartCleared reports if the "shopping_cart" edge to the ShoppingCart entity was cleared.
func (m *UserMutation) ShoppingCartCleared() bool {
	return m.clearedshopping_cart
}

// RemoveShoppingCartIDs removes the "shopping_cart" edge to the ShoppingCart entity by IDs.
func (m *UserMutation) RemoveShoppingCartIDs(ids ...int) {
	if m.removedshopping_cart == nil {
		m.removedshopping_cart = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shopping_cart, ids[i])
		m.removedshopping_cart[ids[i]] = struct{}{}
	}
}

// RemovedShoppingCart returns the removed IDs of the "shopping_cart" edge to the ShoppingCart entity.
func (m *UserMutation) RemovedShoppingCartIDs() (ids []int) {
	for id := range m.removedshopping_cart {
		ids = append(ids, id)
	}
	return
}

// ShoppingCartIDs returns the "shopping_cart" edge IDs in the mutation.
func (m *UserMutation) ShoppingCartIDs() (ids []int) {
	for id := range m.shopping_cart {
		ids = append(ids, id)
	}
	return
}

// ResetShoppingCart resets all changes to the "shopping_cart" edge.
func (m *UserMutation) ResetShoppingCart() {
	m.shopping_cart = nil
	m.clearedshopping_cart = false
	m.removedshopping_cart = nil
}

// AddShopOrderIDs adds the "shop_order" edge to the ShopOrder entity by ids.
func (m *UserMutation) AddShopOrderIDs(ids ...int) {
	if m.shop_order == nil {
		m.shop_order = make(map[int]struct{})
	}
	for i := range ids {
		m.shop_order[ids[i]] = struct{}{}
	}
}

// ClearShopOrder clears the "shop_order" edge to the ShopOrder entity.
func (m *UserMutation) ClearShopOrder() {
	m.clearedshop_order = true
}

// ShopOrderCleared reports if the "shop_order" edge to the ShopOrder entity was cleared.
func (m *UserMutation) ShopOrderCleared() bool {
	return m.clearedshop_order
}

// RemoveShopOrderIDs removes the "shop_order" edge to the ShopOrder entity by IDs.
func (m *UserMutation) RemoveShopOrderIDs(ids ...int) {
	if m.removedshop_order == nil {
		m.removedshop_order = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shop_order, ids[i])
		m.removedshop_order[ids[i]] = struct{}{}
	}
}

// RemovedShopOrder returns the removed IDs of the "shop_order" edge to the ShopOrder entity.
func (m *UserMutation) RemovedShopOrderIDs() (ids []int) {
	for id := range m.removedshop_order {
		ids = append(ids, id)
	}
	return
}

// ShopOrderIDs returns the "shop_order" edge IDs in the mutation.
func (m *UserMutation) ShopOrderIDs() (ids []int) {
	for id := range m.shop_order {
		ids = append(ids, id)
	}
	return
}

// ResetShopOrder resets all changes to the "shop_order" edge.
func (m *UserMutation) ResetShopOrder() {
	m.shop_order = nil
	m.clearedshop_order = false
	m.removedshop_order = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email_address != nil {
		fields = append(fields, user.FieldEmailAddress)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmailAddress:
		return m.EmailAddress()
	case user.FieldPassword:
		return m.Password()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmailAddress:
		return m.OldEmailAddress(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmailAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailAddress(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmailAddress:
		m.ResetEmailAddress()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user_address != nil {
		edges = append(edges, user.EdgeUserAddress)
	}
	if m.user_review != nil {
		edges = append(edges, user.EdgeUserReview)
	}
	if m.shopping_cart != nil {
		edges = append(edges, user.EdgeShoppingCart)
	}
	if m.shop_order != nil {
		edges = append(edges, user.EdgeShopOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserAddress:
		ids := make([]ent.Value, 0, len(m.user_address))
		for id := range m.user_address {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserReview:
		ids := make([]ent.Value, 0, len(m.user_review))
		for id := range m.user_review {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeShoppingCart:
		ids := make([]ent.Value, 0, len(m.shopping_cart))
		for id := range m.shopping_cart {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeShopOrder:
		ids := make([]ent.Value, 0, len(m.shop_order))
		for id := range m.shop_order {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeduser_address != nil {
		edges = append(edges, user.EdgeUserAddress)
	}
	if m.removeduser_review != nil {
		edges = append(edges, user.EdgeUserReview)
	}
	if m.removedshopping_cart != nil {
		edges = append(edges, user.EdgeShoppingCart)
	}
	if m.removedshop_order != nil {
		edges = append(edges, user.EdgeShopOrder)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserAddress:
		ids := make([]ent.Value, 0, len(m.removeduser_address))
		for id := range m.removeduser_address {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserReview:
		ids := make([]ent.Value, 0, len(m.removeduser_review))
		for id := range m.removeduser_review {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeShoppingCart:
		ids := make([]ent.Value, 0, len(m.removedshopping_cart))
		for id := range m.removedshopping_cart {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeShopOrder:
		ids := make([]ent.Value, 0, len(m.removedshop_order))
		for id := range m.removedshop_order {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser_address {
		edges = append(edges, user.EdgeUserAddress)
	}
	if m.cleareduser_review {
		edges = append(edges, user.EdgeUserReview)
	}
	if m.clearedshopping_cart {
		edges = append(edges, user.EdgeShoppingCart)
	}
	if m.clearedshop_order {
		edges = append(edges, user.EdgeShopOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserAddress:
		return m.cleareduser_address
	case user.EdgeUserReview:
		return m.cleareduser_review
	case user.EdgeShoppingCart:
		return m.clearedshopping_cart
	case user.EdgeShopOrder:
		return m.clearedshop_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserAddress:
		m.ResetUserAddress()
		return nil
	case user.EdgeUserReview:
		m.ResetUserReview()
		return nil
	case user.EdgeShoppingCart:
		m.ResetShoppingCart()
		return nil
	case user.EdgeShopOrder:
		m.ResetShopOrder()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserAddressMutation represents an operation that mutates the UserAddress nodes in the graph.
type UserAddressMutation struct {
	config
	op             Op
	typ            string
	id             *int
	is_default     *bool
	clearedFields  map[string]struct{}
	user           *int
	cleareduser    bool
	address        *int
	clearedaddress bool
	done           bool
	oldValue       func(context.Context) (*UserAddress, error)
	predicates     []predicate.UserAddress
}

var _ ent.Mutation = (*UserAddressMutation)(nil)

// useraddressOption allows management of the mutation configuration using functional options.
type useraddressOption func(*UserAddressMutation)

// newUserAddressMutation creates new mutation for the UserAddress entity.
func newUserAddressMutation(c config, op Op, opts ...useraddressOption) *UserAddressMutation {
	m := &UserAddressMutation{
		config:        c,
		op:            op,
		typ:           TypeUserAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserAddressID sets the ID field of the mutation.
func withUserAddressID(id int) useraddressOption {
	return func(m *UserAddressMutation) {
		var (
			err   error
			once  sync.Once
			value *UserAddress
		)
		m.oldValue = func(ctx context.Context) (*UserAddress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserAddress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserAddress sets the old UserAddress of the mutation.
func withUserAddress(node *UserAddress) useraddressOption {
	return func(m *UserAddressMutation) {
		m.oldValue = func(context.Context) (*UserAddress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserAddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserAddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserAddressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserAddressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserAddress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserAddressMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserAddressMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserAddress entity.
// If the UserAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAddressMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserAddressMutation) ResetUserID() {
	m.user = nil
}

// SetAddressID sets the "address_id" field.
func (m *UserAddressMutation) SetAddressID(i int) {
	m.address = &i
}

// AddressID returns the value of the "address_id" field in the mutation.
func (m *UserAddressMutation) AddressID() (r int, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressID returns the old "address_id" field's value of the UserAddress entity.
// If the UserAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAddressMutation) OldAddressID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressID: %w", err)
	}
	return oldValue.AddressID, nil
}

// ResetAddressID resets all changes to the "address_id" field.
func (m *UserAddressMutation) ResetAddressID() {
	m.address = nil
}

// SetIsDefault sets the "is_default" field.
func (m *UserAddressMutation) SetIsDefault(b bool) {
	m.is_default = &b
}

// IsDefault returns the value of the "is_default" field in the mutation.
func (m *UserAddressMutation) IsDefault() (r bool, exists bool) {
	v := m.is_default
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDefault returns the old "is_default" field's value of the UserAddress entity.
// If the UserAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserAddressMutation) OldIsDefault(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDefault: %w", err)
	}
	return oldValue.IsDefault, nil
}

// ResetIsDefault resets all changes to the "is_default" field.
func (m *UserAddressMutation) ResetIsDefault() {
	m.is_default = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserAddressMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserAddressMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserAddressMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserAddressMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearAddress clears the "address" edge to the Address entity.
func (m *UserAddressMutation) ClearAddress() {
	m.clearedaddress = true
}

// AddressCleared reports if the "address" edge to the Address entity was cleared.
func (m *UserAddressMutation) AddressCleared() bool {
	return m.clearedaddress
}

// AddressIDs returns the "address" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AddressID instead. It exists only for internal usage by the builders.
func (m *UserAddressMutation) AddressIDs() (ids []int) {
	if id := m.address; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAddress resets all changes to the "address" edge.
func (m *UserAddressMutation) ResetAddress() {
	m.address = nil
	m.clearedaddress = false
}

// Where appends a list predicates to the UserAddressMutation builder.
func (m *UserAddressMutation) Where(ps ...predicate.UserAddress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserAddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserAddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserAddress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserAddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserAddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserAddress).
func (m *UserAddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserAddressMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, useraddress.FieldUserID)
	}
	if m.address != nil {
		fields = append(fields, useraddress.FieldAddressID)
	}
	if m.is_default != nil {
		fields = append(fields, useraddress.FieldIsDefault)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserAddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case useraddress.FieldUserID:
		return m.UserID()
	case useraddress.FieldAddressID:
		return m.AddressID()
	case useraddress.FieldIsDefault:
		return m.IsDefault()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserAddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case useraddress.FieldUserID:
		return m.OldUserID(ctx)
	case useraddress.FieldAddressID:
		return m.OldAddressID(ctx)
	case useraddress.FieldIsDefault:
		return m.OldIsDefault(ctx)
	}
	return nil, fmt.Errorf("unknown UserAddress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserAddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case useraddress.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case useraddress.FieldAddressID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressID(v)
		return nil
	case useraddress.FieldIsDefault:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDefault(v)
		return nil
	}
	return fmt.Errorf("unknown UserAddress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserAddressMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserAddressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserAddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserAddress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserAddressMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserAddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserAddressMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserAddress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserAddressMutation) ResetField(name string) error {
	switch name {
	case useraddress.FieldUserID:
		m.ResetUserID()
		return nil
	case useraddress.FieldAddressID:
		m.ResetAddressID()
		return nil
	case useraddress.FieldIsDefault:
		m.ResetIsDefault()
		return nil
	}
	return fmt.Errorf("unknown UserAddress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserAddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, useraddress.EdgeUser)
	}
	if m.address != nil {
		edges = append(edges, useraddress.EdgeAddress)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserAddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case useraddress.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case useraddress.EdgeAddress:
		if id := m.address; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserAddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserAddressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserAddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, useraddress.EdgeUser)
	}
	if m.clearedaddress {
		edges = append(edges, useraddress.EdgeAddress)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserAddressMutation) EdgeCleared(name string) bool {
	switch name {
	case useraddress.EdgeUser:
		return m.cleareduser
	case useraddress.EdgeAddress:
		return m.clearedaddress
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserAddressMutation) ClearEdge(name string) error {
	switch name {
	case useraddress.EdgeUser:
		m.ClearUser()
		return nil
	case useraddress.EdgeAddress:
		m.ClearAddress()
		return nil
	}
	return fmt.Errorf("unknown UserAddress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserAddressMutation) ResetEdge(name string) error {
	switch name {
	case useraddress.EdgeUser:
		m.ResetUser()
		return nil
	case useraddress.EdgeAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown UserAddress edge %s", name)
}

// UserReviewMutation represents an operation that mutates the UserReview nodes in the graph.
type UserReviewMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	rating                 *int
	addrating              *int
	review                 *string
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	user                   *int
	cleareduser            bool
	ordered_product        *int
	clearedordered_product bool
	done                   bool
	oldValue               func(context.Context) (*UserReview, error)
	predicates             []predicate.UserReview
}

var _ ent.Mutation = (*UserReviewMutation)(nil)

// userreviewOption allows management of the mutation configuration using functional options.
type userreviewOption func(*UserReviewMutation)

// newUserReviewMutation creates new mutation for the UserReview entity.
func newUserReviewMutation(c config, op Op, opts ...userreviewOption) *UserReviewMutation {
	m := &UserReviewMutation{
		config:        c,
		op:            op,
		typ:           TypeUserReview,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserReviewID sets the ID field of the mutation.
func withUserReviewID(id int) userreviewOption {
	return func(m *UserReviewMutation) {
		var (
			err   error
			once  sync.Once
			value *UserReview
		)
		m.oldValue = func(ctx context.Context) (*UserReview, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserReview.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserReview sets the old UserReview of the mutation.
func withUserReview(node *UserReview) userreviewOption {
	return func(m *UserReviewMutation) {
		m.oldValue = func(context.Context) (*UserReview, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserReviewMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserReviewMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserReviewMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserReviewMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserReview.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserReviewMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserReviewMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserReviewMutation) ResetUserID() {
	m.user = nil
}

// SetOrderedProductID sets the "ordered_product_id" field.
func (m *UserReviewMutation) SetOrderedProductID(i int) {
	m.ordered_product = &i
}

// OrderedProductID returns the value of the "ordered_product_id" field in the mutation.
func (m *UserReviewMutation) OrderedProductID() (r int, exists bool) {
	v := m.ordered_product
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderedProductID returns the old "ordered_product_id" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldOrderedProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderedProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderedProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderedProductID: %w", err)
	}
	return oldValue.OrderedProductID, nil
}

// ResetOrderedProductID resets all changes to the "ordered_product_id" field.
func (m *UserReviewMutation) ResetOrderedProductID() {
	m.ordered_product = nil
}

// SetRating sets the "rating" field.
func (m *UserReviewMutation) SetRating(i int) {
	m.rating = &i
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *UserReviewMutation) Rating() (r int, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldRating(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds i to the "rating" field.
func (m *UserReviewMutation) AddRating(i int) {
	if m.addrating != nil {
		*m.addrating += i
	} else {
		m.addrating = &i
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *UserReviewMutation) AddedRating() (r int, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating resets all changes to the "rating" field.
func (m *UserReviewMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
}

// SetReview sets the "review" field.
func (m *UserReviewMutation) SetReview(s string) {
	m.review = &s
}

// Review returns the value of the "review" field in the mutation.
func (m *UserReviewMutation) Review() (r string, exists bool) {
	v := m.review
	if v == nil {
		return
	}
	return *v, true
}

// OldReview returns the old "review" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldReview(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReview is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReview requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReview: %w", err)
	}
	return oldValue.Review, nil
}

// ResetReview resets all changes to the "review" field.
func (m *UserReviewMutation) ResetReview() {
	m.review = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserReviewMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserReviewMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserReviewMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserReviewMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserReviewMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserReview entity.
// If the UserReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserReviewMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserReviewMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserReviewMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserReviewMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserReviewMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserReviewMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearOrderedProduct clears the "ordered_product" edge to the OrderLine entity.
func (m *UserReviewMutation) ClearOrderedProduct() {
	m.clearedordered_product = true
}

// OrderedProductCleared reports if the "ordered_product" edge to the OrderLine entity was cleared.
func (m *UserReviewMutation) OrderedProductCleared() bool {
	return m.clearedordered_product
}

// OrderedProductIDs returns the "ordered_product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderedProductID instead. It exists only for internal usage by the builders.
func (m *UserReviewMutation) OrderedProductIDs() (ids []int) {
	if id := m.ordered_product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrderedProduct resets all changes to the "ordered_product" edge.
func (m *UserReviewMutation) ResetOrderedProduct() {
	m.ordered_product = nil
	m.clearedordered_product = false
}

// Where appends a list predicates to the UserReviewMutation builder.
func (m *UserReviewMutation) Where(ps ...predicate.UserReview) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserReviewMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserReviewMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserReview, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserReviewMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserReviewMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserReview).
func (m *UserReviewMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserReviewMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user != nil {
		fields = append(fields, userreview.FieldUserID)
	}
	if m.ordered_product != nil {
		fields = append(fields, userreview.FieldOrderedProductID)
	}
	if m.rating != nil {
		fields = append(fields, userreview.FieldRating)
	}
	if m.review != nil {
		fields = append(fields, userreview.FieldReview)
	}
	if m.created_at != nil {
		fields = append(fields, userreview.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userreview.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserReviewMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userreview.FieldUserID:
		return m.UserID()
	case userreview.FieldOrderedProductID:
		return m.OrderedProductID()
	case userreview.FieldRating:
		return m.Rating()
	case userreview.FieldReview:
		return m.Review()
	case userreview.FieldCreatedAt:
		return m.CreatedAt()
	case userreview.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserReviewMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userreview.FieldUserID:
		return m.OldUserID(ctx)
	case userreview.FieldOrderedProductID:
		return m.OldOrderedProductID(ctx)
	case userreview.FieldRating:
		return m.OldRating(ctx)
	case userreview.FieldReview:
		return m.OldReview(ctx)
	case userreview.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userreview.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserReview field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserReviewMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userreview.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userreview.FieldOrderedProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderedProductID(v)
		return nil
	case userreview.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	case userreview.FieldReview:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReview(v)
		return nil
	case userreview.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userreview.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserReview field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserReviewMutation) AddedFields() []string {
	var fields []string
	if m.addrating != nil {
		fields = append(fields, userreview.FieldRating)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserReviewMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userreview.FieldRating:
		return m.AddedRating()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserReviewMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userreview.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	}
	return fmt.Errorf("unknown UserReview numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserReviewMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserReviewMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserReviewMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserReview nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserReviewMutation) ResetField(name string) error {
	switch name {
	case userreview.FieldUserID:
		m.ResetUserID()
		return nil
	case userreview.FieldOrderedProductID:
		m.ResetOrderedProductID()
		return nil
	case userreview.FieldRating:
		m.ResetRating()
		return nil
	case userreview.FieldReview:
		m.ResetReview()
		return nil
	case userreview.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userreview.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserReview field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserReviewMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, userreview.EdgeUser)
	}
	if m.ordered_product != nil {
		edges = append(edges, userreview.EdgeOrderedProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserReviewMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userreview.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case userreview.EdgeOrderedProduct:
		if id := m.ordered_product; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserReviewMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserReviewMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserReviewMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, userreview.EdgeUser)
	}
	if m.clearedordered_product {
		edges = append(edges, userreview.EdgeOrderedProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserReviewMutation) EdgeCleared(name string) bool {
	switch name {
	case userreview.EdgeUser:
		return m.cleareduser
	case userreview.EdgeOrderedProduct:
		return m.clearedordered_product
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserReviewMutation) ClearEdge(name string) error {
	switch name {
	case userreview.EdgeUser:
		m.ClearUser()
		return nil
	case userreview.EdgeOrderedProduct:
		m.ClearOrderedProduct()
		return nil
	}
	return fmt.Errorf("unknown UserReview unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserReviewMutation) ResetEdge(name string) error {
	switch name {
	case userreview.EdgeUser:
		m.ResetUser()
		return nil
	case userreview.EdgeOrderedProduct:
		m.ResetOrderedProduct()
		return nil
	}
	return fmt.Errorf("unknown UserReview edge %s", name)
}
