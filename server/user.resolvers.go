package healthyshopper

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"healthyshopper/ent"
	resErr "healthyshopper/pkg/response_errors"
	"healthyshopper/pkg/validation"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, userInfo RegisterInput) (*ent.User, error) {
	// Create a new user

	registerInput := &validation.RegisterInput{
		FirstName:    userInfo.FirstName,
		LastName:     userInfo.LastName,
		Username:     userInfo.Username,
		EmailAddress: userInfo.EmailAddress,
		Password:     userInfo.Password, // This password will not meet the complexity requirements
	}

	validationError := validation.ValidateRegisterInput(registerInput)

	if validationError != nil {
		fmt.Println("Validation Error: ", validationError)
	}

	user, err := r.client.User.
		Create().
		SetUsername(userInfo.Username).
		SetEmailAddress(userInfo.EmailAddress).
		SetPassword(userInfo.Password).
		SetFirstName(userInfo.FirstName).
		SetLastName(userInfo.LastName).
		Save(ctx)

	redisStore := ctx.Value("redisStore").(*RedisStore)

	redisStore.SetCookie("Register Cookie")

	if validationError != nil {
		return nil, validationError
	} else if err != nil {

		return nil, &resErr.ResponseError{
			MainError: err,
			Field:     "reasdfasdfblablablabla",
			Message:   "RegisterErrorMessage",
		}

	}

	return user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, userInfo LoginInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, currentPageNumber int, limitValue int) (*PaginatedUser, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
